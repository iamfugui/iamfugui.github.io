<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2022/09/24/xin-jian-wen-jian-jia/123/"/>
      <url>/2022/09/24/xin-jian-wen-jian-jia/123/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/09/24/1-js-gai-nian-console-shi-yi-bu-huan-shi-tong-bu/"/>
      <url>/2022/09/24/1-js-gai-nian-console-shi-yi-bu-huan-shi-tong-bu/</url>
      
        <content type="html"><![CDATA[<p>开发的时候经常会输出对象类型</p><p>但遇到这种情况，会让我们以为console是异步：</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">let obj &#x3D;&#123;        name:&quot;小明&quot;&#125;console.log(obj);&#x2F;&#x2F;输出&#123;name:小李&#125;，但是手动点击展开时发现是小明obj.name &#x3D; &quot;小李&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><p>其实这并不是异步，而是谷歌浏览器的一种优化，对于引用类型的数据读取是存在延迟的。<br>默认只输出一层。当你点击展开时，又会重新输出内存中的新值和下一层的数据。<br>所以我们会展开是看到的是{name:小明}，展开后又变成了{name:小李}<br>所以console是同步的，而Node环境上是严格同步的，不存在这种情况</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>你的第一个程序是&quot;Hello World&quot;？</title>
      <link href="/2022/08/13/hello-world/"/>
      <url>/2022/08/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>我的第一门编程课是Java，而输出的第一个程序就是”Hello World”。</p><pre class="line-numbers language-java" data-language="java"><div class="caption"><span>javaScript php</span></div><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>echo <span class="token string">"Hello World"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><br>A：喂，第一个程序为什么都是”Hello World”啊？<br><br>B：老师教的。<br><br>A：为什么不教其它？<br><br>B：书上写着咯。<br><br>A：java C# js是同一本书？<br><br>B：诶，你很无聊诶…<br><br><br>根据维基百科记载，”Hello World”最早出现在Kernighan的B语言手册上。程序员出于某种仪式感或是洁癖，”Hello World”代代相传至今。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JS-概念-按位非 (~)是什么操作？什么是原码、反码、补码？</title>
      <link href="/2022/07/02/js-gai-nian-an-wei-fei-shi-shi-me-cao-zuo-shi-me-shi-yuan-ma-fan-ma-bu-ma/"/>
      <url>/2022/07/02/js-gai-nian-an-wei-fei-shi-shi-me-cao-zuo-shi-me-shi-yuan-ma-fan-ma-bu-ma/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>本文你将会知道JS中的按位非 (~)，什么是原码、反码、补码，负数如何在计算机中表示，以及为什么要使用补码。</strong></p><p>起因是在复习运算符优先级的时候，发现了按位非（~）。</p><p>以下是MDN官方给的示例：</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">const a &#x3D; 5;     &#x2F;&#x2F; 00000000000000000000000000000101const b &#x3D; -3;    &#x2F;&#x2F; 11111111111111111111111111111101console.log(~a); &#x2F;&#x2F; 11111111111111111111111111111010&#x2F;&#x2F; expected output: -6console.log(~b); &#x2F;&#x2F; 00000000000000000000000000000010&#x2F;&#x2F; expected output: 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有点蒙，为什么~a等于-6？真是“基础不牢，地动山摇”，所以有了本文。</p><p>我们知道计算机的数据存储是以0和1来表示的。那么为了能完整表示数据，就有了原码、反码、补码。</p><p>在计算机中，存储和计算都是以补码来完成的。</p><p>下面我们来看一下什么是原码、反码、补码：</p><h2 id="1-原码"><a href="#1-原码" class="headerlink" title="1. 原码"></a>1. 原码</h2><p>负数在二进制中的表示是，最高位是1</p><p>如-5： </p><p>1000 0101 （原码）</p><p>注意，无论8位表示还是多少位，负数最高位都应该是1。</p><h2 id="2-反码"><a href="#2-反码" class="headerlink" title="2. 反码"></a>2. 反码</h2><p>对于正数，反码与原码一致。</p><p>对于负数，原码按位取反（最高位不变）。</p><p>如-5： </p><p>1111 1010 （反码）</p><h2 id="3-补码"><a href="#3-补码" class="headerlink" title="3. 补码"></a>3. 补码</h2><p>对于正数，补码与原码一致。</p><p>对于负数，补码要在反码的基础上加1。</p><p>如-5： </p><p>1111 1011 （补码）</p><h2 id="4-计算"><a href="#4-计算" class="headerlink" title="4. 计算"></a>4. 计算</h2><p>刚刚我们说了计算机的存储和计算都是以补码来完成的。</p><p>那么为什么要使用补码？</p><p>在论述之前，我们需要知道计算机只要加运算，要通过操作负数来完成减运算。</p><p>例如：5 - 5</p><p>（1）如果使用原码，有以下结果：</p><p>0000 0101 （5原码）</p><p>1000 0101 （-5原码）</p><p>1000 1010 （-10）</p><p>明显不对</p><p>（2）如果使用反码，有以下结果：</p><p>0000 0101 （5反码）</p><p>1111 1010 （-5反码）</p><p>1111 1111 （-0反码）</p><p>为方便观看，将反码结果转成原码，有1000 0000（-0原码）。似乎结果是正确的？-0不就是0吗？但是我们要知道在计算机中0还有其它表示0000 0000。这样一来就有了两个二进制表示0，这样就乱套了。</p><p>（3）如果使用补码，有以下结果：</p><p> 0000 0101 （5补码）</p><p> 1111 1011 （-5补码）</p><p>10000 0000 （0）</p><p>我们讨论的是8位的计算，结果得到了9位，这里就可以直接的舍弃第九位。那么久得到0000 0000，记过为0，完全正确。</p><p>所以这就是使用补码的原因。</p><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p>回到MDN官方示例</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">const a &#x3D; 5;     &#x2F;&#x2F; 00000000000000000000000000000101console.log(~a); &#x2F;&#x2F; 11111111111111111111111111111010&#x2F;&#x2F; expected output: -6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>按位非就是将每一位反转。 </p><p>原来我一开始是被这一大串1迷惑了，这一大串就是-6的二进制表示（补码），~5 &#x3D; -6。</p><p>为了方便浏览，我们可以将其缩短致8位的原码：</p><p>1111 1010（-6补码）</p><p>1111 1001（-6反码）</p><p>1000 0110（-6原码）</p><p>所以，所以，110就是6</p><p>所以，所以，1000 0110 就是-6的原码</p><p>所以，所以，1111 1001 就是-6的反码</p><p>所以，所以，1111 1010 就是-6的补码</p><p>而11111111111111111111111111111010就是-6的补码的32位表示了！！！</p><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT</a></p><p><a href="https://www.bilibili.com/video/BV1Y7411t7Fj">https://www.bilibili.com/video/BV1Y7411t7Fj</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> 概念 </tag>
            
            <tag> 计算机基础 </tag>
            
            <tag> 二进制 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
