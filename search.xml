<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>常见问题总结</title>
      <link href="/2022/12/23/note/qian-duan-bian-cheng-mian-shi-chu-ji-qian-duan-mian-shi/"/>
      <url>/2022/12/23/note/qian-duan-bian-cheng-mian-shi-chu-ji-qian-duan-mian-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h2><h3 id="1、HTML5的新特性？"><a href="#1、HTML5的新特性？" class="headerlink" title="1、HTML5的新特性？"></a>1、HTML5的新特性？</h3><ul><li>1、语义化标签，比如header、footer、main、article、section、nav、aside、hgroup、figure、figcaption</li></ul><p>a)这些功能都可以用div来实现，使用新标签，可以让页面更清晰，语意化<br>b)hgroup 大小标题组<br>c)article 独立内容<br>d)aside 辅助内容(侧边推荐这种)<br>e)section和article相似（常存在于article之中，代表每一项）<br>f)figure描述图像视频<br>g)figcaption描述图像视频标题（常被框于figure中）<br>r)略</p><ul><li>2、音视频，比如audio、video</li><li>3、画布canvas、矢量图svg</li><li>3、画布，canvas的api有getContext、fillStyle、fillRect等</li><li>4、本地存储localStorage、sessionStorage</li><li>5、web worker</li></ul><h3 id="2、语义化的好处？"><a href="#2、语义化的好处？" class="headerlink" title="2、语义化的好处？"></a>2、语义化的好处？</h3><ul><li>1、代码分块清晰，便于维护</li><li>2、页面结构清晰，便于浏览器、搜索引擎解析</li><li>3、利于搜索引擎的爬取，利于SEO</li></ul><h3 id="3、canvas的常用api有哪些？"><a href="#3、canvas的常用api有哪些？" class="headerlink" title="3、canvas的常用api有哪些？"></a>3、canvas的常用api有哪些？</h3><ul><li>getContext：返回一个指定canvas的绘画环境对象</li><li>beginPath：开始绘制</li><li>moveTo：移动画笔位置</li><li>lineTo：用来画线段</li><li>stroke：用来实施绘制的操作</li><li>lineStyle：设置线段的样式</li><li>closePath：结束绘制</li></ul><h3 id="4、web-worker有什么作用？应用场景有哪些？（新难）"><a href="#4、web-worker有什么作用？应用场景有哪些？（新难）" class="headerlink" title="4、web worker有什么作用？应用场景有哪些？（新难）"></a>4、web worker有什么作用？应用场景有哪些？（新难）</h3><p>开启一个子线程，且子线程的操作不受主线程的影响</p><ul><li>大数据处理</li><li>耗费时间较长的操作</li></ul><h3 id="5、浏览器本地缓存localStorage与sessionStorage的区别？"><a href="#5、浏览器本地缓存localStorage与sessionStorage的区别？" class="headerlink" title="5、浏览器本地缓存localStorage与sessionStorage的区别？"></a>5、浏览器本地缓存localStorage与sessionStorage的区别？</h3><ul><li>生命周期不同：前者一直存在浏览器，除非用户手动清除，后者生命周期结束于浏览器或者tab页的关闭</li></ul><h2 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a>CSS3</h2><h3 id="1、有哪些新特性呢？"><a href="#1、有哪些新特性呢？" class="headerlink" title="1、有哪些新特性呢？"></a>1、有哪些新特性呢？</h3><p>flex、animation、transform、border-radius、box-shadow、opacity</p><h3 id="2、背景毛玻璃的效果如何实现呢？"><a href="#2、背景毛玻璃的效果如何实现呢？" class="headerlink" title="2、背景毛玻璃的效果如何实现呢？"></a>2、背景毛玻璃的效果如何实现呢？</h3><p>filter：blur()</p><h3 id="3、position有哪几种呢？"><a href="#3、position有哪几种呢？" class="headerlink" title="3、position有哪几种呢？"></a>3、position有哪几种呢？</h3><ul><li>static：默认</li><li>relative：相对于自身</li><li>absolute：相对于最近的一个非static的祖先级元素进行定位</li><li>fixed：相对于屏幕窗口进行定位</li><li>sticky：用来实现吸顶效果</li></ul><h3 id="4、如何自己实现跟position：sticky的效果？"><a href="#4、如何自己实现跟position：sticky的效果？" class="headerlink" title="4、如何自己实现跟position：sticky的效果？"></a>4、如何自己实现跟position：sticky的效果？</h3><p>&#x2F;&#x2F;使用getBoundingClientRect或者IntersectionObserver计算指定元素位置，到达一定距离更改指定元素定位为fixed，从而实现sticky的效果</p><h3 id="5、重绘回流是什么呢？"><a href="#5、重绘回流是什么呢？" class="headerlink" title="5、重绘回流是什么呢？"></a>5、重绘回流是什么呢？</h3><p><a href="https://juejin.cn/post/6986416221323264030">文章链接</a></p><h3 id="6、怎么降低重绘回流的次数呢？"><a href="#6、怎么降低重绘回流的次数呢？" class="headerlink" title="6、怎么降低重绘回流的次数呢？"></a>6、怎么降低重绘回流的次数呢？</h3><p><a href="https://juejin.cn/post/6986416221323264030">文章链接</a></p><h3 id="7、flex布局如何更改主轴方向？"><a href="#7、flex布局如何更改主轴方向？" class="headerlink" title="7、flex布局如何更改主轴方向？"></a>7、flex布局如何更改主轴方向？</h3><p>设置flex-direction样式属性</p><h3 id="8、flex布局如何允许换行呢？"><a href="#8、flex布局如何允许换行呢？" class="headerlink" title="8、flex布局如何允许换行呢？"></a>8、flex布局如何允许换行呢？</h3><p>设置flex-wrap样式属性</p><h3 id="9、flex布局实现水平垂直据居中？"><a href="#9、flex布局实现水平垂直据居中？" class="headerlink" title="9、flex布局实现水平垂直据居中？"></a>9、flex布局实现水平垂直据居中？</h3><p>设置justify-content和align-items都为center</p><h3 id="10、flex：1的原理是什么呢？"><a href="#10、flex：1的原理是什么呢？" class="headerlink" title="10、flex：1的原理是什么呢？"></a>10、flex：1的原理是什么呢？</h3><p>flex-grow 、flex-shrink 、flex-basis这三个样式的合集，全写状态为flex:0 1 auto，简写为flex: 1</p><h3 id="11、rem与em的区别是什么呢？"><a href="#11、rem与em的区别是什么呢？" class="headerlink" title="11、rem与em的区别是什么呢？"></a>11、rem与em的区别是什么呢？</h3><ul><li>rem：相对于<html>标签的font-size去决定大小，例如html标签font-size为14px，则2rem &#x3D;&#x3D;&#x3D; 28px</li><li>em：相对于自身的font-size去决定大小，自身没有font-size则继承祖先级元素的font-size</li></ul><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="1、原型链是什么呢？有什么作用吗"><a href="#1、原型链是什么呢？有什么作用吗" class="headerlink" title="1、原型链是什么呢？有什么作用吗"></a>1、原型链是什么呢？有什么作用吗</h3><ul><li>原型链：原型链是一条对象隐式原型不断往上指向的一条指向链，尽头是Object的隐式原型，也就是null</li><li>作用：构造函数原型上的东西可以让实例们共享，从而节省了空间</li></ul><h3 id="2、闭包是什么？有什么优缺点"><a href="#2、闭包是什么？有什么优缺点" class="headerlink" title="2、闭包是什么？有什么优缺点(*************)"></a>2、闭包是什么？有什么优缺点(*************)</h3><p>闭包是一个能让函数外部访问到函数内部的一个函数</p><ul><li>优点是：延长函数内部变量的寿命，使函数外部能访问到函数内部</li><li>缺点是：滥用闭包导致内存溢出，页面卡顿</li></ul><h3 id="3、JavaScript总共有几种数据类型？"><a href="#3、JavaScript总共有几种数据类型？" class="headerlink" title="3、JavaScript总共有几种数据类型？"></a>3、JavaScript总共有几种数据类型？</h3><p>字符串、布尔值、数值、undefined、null、object、symbol、bigInt</p><h3 id="4、JavaScript判断类型的方式是什么？"><a href="#4、JavaScript判断类型的方式是什么？" class="headerlink" title="4、JavaScript判断类型的方式是什么？"></a>4、JavaScript判断类型的方式是什么？</h3><ul><li>typeof：只能判断 字符串、布尔值、数值、undefined、function、object、symbol、bigInt，不能区分判断 数组、null、对象</li><li>A instanceof B：判断A是否为B的实例对象，从而判断A是否为B类型</li><li>Object.prototype.toString.call()：可以判断所有的数据类型</li></ul><h3 id="6、JavaScript不同类型的存储方式有何区别？"><a href="#6、JavaScript不同类型的存储方式有何区别？" class="headerlink" title="6、JavaScript不同类型的存储方式有何区别？"></a>6、JavaScript不同类型的存储方式有何区别？</h3><p>普遍认为</p><ul><li>基础数据类型存于栈内存</li><li>引用数据类型存于堆内存<br>我认为</li><li>超过栈内存容量</li></ul><h3 id="7、你说字符串存储在栈内存，那如果字符串很长。超过了栈内存最大容量呢？"><a href="#7、你说字符串存储在栈内存，那如果字符串很长。超过了栈内存最大容量呢？" class="headerlink" title="7、你说字符串存储在栈内存，那如果字符串很长。超过了栈内存最大容量呢？"></a>7、你说字符串存储在栈内存，那如果字符串很长。超过了栈内存最大容量呢？</h3><p>所以说我觉得所有数据都存于堆内存，毕竟栈内存容量有限。</p><h3 id="8、call、apply、bind的区别？"><a href="#8、call、apply、bind的区别？" class="headerlink" title="8、call、apply、bind的区别？***********"></a>8、call、apply、bind的区别？***********</h3><ul><li>call于apply的区别在于传参，前者直接传参，后者传一个数组</li><li>bind传参后不立即执行，而是会返回一个函数，这个函数可以继续传参，且执行（bind函数可以分两次传参）</li></ul><h3 id="9、bind返回的函数能作为构造函数吗？"><a href="#9、bind返回的函数能作为构造函数吗？" class="headerlink" title="9、bind返回的函数能作为构造函数吗？***********"></a>9、bind返回的函数能作为构造函数吗？***********</h3><p>不能哦，会报错的</p><h3 id="10、赋值、深拷贝与浅拷贝有什么不同？"><a href="#10、赋值、深拷贝与浅拷贝有什么不同？" class="headerlink" title="10、赋值、深拷贝与浅拷贝有什么不同？"></a>10、赋值、深拷贝与浅拷贝有什么不同？</h3><ul><li>赋值：赋值指针指向，还是用的同一个内存空间</li><li>浅拷贝：只拷贝第一层</li><li>深拷贝：所有层都会进行拷贝</li></ul><h3 id="11、怎么判断一个对象有环引用呢？"><a href="#11、怎么判断一个对象有环引用呢？" class="headerlink" title="11、怎么判断一个对象有环引用呢？***********"></a>11、怎么判断一个对象有环引用呢？***********</h3><p>定义一个空数组，且对于目标对象进行递归，每次都判断递归项是否为对象，是的话放进数组，且每次判断属性值是否在数组里，在的话说明环引用了</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">cycleDetector</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>obj<span class="token punctuation">]</span>    <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">function</span> <span class="token function">cycle</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">of</span> keys<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> temp <span class="token operator">=</span> o<span class="token punctuation">[</span>key<span class="token punctuation">]</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> temp <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> temp <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    flag <span class="token operator">=</span> <span class="token boolean">true</span>                    <span class="token keyword">return</span>                <span class="token punctuation">&#125;</span>                arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span>                <span class="token function">cycle</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">cycle</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token keyword">return</span> flag<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><h3 id="1、let、const的暂时性死区问题？"><a href="#1、let、const的暂时性死区问题？" class="headerlink" title="1、let、const的暂时性死区问题？***********"></a>1、let、const的暂时性死区问题？***********</h3><p>在一个作用域里如果存在let、const定义的一个变量之前使用该变量，则报错“cannot access xx before initialization”</p><h3 id="2、Promise的then为什么可以链式调用？"><a href="#2、Promise的then为什么可以链式调用？" class="headerlink" title="2、Promise的then为什么可以链式调用？"></a>2、Promise的then为什么可以链式调用？</h3><p>Promise的then方法返回一个新的Promise对象，保证了then方法可以进行链式调用</p><h3 id="3、async-x2F-await的用法？"><a href="#3、async-x2F-await的用法？" class="headerlink" title="3、async&#x2F;await的用法？"></a>3、async&#x2F;await的用法？</h3><ul><li>async&#x2F;await的作用是：以同步的方式执行异步操作，实现排队效果</li><li>async：async函数执行返回一个Promise</li><li>await：await后接Promise则会等待Promise返回结果，接普通函数执行则会接收返回结果</li><li>await只能在async中使用，但是浏览器调试中await可单独使用</li></ul><h3 id="4、Class的静态属性、继承？"><a href="#4、Class的静态属性、继承？" class="headerlink" title="4、Class的静态属性、继承？"></a>4、Class的静态属性、继承？</h3><ul><li>静态属性：static关键字定义的变量属性，只能通过Class构造函数的属性的方式去访问</li><li>继承：使用 Child extends Father {}，且配合super对象，完成继承</li></ul><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><h3 id="1、Vue与React的区别在哪？"><a href="#1、Vue与React的区别在哪？" class="headerlink" title="1、Vue与React的区别在哪？"></a>1、Vue与React的区别在哪？</h3><p>比较的是Vue2<br>相同点：</p><ul><li>1.都使用了虚拟dom</li><li>2.组件化开发</li><li>3.都是单向数据流(数据改变，视图跟着改变，v-model是一个语法糖不是本质)</li><li>4.都支持服务端渲染<br>不同点：</li><li>1.React的JSX，Vue的template</li><li>2.数据变化，React手动(setState)，Vue自动(初始化已响应式处理，Object.defineProperty，Proxy)</li><li>3.React单向绑定，Vue双向绑定</li><li>4.React的Redux、mobx，Vue的Vuex、pinia</li></ul><h3 id="2、computed与watch的区别？"><a href="#2、computed与watch的区别？" class="headerlink" title="2、computed与watch的区别？"></a>2、computed与watch的区别？</h3><ul><li>computed：多对一，多个值的变化决定一个目标值的变化</li><li>watch：一对多，一个值的变化，引起多个目标值的变化</li></ul><h3 id="3、Vue的生命周期介绍一下？"><a href="#3、Vue的生命周期介绍一下？" class="headerlink" title="3、Vue的生命周期介绍一下？"></a>3、Vue的生命周期介绍一下？</h3><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/892fde0e56324868921d0e924c84858a~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="4、Vue的实例加载完成在哪个生命周期呢？"><a href="#4、Vue的实例加载完成在哪个生命周期呢？" class="headerlink" title="4、Vue的实例加载完成在哪个生命周期呢？"></a>4、Vue的实例加载完成在哪个生命周期呢？</h3><p>beforeCreated</p><h3 id="5、Vue的真实dom挂载完成在哪个生命周期呢？"><a href="#5、Vue的真实dom挂载完成在哪个生命周期呢？" class="headerlink" title="5、Vue的真实dom挂载完成在哪个生命周期呢？"></a>5、Vue的真实dom挂载完成在哪个生命周期呢？</h3><p>mounted</p><h3 id="6、数据更改如何获取最新DOM"><a href="#6、数据更改如何获取最新DOM" class="headerlink" title="6、数据更改如何获取最新DOM"></a>6、数据更改如何获取最新DOM</h3><p>nextTick</p><h3 id="7、路由有几种模式，有何区别？"><a href="#7、路由有几种模式，有何区别？" class="headerlink" title="7、路由有几种模式，有何区别？"></a>7、路由有几种模式，有何区别？</h3><ul><li>hash模式：监听url中hash的变化来实现不同页面的展示，链接带#</li><li>history模式：url中不带#，利用HTML5的history.pushState方法进行不刷新跳转页面，但需要后端配合404时的重定向</li><li>abstract：使用在非浏览器的环境，例如node环境</li></ul><h3 id="8、路由有哪些钩子函数？"><a href="#8、路由有哪些钩子函数？" class="headerlink" title="8、路由有哪些钩子函数？"></a>8、路由有哪些钩子函数？</h3><p>全局钩子</p><ul><li>beforeEach：跳转路由前<ul><li>to：将要跳转进入的路由对象</li><li>from：将要离开的路由对象</li><li>next：一个方法，执行则完成跳转</li></ul></li><li>afterEach：跳转路由后<ul><li>to：将要跳转进入的路由对象</li></ul></li></ul><p>路由独享钩子</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/xxx'</span><span class="token punctuation">,</span>    <span class="token literal-property property">component</span><span class="token operator">:</span> xxx<span class="token punctuation">,</span>    <span class="token function-variable function">beforeEnter</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>组件内路由钩子</p><ul><li>beforeRouteEnter(to, from, next)：跳转路由渲染组件时触发</li><li>beforeRouteUpdate(to, from, next)：跳转路由且组件被复用时触发 (传参不同时)</li><li>beforeRouteLeave(to, from, next)：跳转路由且离开组件时出触发</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 卷 </tag>
            
            <tag> html </tag>
            
            <tag> 总结 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ookie-localStorage-sessionStorage比较</title>
      <link href="/2022/12/23/note/html-css-zong-jie-cookie-localstorage-sessionstorage-bi-jiao/"/>
      <url>/2022/12/23/note/html-css-zong-jie-cookie-localstorage-sessionstorage-bi-jiao/</url>
      
        <content type="html"><![CDATA[<p><img src="https://qiniu.guet.link/asset/202212230004524.png"></p>]]></content>
      
      
      <categories>
          
          <category> html&amp;css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> session </tag>
            
            <tag> localStorage </tag>
            
            <tag> sessionStorage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js-a标签执行JavaScript的方法</title>
      <link href="/2022/12/22/note/js-zong-jie-a-biao-qian-zhi-xing-javascript-de-fang-fa/"/>
      <url>/2022/12/22/note/js-zong-jie-a-biao-qian-zhi-xing-javascript-de-fang-fa/</url>
      
        <content type="html"><![CDATA[<p>a链接执行javascript的方法</p><p>目的：禁止跳转，直接执行a链接绑定的函数</p><p>href&#x3D;”javascript:void(0);”，</p><p>其中javascript:是伪协议，它可以让我们通过一个链接来调用javascript函数.而采用这个方式 javascript:;可以实现A标签的点击事件运行时，如果页面内容很多，有滚动条时，页面不会乱跳，用户体验更好</p><p>void关键字是javascript当中非常重要的关键字，该操作符指定要计算或运行一个表达式，但是不返回值。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="1：直接执行"><a href="#1：直接执行" class="headerlink" title="1：直接执行"></a>1：直接执行</h2><p><a href="javascript:a()';">  &#x2F;&#x2F;直接执行函数a不推荐</p><h2 id="2：不跳转执行-推荐"><a href="#2：不跳转执行-推荐" class="headerlink" title="2：不跳转执行 推荐"></a>2：不跳转执行 推荐</h2><p><a href="javascript:void(0);" onclick='a()'>   &#x2F;&#x2F;不发生跳转直接执行函数a 推荐</p><h2 id="3：同上-推荐"><a href="#3：同上-推荐" class="headerlink" title="3：同上   推荐"></a>3：同上   推荐</h2><p><a href="javascript:;" onclick='a()'>       &#x2F;&#x2F;执行了一条空的js代码 推荐</p><h2 id="4：空的锚点"><a href="#4：空的锚点" class="headerlink" title="4：空的锚点"></a>4：空的锚点</h2><a href="#" onclick='a()'>   //#表示top用这种方法点击后网页后返回到页面的最顶端。<h2 id="5：同上，不返回到页面顶端-推荐"><a href="#5：同上，不返回到页面顶端-推荐" class="headerlink" title="5：同上，不返回到页面顶端  推荐"></a>5：同上，不返回到页面顶端  推荐</h2><p>&lt;a href&#x3D;”#” onclick&#x3D;’a()’ return false;&gt;    &#x2F;&#x2F;触发事件但不跳转  推荐</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简要分析观察者模式和发布订阅模式的区别</title>
      <link href="/2022/12/05/note/js-she-ji-mo-shi-guan-cha-zhe-mo-shi-yu-fa-bu-ding-yue-mo-shi/"/>
      <url>/2022/12/05/note/js-she-ji-mo-shi-guan-cha-zhe-mo-shi-yu-fa-bu-ding-yue-mo-shi/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 观察者设计模式</span><span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>observerList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">subscribe</span> <span class="token punctuation">(</span><span class="token parameter">observer</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>observerList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">notifyAll</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>observerList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">observe</span> <span class="token operator">=></span> <span class="token function">observe</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 发布订阅</span><span class="token keyword">class</span> <span class="token class-name">EventEmitter</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>eventChannel <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 消息中心</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// subscribe</span>  <span class="token function">on</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>eventChannel<span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>eventChannel<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>eventChannel<span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>callback<span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// publish</span>  <span class="token function">emit</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>eventChannel<span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>eventChannel<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">callback</span> <span class="token operator">=></span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// remove event</span>  <span class="token function">remove</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>eventChannel<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">.</span>eventChannel<span class="token punctuation">[</span>event<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// once event</span>  <span class="token function">once</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从代码中也能看出他们的区别，观察者模式不对事件进行分类，当有事件时，将通知所有观察者。发布-订阅设计模式对事件进行了分类，触发不同的事件，将通知不同的观察者。所以，可以认为后者就是前者的一个升级版，对通知事件做了更细粒度的划分。</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何快速的录制一个gif图</title>
      <link href="/2022/12/03/note/shu-mei-ru-he-kuai-su-de-lu-zhi-yi-ge-gif-tu/"/>
      <url>/2022/12/03/note/shu-mei-ru-he-kuai-su-de-lu-zhi-yi-ge-gif-tu/</url>
      
        <content type="html"><![CDATA[<p>有时候gif图用来作笔记更方便理解，记录一下制作gif的步骤。</p><p>第一步：使用QQ截图工具快速截取一个MP4</p><p>第二步：打开PS</p><p>第三步：导入视频帧到图层，选择一个视频范围</p><p>最后：导出，存储为(旧版)，gif</p><p><a href="https://jingyan.baidu.com/article/20095761d4c7618a0721b4e0.html">https://jingyan.baidu.com/article/20095761d4c7618a0721b4e0.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 数媒 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gif </tag>
            
            <tag> ps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大事件时页面如何设置成灰白模式</title>
      <link href="/2022/12/01/note/html-ye-mian-ru-he-qie-huan-hui-bai-mo-shi/"/>
      <url>/2022/12/01/note/html-ye-mian-ru-he-qie-huan-hui-bai-mo-shi/</url>
      
        <content type="html"><![CDATA[<p>或是为了对先人的缅怀，或是对同胞哀悼，我们的站点往往需要灰白背景特效。</p><p><img src="https://qiniu.guet.link/asset/202212020257376.png"></p><p>代码参考自哔哩哔哩，关键代码如下：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">grayscale</span><span class="token punctuation">(</span>85%<span class="token punctuation">)</span> <span class="token function">saturate</span><span class="token punctuation">(</span>80%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 使用filter添加灰度和饱和度 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>兼容：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">grayscale</span><span class="token punctuation">(</span>85%<span class="token punctuation">)</span> <span class="token function">saturate</span><span class="token punctuation">(</span>80%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">-webkit-filter</span><span class="token punctuation">:</span> <span class="token function">grayscale</span><span class="token punctuation">(</span>85%<span class="token punctuation">)</span> <span class="token function">saturate</span><span class="token punctuation">(</span>80%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">-moz-filter</span><span class="token punctuation">:</span> <span class="token function">grayscale</span><span class="token punctuation">(</span>85%<span class="token punctuation">)</span> <span class="token function">saturate</span><span class="token punctuation">(</span>80%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">-ms-filter</span><span class="token punctuation">:</span> <span class="token function">grayscale</span><span class="token punctuation">(</span>85%<span class="token punctuation">)</span> <span class="token function">saturate</span><span class="token punctuation">(</span>80%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">-o-filter</span><span class="token punctuation">:</span> <span class="token function">grayscale</span><span class="token punctuation">(</span>85%<span class="token punctuation">)</span> <span class="token function">saturate</span><span class="token punctuation">(</span>80%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">url</span><span class="token punctuation">(</span><span class="token property">data</span><span class="token punctuation">:</span>image/svg+xml<span class="token punctuation">;</span>utf8<span class="token punctuation">,</span>&lt;svg xmlns=<span class="token string">'http://www.w3.org/2000/svg'</span>>&lt;filter id=<span class="token string">'grayscale'</span>>&lt;feColorMatrix type=<span class="token string">'matrix'</span> values=<span class="token string">'0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0'</span>/>&lt;/filter>&lt;/svg>#grayscale<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">filter</span><span class="token punctuation">:</span> <span class="token property">progid</span><span class="token punctuation">:</span>DXImageTransform.Microsoft.<span class="token function">BasicImage</span><span class="token punctuation">(</span>grayscale=.85<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">-webkit-filter</span><span class="token punctuation">:</span> <span class="token function">grayscale</span><span class="token punctuation">(</span>.85<span class="token punctuation">)</span> <span class="token function">saturate</span><span class="token punctuation">(</span>.8<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> html&amp;css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> html </tag>
            
            <tag> filter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组扁平化总结</title>
      <link href="/2022/11/25/note/js-zong-jie-shu-zu-bian-ping-hua-zong-jie/"/>
      <url>/2022/11/25/note/js-zong-jie-shu-zu-bian-ping-hua-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>所谓扁平化就是将一个多维数组转变成一维数组,可用于单个接口多场景下的数据处理。</p><p>例如，某接口返回一个二维数组的category数据,0下标下是收入分类，1下标下是支出分类。这个数据在记账页面上可以直接用于收入和支出两个局部模块，但在列表页下需要将两个数据进行一个合并处理。这时就需要到扁平化的概念。</p><p>递归</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">flat</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//使用map遍历并拷贝响应结果</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//递归数组，达到降维的作用</span>        <span class="token keyword">return</span> <span class="token function">flat</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token comment">//返回普通元素，构成一维数组</span>        <span class="token keyword">return</span> item<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//result值因为递归的原因最高只有二维，那么使用...解构就能得到多个元素和一维数组；concant方法接收单个元素或数组，那么最后就能返回一个一维数组啦</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不使用concat进行扁平化：</p><p>concat是接收一个值或数组进行浅拷贝，那么我们再写一个能接收多个参数进行push的函数就行了</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @description 拷贝n个数组或value * @params &#123;*&#125; valArr n个数组或value **/</span><span class="token keyword">function</span> <span class="token function">pushVal</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>valArr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> res <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>val <span class="token keyword">of</span> valArr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token keyword">of</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然js在数组原型上实现了flat方法，所以平时的时候可以使用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span>infinite<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> 数组 </tag>
            
            <tag> 扁平化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Set对象</title>
      <link href="/2022/11/16/note/js-gai-nian-set-dui-xiang/"/>
      <url>/2022/11/16/note/js-gai-nian-set-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Map简介"><a href="#1-Map简介" class="headerlink" title="1. Map简介"></a>1. Map简介</h2><p>Set对象是值的集合，你可以按照插入的顺序迭代它的元素。Set 中的元素只会出现一次，即 Set 中的元素是唯一的。</p><h2 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> mySet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mySet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Set [ 1 ]</span>mySet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Set [ 1, 5 ]</span>mySet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Set [ 1, 5 ]</span>mySet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"some text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Set [ 1, 5, "一些文本" ]</span><span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>mySet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>mySet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// o 指向的是不同的对象，所以没问题</span>mySet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>mySet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>mySet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// true</span>mySet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>mySet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">"Some Text"</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>mySet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>mySet<span class="token punctuation">.</span>size<span class="token punctuation">;</span> <span class="token comment">// 5</span>mySet<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true，从 set 中移除 5</span>mySet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// false, 5 已经被移除</span>mySet<span class="token punctuation">.</span>size<span class="token punctuation">;</span> <span class="token comment">// 4，刚刚移除一个值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mySet<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// logs Set(4) [ 1, "一些文本", &#123;…&#125;, &#123;…&#125; ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-迭代"><a href="#3-迭代" class="headerlink" title="3. 迭代"></a>3. 迭代</h2><p>实现了迭代器</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 迭代整个 set</span><span class="token comment">// 按顺序输出：1, "一些文本", &#123;"a": 1, "b": 2&#125;, &#123;"a": 1, "b": 2&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> mySet<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 按顺序输出：1, "一些文本", &#123;"a": 1, "b": 2&#125;, &#123;"a": 1, "b": 2&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> mySet<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 按顺序输出：1, "一些文本", &#123;"a": 1, "b": 2&#125;, &#123;"a": 1, "b": 2&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> mySet<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 按顺序输出：1, "一些文本", &#123;"a": 1, "b": 2&#125;, &#123;"a": 1, "b": 2&#125;</span><span class="token comment">//(键与值相等)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> mySet<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-Set与数组"><a href="#4-Set与数组" class="headerlink" title="4. Set与数组"></a>4. Set与数组</h2><p>(1) 转换</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> myArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"value1"</span><span class="token punctuation">,</span> <span class="token string">"value2"</span><span class="token punctuation">,</span> <span class="token string">"value3"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 用 Set 构造器将 Array 转换为 Set</span><span class="token keyword">let</span> mySet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>myArray<span class="token punctuation">)</span><span class="token punctuation">;</span>mySet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns true</span><span class="token comment">// 用...(展开操作符) 操作符将 Set 转换为 Array</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>mySet<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//当myArray的value不同时,与 myArray 完全一致</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(2) 数组去重</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 用来去重数组中重复元素</span><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">// [2, 3, 4, 5, 6, 7, 32]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> Set </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云开发中导入excel/cvs文件乱码的原因，以及ANSI编码和带BOM的utf-8是什么</title>
      <link href="/2022/11/08/note/qian-duan-bian-cheng-bian-ma-yun-kai-fa-zhong-excel-cvs-wen-jian-dao-ru-luan-ma-de-yuan-yin-yi-ji-ansi-bian-ma-he-dai-bom-de-utf-8-shi-shi-me/"/>
      <url>/2022/11/08/note/qian-duan-bian-cheng-bian-ma-yun-kai-fa-zhong-excel-cvs-wen-jian-dao-ru-luan-ma-de-yuan-yin-yi-ji-ansi-bian-ma-he-dai-bom-de-utf-8-shi-shi-me/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><img src="https://qiniu.guet.link/asset/202211071715684.png"><br>在做项目的时候发现支付宝账单是ANSI编码；微信账单是带BOM的utf-8编码。<br>这两个账单都是CVS文件，但在读取的时候ANSI发生了乱码。记录一下解决过程。</p><h2 id="1-了解-ANSI-与-utf-8-with-BOM"><a href="#1-了解-ANSI-与-utf-8-with-BOM" class="headerlink" title="1. 了解 ANSI 与 utf-8 with BOM"></a>1. 了解 ANSI 与 utf-8 with BOM</h2><h3 id="（1）什么是-ANSI-编码？"><a href="#（1）什么是-ANSI-编码？" class="headerlink" title="（1）什么是 ANSI 编码？"></a>（1）什么是 ANSI 编码？</h3><p>不同的国家和地区制定了不同的标准，由此产生了 GB2312、GBK、GB18030、Big5、Shift_JIS 等各自的编码标准。<strong>这些使用多个字节来代表一个字符的各种汉字延伸编码方式，称为 ANSI 编码。</strong>在简体中文Windows操作系统中，ANSI 编码代表 GB2312编码；在繁体中文Windows操作系统中，ANSI编码代表Big5；在日文Windows操作系统中，ANSI 编码代表 JIS 编码。</p><h3 id="（2）什么是-带BOM的utf-8-编码？"><a href="#（2）什么是-带BOM的utf-8-编码？" class="headerlink" title="（2）什么是 带BOM的utf-8 编码？"></a>（2）什么是 带BOM的utf-8 编码？</h3><p>utf-8我们知道是基于UTF万国码的一种编码，那么BOM呢？</p><p>直接看wiki的定义：</p><p>字节顺序标记（英语：byte-order mark，BOM）是位于码点U+FEFF的统一码字符的名称。当以UTF-16或UTF-32来将UCS&#x2F;统一码字符所组成的字符串编码时，这个字符被用来标示其字节序。它常被用来当做标示文件是以UTF-8、UTF-16或UTF-32编码的标记。</p><p>字节顺序标记通常有几种涵义：</p><ol><li><p>在16位和32位的情况下，文字流的字节顺序。</p></li><li><p>表示文字流非常有可能是Unicode编码。</p></li><li><p>使用的是哪一种Unicode字符编码。</p></li></ol><p>每个Unicode编码（包括Unicode标准以外的编码，如UTF-7，见下表）的BOM字节序列都不一样，而且这些序列都不可能出现在以其他编码存储的文字流的开头。因此，在文字流的开头放置一个编码的BOM，可以表明文本是Unicode，并识别所使用的编码方案。这种对BOM字符的使用被称为“Unicode签名”。</p><h2 id="2-解决导入cvs乱码"><a href="#2-解决导入cvs乱码" class="headerlink" title="2.解决导入cvs乱码"></a>2.解决导入cvs乱码</h2><p>现在回过来看为什么导入的cvs会乱码</p><p>云存储在存储文件的时候是不会改变其文件编码的，而在云函数的 node 中，我使用的是 node-xlsx 来进行 excel 导入。从 node-xlsx 给出的例子来看，node-xlsx 是只接收 utf-8 文件的。那么，一个 ANSI （简中为GB2312）编码必然不能被 node-xlsx 解析，这就需要转成 utf-8 。</p><p>我们很自然的会想到用toString方法，再 Buffer.form 回去，但是 node 中这些方法都没有 GB2312 编码。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">switch</span><span class="token punctuation">(</span>encoding<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">case</span> <span class="token string">'hex'</span><span class="token operator">:</span>      <span class="token keyword">case</span> <span class="token string">'utf8'</span><span class="token operator">:</span>      <span class="token keyword">case</span> <span class="token string">'utf-8'</span><span class="token operator">:</span>      <span class="token keyword">case</span> <span class="token string">'ascii'</span><span class="token operator">:</span>      <span class="token keyword">case</span> <span class="token string">'binary'</span><span class="token operator">:</span>      <span class="token keyword">case</span> <span class="token string">'base64'</span><span class="token operator">:</span>      <span class="token keyword">case</span> <span class="token string">'ucs2'</span><span class="token operator">:</span>      <span class="token keyword">case</span> <span class="token string">'ucs-2'</span><span class="token operator">:</span>      <span class="token keyword">case</span> <span class="token string">'utf16le'</span><span class="token operator">:</span>      <span class="token keyword">case</span> <span class="token string">'utf-16le'</span><span class="token operator">:</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以我们需要另一个插件 iconv-lite 转换。 </p><p>核心代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//buffer根据原编码GB2312解码成字符串，不舍弃BOM</span><span class="token keyword">let</span> sourceString <span class="token operator">=</span> iconv<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>sourceBuffer<span class="token punctuation">,</span><span class="token string">"GB2312"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">stripBOM</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//字符串转码成utf-8的buffer，添加BOM</span><span class="token keyword">let</span> buff <span class="token operator">=</span> iconv<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>sourceString<span class="token punctuation">,</span><span class="token string">"utf8"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">addBOM</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>代码片段：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> cloud <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'wx-server-sdk'</span><span class="token punctuation">)</span><span class="token keyword">const</span> xlsx <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'node-xlsx'</span><span class="token punctuation">)</span><span class="token keyword">const</span> iconv <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'iconv-lite'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cloud<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token comment">// 初始化云开发环境</span>    <span class="token literal-property property">env</span><span class="token operator">:</span> cloud<span class="token punctuation">.</span><span class="token constant">DYNAMIC_CURRENT_ENV</span> <span class="token comment">// 当前环境的常量</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 云函数入口函数</span>exports<span class="token punctuation">.</span><span class="token function-variable function">main</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> fileID <span class="token punctuation">&#125;</span> <span class="token operator">=</span> event<span class="token punctuation">;</span>    <span class="token comment">// 下载文件</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> cloud<span class="token punctuation">.</span><span class="token function">downloadFile</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> fileID <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> sourceBuffer <span class="token operator">=</span> res<span class="token punctuation">.</span>fileContent<span class="token punctuation">;</span>        <span class="token comment">//buffer根据原编码GB2312解码成字符串，不舍弃BOM</span>    <span class="token keyword">let</span> sourceString <span class="token operator">=</span> iconv<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>sourceBuffer<span class="token punctuation">,</span><span class="token string">"GB2312"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">stripBOM</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">//字符串转码成utf-8的buffer，添加BOM</span>    <span class="token keyword">let</span> buff <span class="token operator">=</span> iconv<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>sourceString<span class="token punctuation">,</span><span class="token string">"utf8"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">addBOM</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//开始解析</span>    <span class="token keyword">let</span> sheet <span class="token operator">=</span> xlsx<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">cellDates</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sheet<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至于为什么需要BOM，其实即使不使用BOM，字符串的输出也没有乱码了，但是excel插件没有BOM，解析不行。大胆推测一下，插件需要BOM来正确的解析excel。</p><h2 id="3-注意"><a href="#3-注意" class="headerlink" title="3. 注意"></a>3. 注意</h2><p>我看网上很多人的代码在字符串已经出现乱码的情况下，还要进行转码，这就非常离谱了，你把乱码转成另外一种编码有什么用呢？解码出来不还是乱码吗？这完全是对编码解码与buffer之间关系的不理解。</p><h2 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h2><p><a href="https://zh.wikipedia.org/wiki/%E4%BD%8D%E5%85%83%E7%B5%84%E9%A0%86%E5%BA%8F%E8%A8%98%E8%99%9F">https://zh.wikipedia.org/wiki/%E4%BD%8D%E5%85%83%E7%B5%84%E9%A0%86%E5%BA%8F%E8%A8%98%E8%99%9F</a></p><p><a href="https://gitee.com/mihome/iconv-lite#bom-handling">https://gitee.com/mihome/iconv-lite#bom-handling</a></p><p><a href="https://github.com/mgcrea/node-xlsx">https://github.com/mgcrea/node-xlsx</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> utf-8 </tag>
            
            <tag> 编码 </tag>
            
            <tag> 解码 </tag>
            
            <tag> BOM </tag>
            
            <tag> ANSI </tag>
            
            <tag> 微信小程序 </tag>
            
            <tag> 云开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buffer对象学习</title>
      <link href="/2022/11/07/note/node-buffer-dui-xiang-xue-xi/"/>
      <url>/2022/11/07/note/node-buffer-dui-xiang-xue-xi/</url>
      
        <content type="html"><![CDATA[<ul><li><p>node中Buffer是一个类数组对象（我们可以像操作数组那样操作buffer），存储二进制，但是在显示时都是以16进制的形式显示(二进制显示的太长了，不方便显示)。</p></li><li><p>在前端我们用String对象完全足够操作文本，但是在后端不一样，我们需要处理一些大文件，这是二进制的，这就需要Buffer。</p></li><li><p>数组中不能存储二进制的文件，而buffer就是专门用来存储二进制数据</p></li><li><p>在js基本数据类型不可变，要更改必须新建，但是buffer可以直接操作源文件。</p></li><li><p>使用buffer不需要引入模块，直接使用即可</p></li></ul><h2 id="1-常用Buffer方法："><a href="#1-常用Buffer方法：" class="headerlink" title="1. 常用Buffer方法："></a>1. 常用Buffer方法：</h2><p>创建一个buffer</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param &#123;Number&#125; size 长度 必选 * @param &#123;String&#125; fill 填充到缓冲区的值 可选 * @param &#123;String&#125; encoding fill的编码格式，如果fill的值是一个字符串，默认值为utf-8 可选 * @return &#123;Buffer&#125; * */</span>Buffer<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>fill<span class="token punctuation">,</span>encoding<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//例1：</span><span class="token keyword">const</span> buffer <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token comment">//&lt;Buffer 00 00 00 00 00> 因为没有fill任何值</span><span class="token comment">//例2：</span>buffer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//...略，如果超出5字节将被忽略</span><span class="token comment">/** * @param &#123;Number&#125; encoding  转换成字符串后的字符编码，默认为 ‘utf8′ * @param &#123;String&#125; start     buffer 转换的起始位置，默认为 0 * @param &#123;String&#125; end       buffer 转换的结束位置，默认为buffer长度 * @return &#123;Stirng&#125; * */</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//转成字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(2) Buffer.from</p><p>将一个字符串转为buffer，这个方法接收</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param &#123;String&#125; string 字符串 必选 * @param &#123;String&#125; encoding 编码格式 可选，默认utf8  * @return &#123;Buffer&#125; * */</span>Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span>encoding<span class="token punctuation">)</span><span class="token comment">//例：</span><span class="token keyword">const</span> buffer <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-类数组对象"><a href="#2-类数组对象" class="headerlink" title="2. 类数组对象"></a>2. 类数组对象</h2><p>buffer是一个类数组对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//长度</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buffer<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取</span>buffer<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">72</span><span class="token punctuation">;</span> <span class="token comment">//赋值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//Hello 因为72对应Unicode码点 H</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>遍历</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> buffer<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>slice</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//会生成一个新的buffer对象</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>toString<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="3-应用"><a href="#3-应用" class="headerlink" title="3. 应用"></a>3. 应用</h2><p>buffer在node中的应用非常广泛，比如，我们使用 fs模块读取文件的时候</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">"./a.txt"</span><span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token keyword">return</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>Buffer就是一个用来存储视频、音频、大文件等的二进制类数组对象。</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buffer </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序canvas层级太高遮挡弹出页面</title>
      <link href="/2022/11/03/note/xiang-mu-wei-xin-xiao-cheng-xu-canvas-ceng-ji-tai-gao-zhe-dang-dan-chu-ye-mian/"/>
      <url>/2022/11/03/note/xiang-mu-wei-xin-xiao-cheng-xu-canvas-ceng-ji-tai-gao-zhe-dang-dan-chu-ye-mian/</url>
      
        <content type="html"><![CDATA[<p>使用ec-canvas圆饼图底下有个下拉弹窗被遮挡了</p><p><img src="https://qiniu.guet.link/asset/202211031755293.png"></p><p>找到的答案是ec-canvas属于原生组件</p><p><a href="https://developers.weixin.qq.com/community/develop/doc/0008a259578c50d02f3c3076d5ac00?_at=1667469060895">https://developers.weixin.qq.com/community/develop/doc/0008a259578c50d02f3c3076d5ac00?_at=1667469060895</a></p><p><img src="https://qiniu.guet.link/asset/202211031756000.png"></p><p>这是说canvas 可以cover-view挡住</p><p><a href="https://developers.weixin.qq.com/community/develop/doc/00064a1b31c6d0b6e90d11c1b51000?_at=1667469060895">https://developers.weixin.qq.com/community/develop/doc/00064a1b31c6d0b6e90d11c1b51000?_at=1667469060895</a></p><p><strong>需要注意的是，微信开发者工具的模拟器无论什么时候都被canvas遮挡，所以需要多上实机看看。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信开发与云函数开发注意事项</title>
      <link href="/2022/11/01/note/wei-xin-xiao-cheng-xu-wei-xin-kai-fa-yu-yun-han-shu-kai-fa-zhu-yi-shi-xiang/"/>
      <url>/2022/11/01/note/wei-xin-xiao-cheng-xu-wei-xin-kai-fa-yu-yun-han-shu-kai-fa-zhu-yi-shi-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="1-为什么使用云函数？"><a href="#1-为什么使用云函数？" class="headerlink" title="1. 为什么使用云函数？"></a>1. 为什么使用云函数？</h2><p><img src="https://qiniu.guet.link/asset/202211022145867.png"></p><p>云函数的传入参数有两个，一个是 event 对象，一个是 context 对象。 event指的是触发云函数的事件，当小程序端调用云函数时，</p><ul><li>event 就是小程序端调用云函数时传入的参数，外加后端自动注入的小程序用户的 openid 和小程序的 appid。</li><li>context 对象包含了此处调用的调用信息和运行状态，可以用它来了解服务运行的情况。在模板中也默认 require 了 wx-server-sdk，</li><li>wx-server-sdk这是一个帮助我们在云函数中操作数据库、存储以及调用其他云函数的微信提供的库</li></ul><h2 id="2-设置数据的时候不能设置undefined-否则并不会存入数据库"><a href="#2-设置数据的时候不能设置undefined-否则并不会存入数据库" class="headerlink" title="2. 设置数据的时候不能设置undefined,否则并不会存入数据库"></a>2. 设置数据的时候不能设置undefined,否则并不会存入数据库</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">oneOpacityTimeoutId</span><span class="token operator">:</span><span class="token keyword">undefined</span><span class="token comment">//可以设置成null</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3-云函数添加为数组时是插入多条"><a href="#3-云函数添加为数组时是插入多条" class="headerlink" title="3. 云函数添加为数组时是插入多条"></a>3. 云函数添加为数组时是插入多条</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">'text'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        data：array<span class="token comment">//可以是数组也可以是对象，数组是多条，对象是一条</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-云函数获取openid一定时间内有限制"><a href="#4-云函数获取openid一定时间内有限制" class="headerlink" title="4. 云函数获取openid一定时间内有限制"></a>4. 云函数获取openid一定时间内有限制</h2><p>在短时间的只能调用7到12次 之后拿不到 环境是开发工具 线上部署没确认 未找到官方说明 已经关注开发者社区相关问题</p><p>目前的方法是，先全局获取一次openid缓存起来避免频繁获取</p><h2 id="5-云开发的限制有点多"><a href="#5-云开发的限制有点多" class="headerlink" title="5. 云开发的限制有点多"></a>5. 云开发的限制有点多</h2><p><img src="https://qiniu.guet.link/asset/202211100535902.png"></p><p><img src="https://qiniu.guet.link/asset/202211100602715.png"></p><h2 id="6-数据库查询有限制"><a href="#6-数据库查询有限制" class="headerlink" title="6. 数据库查询有限制"></a>6. 数据库查询有限制</h2><p>数据库查询每条限制20，云函数查询每条限制100，利用limit规避也有限制1000</p><p><a href="https://developers.weixin.qq.com/community/develop/doc/000826392c4a88c7aa0a1fedb5b400">https://developers.weixin.qq.com/community/develop/doc/000826392c4a88c7aa0a1fedb5b400</a></p><h2 id="7-云函数默认使用中时区"><a href="#7-云函数默认使用中时区" class="headerlink" title="7. 云函数默认使用中时区"></a>7. 云函数默认使用中时区</h2><p>和很多第三方服务一样，需要手动切换成东八区，否则插入数据库的时间不对。如下配置：</p><p>需要在上传的云函数中设置</p><p><img src="https://qiniu.guet.link/asset/202211171754978.jpg"></p><p><img src="https://qiniu.guet.link/asset/202211171808673.png"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//main下 此方法仅在本地有效</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">TZ</span> <span class="token operator">=</span> <span class="token string">'Asia/Shanghai'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/functions/notice.html">https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/functions/notice.html</a></p><h2 id="8-设置超时时间"><a href="#8-设置超时时间" class="headerlink" title="8. 设置超时时间"></a>8. 设置超时时间</h2><p>和第七点一样可能需要配置的还有请求超时时间，默认时间为1s，可以根据情况为每个云函数进行配置。</p><h2 id="9-报错信息不正常"><a href="#9-报错信息不正常" class="headerlink" title="9. 报错信息不正常"></a>9. 报错信息不正常</h2><p>云函数的报错信息可能不正确。例如1s的超时时间，它会提示超时3s，这可能会迷惑到开发者，需要开发者多核验代码多提交工单询问。</p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
            <tag> 云开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将数组中的零移到最后</title>
      <link href="/2022/11/01/note/suan-fa-jiang-shu-zu-zhong-de-ling-yi-dao-zui-hou/"/>
      <url>/2022/11/01/note/suan-fa-jiang-shu-zu-zhong-de-ling-yi-dao-zui-hou/</url>
      
        <content type="html"><![CDATA[<p>问题描述：将数组中的零移到最后位，且其它数相对位置不变。要求不能新建数组。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//输入</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token comment">//输出</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法一：移除填补法"><a href="#方法一：移除填补法" class="headerlink" title="方法一：移除填补法"></a>方法一：移除填补法</h2><p>遍历发现0移除并填补到最后位置。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">zeroMoveLast</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> count <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span>count<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            i<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//避免数组塌陷带来的遍历不完全</span>            count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//避免移除后面填补的0</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">zeroMoveLast</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法二：类冒泡交换法"><a href="#方法二：类冒泡交换法" class="headerlink" title="方法二：类冒泡交换法"></a>方法二：类冒泡交换法</h2><p>此方法不使用api，性能最优</p><p>设置一个index记录0的个数， <strong>当遍历0的个数不为0 且 下标到非0元素时，这时是可交换的。此时用下标 减去0的个数 就等于最前面0的下标</strong>（应该好理解吧），那么将他们两两交换，就可以让非0冒泡向前。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> i项为<span class="token number">0</span>，不交换，index<span class="token operator">++</span>，此时i<span class="token operator">=</span><span class="token number">0</span> index<span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> i项为<span class="token number">0</span>，不交换，index<span class="token operator">++</span>，此时i<span class="token operator">=</span><span class="token number">1</span> index<span class="token operator">=</span><span class="token number">2</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> i项不为<span class="token number">0</span>，交换，此时i<span class="token operator">=</span><span class="token number">2</span> index<span class="token operator">=</span><span class="token number">2</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">zeroMoveLast</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//将0统计</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span><span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             index<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment">//项不为0 且 已统计0数量不等于0的时候 进行交换</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//</span>            arr<span class="token punctuation">[</span>i <span class="token operator">-</span> index<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">zeroMoveLast</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写一个Promise.all</title>
      <link href="/2022/10/29/note/js-mian-shi-shou-xie-yi-ge-promise-all/"/>
      <url>/2022/10/29/note/js-mian-shi-shou-xie-yi-ge-promise-all/</url>
      
        <content type="html"><![CDATA[<p>首先看Promise.all的定义</p><blockquote><p>Promise.all(iterable)方法返回一个 Promise 实例，此实例在 iterable 参数内所有的 promise 都“完成（resolved）”或参数中不包含 promise 时回调完成（resolve）；如果参数中  promise 有一个失败（rejected），此实例回调失败（reject），失败原因的是第一个失败 promise 的结果。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">all</span><span class="token punctuation">(</span><span class="token parameter">promiseArr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//记录promise完成数</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//记录promise结果</span>    <span class="token comment">//all方法返回的是一个promise</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    promiseArr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p<span class="token punctuation">,</span>i</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token comment">//让非promise也能返回</span>        Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>            <span class="token comment">//保存每项结果到每项</span>            result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>res<span class="token punctuation">;</span>            <span class="token comment">//全部完成返回结果</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">++</span>index <span class="token operator">===</span> promiseArr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>            <span class="token comment">//有一个promise发生错误立即返回</span>            <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//测试</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"successA"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"successB"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"successC"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token function">all</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"全部成功"</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"有个失败了"</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise_async_await_Generator实现原理解析（坑）</title>
      <link href="/2022/10/29/note/js-gai-nian-promise-async-await-generator-shi-xian-yuan-li-jie-xi-keng/"/>
      <url>/2022/10/29/note/js-gai-nian-promise-async-await-generator-shi-xian-yuan-li-jie-xi-keng/</url>
      
        <content type="html"><![CDATA[<p>这是一个坑，待填</p><p><a href="https://juejin.cn/post/6844904096525189128#heading-10">https://juejin.cn/post/6844904096525189128#heading-10</a></p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写promise核心</title>
      <link href="/2022/10/25/note/js-mian-shi-shou-xie-promise-he-xin/"/>
      <url>/2022/10/25/note/js-mian-shi-shou-xie-promise-he-xin/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// promise的核心部分用到观察者模式(收集依赖 -> 触发通知 -> 取出依赖执行 的方式)</span><span class="token comment">// 在下方有频繁提及</span><span class="token keyword">class</span> <span class="token class-name">MyPromise</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//先设置三种状态</span>    <span class="token keyword">static</span> <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token string">"等待中"</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token constant">FULFILED</span> <span class="token operator">=</span> <span class="token string">"接受"</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token constant">REJECTED</span> <span class="token operator">=</span> <span class="token string">"拒绝"</span><span class="token punctuation">;</span>    <span class="token comment">//构造函数接收一个函数</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//为实例设置状态和结果</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> MyPromise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment">//保存then中的函数 一个promise可能有多个then let p = new Promise() p.then p.then()</span>        <span class="token comment">//promise是为了解决回调地域出现的，所以这也是promise的核心部分，利用回调实现异步的链式调用。</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>resolvedCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>rejectedCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//因为this.resolve this.reject 是实例化后才调用的，属于默认调用，要绑定实例this，避免resolve方法中的this出错</span>        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//promise.then要设置成异步 避免阻塞第三步和第四步代码</span>        <span class="token comment">//使用settimeout将更改为异步 （当然也可以MutationObserver模拟微任务）</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">!==</span> MyPromise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>   <span class="token comment">// 对应规范中的"状态只能由pending到fulfilled或rejected" 也就是说不能resolve了又reject</span>            <span class="token comment">//判断状态是否是等待中，避免fullfiled又rejected</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> MyPromise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> MyPromise<span class="token punctuation">.</span><span class="token constant">FULFILED</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> val<span class="token punctuation">;</span>                <span class="token comment">//检是否有then放入的resolved函数</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>resolvedCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//同理</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">!==</span> MyPromise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token comment">// 对应规范中的"状态只能由pending到fulfilled或rejected" 也就是说不能resolve了又reject</span>            <span class="token comment">//判断状态是否是等待中，避免fullfiled又rejected</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> MyPromise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> MyPromise<span class="token punctuation">.</span><span class="token constant">REJECTED</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> val<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>rejectedCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">//then类方法接收两个参数</span>    <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onFULFILLED<span class="token punctuation">,</span> onREJECTED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//链式返回promise 由于是箭头函数 所以里面this不会出错</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token comment">//这里是定义一个函数用于对promise和普通值返回 区分</span>            <span class="token keyword">const</span> <span class="token function-variable function">fulfilledFn</span> <span class="token operator">=</span> <span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//执行第一个(当前的)Promise的成功回调,并获取返回值</span>                    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onFULFILLED</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>                    <span class="token comment">//分类讨论返回值,如果是Promise,那么等待Promise状态变更,否则直接resolve</span>                    <span class="token comment">//这里resolve之后，就能被下一个.then()的回调获取到返回值，从而实现链式调用</span>                    x <span class="token keyword">instanceof</span> <span class="token class-name">MyPromise</span> <span class="token operator">?</span> x<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//同理</span>            <span class="token keyword">const</span> <span class="token function-variable function">rejectedFn</span> <span class="token operator">=</span> <span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onREJECTED</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>                    x <span class="token keyword">instanceof</span> <span class="token class-name">MyPromise</span> <span class="token operator">?</span> x<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//这里的代码先于resolve函数，那么status是pendding</span>            <span class="token comment">//所以要将这个函数保存起来，让resolve回调完后调用</span>            <span class="token comment">//这里和resolvedCallbacks对应，是promise核心精华</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> MyPromise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// //发布订阅</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>resolvedCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fulfilledFn<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>rejectedCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>rejectedFn<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//在then之前 promise状态已经改变 兼容以后promise.resolve().then()</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> MyPromise<span class="token punctuation">.</span><span class="token constant">FULFILED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">fulfilledFn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//同理</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> MyPromise<span class="token punctuation">.</span><span class="token constant">REJECTED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">rejectedFn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reject<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//代码执行步骤自测 严格按照步骤执行顺序来</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"第一步"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> mp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"第二步"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"吃饭"</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"第四步"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1500</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//then是异步方法，应该最后输出</span>mp<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"最后一步："</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>    <span class="token comment">//为新promise 提供值</span>    <span class="token comment">// return res;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"第三步"</span><span class="token punctuation">)</span><span class="token comment">//代码自测</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"第一步"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> mp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"第二步"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"吃饭"</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"第四步"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1500</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//then是异步方法，应该最后输出</span>mp<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"最后一步："</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>    <span class="token comment">//为新promise 提供值</span>    <span class="token comment">// return res;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"第三步"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数柯里化概念（curry）</title>
      <link href="/2022/10/22/note/js-mian-shi-han-shu-ke-li-hua-curry-dai-xu/"/>
      <url>/2022/10/22/note/js-mian-shi-han-shu-ke-li-hua-curry-dai-xu/</url>
      
        <content type="html"><![CDATA[<p>柯里化就是将上面的函数拆分成两个函数，每个函数都只接受一个参数。使用闭包。</p><p>柯里化是以数学家、逻辑学家Haskell Brooks Curry的名字命名的，与咖喱无关。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">add</span> <span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 或者采用箭头函数写法</span><span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token parameter">x</span> <span class="token operator">=></span> <span class="token parameter">y</span> <span class="token operator">=></span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> 柯里化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何定义一个拥有n个参数的函数，rest参数</title>
      <link href="/2022/10/10/note/js-gai-nian-ru-he-ding-yi-yi-ge-yong-you-n-ge-can-shu-de-han-shu-rest-can-shu/"/>
      <url>/2022/10/10/note/js-gai-nian-ru-he-ding-yi-yi-ge-yong-you-n-ge-can-shu-de-han-shu-rest-can-shu/</url>
      
        <content type="html"><![CDATA[<p>bind方法为例：</p><p>rest参数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">bind</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//args将接受多个参数形成一个数组</span>    <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">,</span> <span class="token operator">...</span>props<span class="token punctuation">)</span><span class="token comment">//这里args又将数组进行了解构形成了多个参数</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>即时你不定义形参，js本身也支持传输0-n个参数，支持使用arguments类数组对象获取实参。但有时候我们需要对部分参数进行特别使用可以使用如上拓展运算符写法。</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-VueRouter-next</title>
      <link href="/2022/09/26/note/vue-vuerouter-next/"/>
      <url>/2022/09/26/note/vue-vuerouter-next/</url>
      
        <content type="html"><![CDATA[<p>next(): 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是 confirmed (确认的)。</p><p>next(false): 中断当前的导航。如果浏览器的 URL 改变了 (可能是用户手动或者浏览器后退按钮)，那么 URL 地址会重置到 from 路由对应的地址。</p><p>next(‘&#x2F;‘) 或者 next({ path: ‘&#x2F;‘ }): 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。你可以向 next 传递任意位置对象，且允许设置诸如 replace: true、name: ‘home’ 之类的选项以及任何用在 router-link 的 to prop 或 router.push 中的选项。</p><p>next(error): (2.4.0+) 如果传入 next 的参数是一个 Error 实例，则导航会被终止且该错误会被传递给 router.onError() 注册过的回调。</p><blockquote><p>当一个导航触发时，全局前置守卫按照创建顺序调用。守卫是异步解析执行，此时导航在所有守卫 resolve 完之前一直处于 等待中。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> vue </tag>
            
            <tag> vue-router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“你需要来自xxx的权限”解决办法</title>
      <link href="/2022/09/26/note/windows-wen-jian-shan-chu-ni-xu-yao-lai-zi-xxx-de-quan-xian-jie-jue-ban-fa/"/>
      <url>/2022/09/26/note/windows-wen-jian-shan-chu-ni-xu-yao-lai-zi-xxx-de-quan-xian-jie-jue-ban-fa/</url>
      
        <content type="html"><![CDATA[<p>很多时候我们已经使用了文件所有者账号或超级管理员账号登录windows，删除某些文件依然提示无权限。原因可能并不是真的没有权限，而是被其它程序所占用着，例如使用了微信开发者工具打开项目，删除云函数的时候也会出“你需要来自xxx的权限”，而关闭了项目就可以。那么，有没有一个通用的办法呢？</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><h3 id="1-命令删除"><a href="#1-命令删除" class="headerlink" title="1. 命令删除"></a>1. 命令删除</h3><p>通用的办法。</p><p>文件夹》进入待删除文件目录》url输入命令“cmd”》</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 删除目录</span><span class="token function">rmdir</span> /s 待删除目录名<span class="token comment">## rmdir 删除整个目录 </span><span class="token comment">## /s 是代表删除所有子目录跟其中的档案。</span><span class="token comment"># 删除文件</span>del 待删除文件名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>》是否确认(Y&#x2F;N)?》y</p><p>注意：</p><ul><li>此操作将会永久删除文件，没有回收站，需要谨慎。</li><li>而且git无法监听rmdir的删除</li></ul><h3 id="2-结束占用进程"><a href="#2-结束占用进程" class="headerlink" title="2. 结束占用进程"></a>2. 结束占用进程</h3><p>保险办法。</p><p>资源监视器》关联的句柄》搜索》输入待删除文件的绝对路径》结束进程》重新尝试删除</p><p>注意：</p><ul><li>占用资源的进程可能是系统核心进程，如果结束掉了这些进程会造成白屏黑屏等问题。</li></ul>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/09/24/note/readme/"/>
      <url>/2022/09/24/note/readme/</url>
      
        <content type="html"><![CDATA[<h1 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h1><p>这是一个笔记本，有自己的git repository，文件一般都发布到hexo博客，并且与git repository上的example相关联。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/09/23/note/yun-wei-linux-chang-yong-ming-ling-he-ji-dai-xu/"/>
      <url>/2022/09/23/note/yun-wei-linux-chang-yong-ming-ling-he-ji-dai-xu/</url>
      
        <content type="html"><![CDATA[<p>杀进程</p><p>如： 通过”netstat -anp | grep 端口号或其它信息”</p><p>有显示： tcp 0 127.0.0.1:2121 0.0.0.0:* LISTEN 7546&#x2F;ssh</p><p>则： “kill -9 7546（PID）”</p><p>作为一名开发人员，不可避免的与服务器打交道，以下是我整理的一些linux常用命令:</p><h1 id="添加一个名为-git-的用户"><a href="#添加一个名为-git-的用户" class="headerlink" title="添加一个名为 git 的用户"></a>添加一个名为 git 的用户</h1><p>linux 用户名建议符合[a-z_][a-z0-9_-]*[$]正则表达式，并且长度不超过 32 位</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adduser userName<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="设置-git-用户的密码"><a href="#设置-git-用户的密码" class="headerlink" title="设置 git 用户的密码"></a>设置 git 用户的密码</h1><p>passwd git<br>复制代码<br>但是由于创建的用户权限较低，有的时候我们需要为用户提权，此时我们可以这样做：</p><h1 id="会打开-sudoers-配置文件"><a href="#会打开-sudoers-配置文件" class="headerlink" title="会打开 sudoers 配置文件"></a>会打开 sudoers 配置文件</h1><p>sudo visudo<br>复制代码<br>注意同样是编辑 sudoers 配置文件，使用这个命令会比使用 sudo vim &#x2F;etc&#x2F; sudoers 更安全， 除了对语法有校验，并且还会在多用户编辑的时候锁住文件。<br>打开 sudoers 配置文件后，我们添加这样一行配置：</p><h1 id="Allow-git-to-run-any-commands-anywhere"><a href="#Allow-git-to-run-any-commands-anywhere" class="headerlink" title="Allow git to run any commands anywhere"></a>Allow git to run any commands anywhere</h1><p>git ALL&#x3D;(ALL:ALL) ALL<br>复制代码<br>简单解释下这句话 git ALL&#x3D;(ALL:ALL) ALL ：</p><p>git 表示规则应用的用户名<br>第一个 ALL 表示规则应用于所有 hosts<br>第二个 ALL 表示规则应用于所有 users<br>第三个 ALL 表示规则应用于所有 groups<br>第四个 ALL 表示规则应用于所有 commands</p><p>我们保存退出后，git 用户就会获得 root 权限。<br>2. ls 列出文件和目录</p><p>ls 列出文件和目录</p><p>[root@iZ2ze learn-typescript.git]# ls<br>branches  config  description  HEAD  hooks  index  info  objects  refs<br>复制代码</p><p>ls -la 由 -a 显示所有文件和目录（包括隐藏）和 -l 显示详细列表组成：</p><p>[root@iZ2ze learn-typescript.git]# ls -la<br>总用量 20</p><p>drwxrwxr-x  7 git git  132 12月 15 12:33 .<br>drwx——  3 git git  127 12月 15 14:51 ..<br>drwxrwxr-x  2 git git    6 12月 15 12:21 branches<br>-rw-rw-r–  1 git git   66 12月 15 12:21 config<br>-rw-rw-r–  1 git git   73 12月 15 12:21 description<br>-rw-rw-r–  1 git git   23 12月 15 12:21 HEAD<br>drwxrwxr-x  2 git git 4096 12月 15 13:10 hooks<br>-rw-rw-r–  1 git git  217 12月 15 12:33 index<br>drwxrwxr-x  2 git git   21 12月 15 12:21 info<br>drwxrwxr-x 10 git git   90 12月 15 12:33 objects<br>drwxrwxr-x  4 git git   31 12月 15 12:21 refs<br>复制代码<br>每一行都有 7 列，我们以 branches 为例讲解每列的含义：</p><p>drwxrwxr-x2gitgit612月 15 12:21branches文件类型和权限信息链接数或者一级子目录数所有者所属组文件大小，单位字节最后修改时间文件名​<br>重点看第 1 列的内容，以 drwxrwxr-x 为例，这里一共 10 位，第 1 位表示文件类型，其中 - 表示普通文件，d 表示目录文件。<br>第 2 到第 4 位，表示所有者权限，其中 r 表示读权限，w 表示写权限，x 表示可执行权限， -表示无权限，第 2 到 5 位为 rwx，表示所有者可读可写可执行。<br>第 5 到第 7 位，表示组用户权限，这里也是 rwx。<br>第 8 到第 10 位，表示其他用户权限，这里是 r-x，表示有可读可执行权限，无写入权限。<br>这里再额外补充一点：<br>像 root 用户创建文件夹的默认权限为 rwxr-xr-x:<br>[root@iZ2ze www]# mkdir test<br>[root@iZ2ze www]# ls -l</p><p>drwxr-xr-x  2 root root  6 12月 17 23:53 test<br>复制代码<br>而创建文件的默认权限是 rw-r–r–，注意创建文件默认会去掉 x 权限：<br>[root@iZ2ze www]# touch index.html<br>[root@iZ2ze www]# ls -l</p><p>-rw-r–r–  1 root root  0 12月 17 23:54 index.html<br>复制代码<br>这就是为什么我们有的时候需要在创建文件后，又加上执行权限。<br>3. chown 更改文件属主，也可以同时更改文件属组<br>chown (change owner) 语法：</p><h1 id="R：递归更改文件属组"><a href="#R：递归更改文件属组" class="headerlink" title="-R：递归更改文件属组"></a>-R：递归更改文件属组</h1><p>chown [–R] 属主名 文件名<br>chown [-R] 属主名：属组名 文件名<br>复制代码<br>将 index.html 的所有者更改为 git：<br>[root@iZ2ze www]# chown git index.html<br>[root@iZ2ze www]# ls -</p><p>-rw-r–r– 1 git  root  0 12月 17 23:54 index.html<br>复制代码<br>将 index.html 的所有者和群组都改为 git：<br>[root@iZ2ze www]# chown git:git index.html<br>[root@iZ2ze www]# ls -l</p><p>-rw-r–r– 1 git  git   0 12月 17 23:54 index.html<br>复制代码<br>4. chmod 更改文件权限<br>权限除了用 r w x 这种方式表示，也可以用数字表示，数字与字母的对应关系为：</p><p>r:4<br>w:2<br>x:1</p><p>之所有如此对应关系，主要还是为了方便推导，比如我们希望一个文件可读可写，那我们可以方便的设置权限为 6（4 + 2），同样，如果我们知道一个权限为 3，我们也可以推导出权限为可写可执行，因为只有 2 + 1 才可能等于 3。​<br>我们看下 chmod （change mode） 的具体语法：</p><h1 id="R：递归更改文件属组-1"><a href="#R：递归更改文件属组-1" class="headerlink" title="-R：递归更改文件属组"></a>-R：递归更改文件属组</h1><p>chmod [-R] xyz 文件或目录<br>复制代码<br>其中 xyz 分别表示 Owner、Group、Others 的权限，如果我们这样设置一个文件的权限：<br>chmod 750 index.html<br>复制代码<br>我们可以得知，Owner 的权限为 7，为可读可写可执行，Group 的权限为 5，为可读可执行，Others 的权限为 0，表示不可读写不可执行。对应字母为：rwxr-x—。<br>除了这种数字的方式，还有一种使用符号类型改变权限的方式：<br>在这种方式里，我们将三种身份 Owner、Group、Others，分别简写为 u（User）、g、o，用 a 表示所有身份，再使用 + - &#x3D; 表示加入、去除、设定一个权限，r w x 则继续表示读，写，执行权限，举个例子：<br>chmod u+x,g-x,o-x index.html<br>复制代码<br>意思就是 Owner 加上执行权限，Group 和 Others 去除执行权限。<br>当然我们也可以直接设定权限<br>chmod u&#x3D;rwx,g&#x3D;rx,o&#x3D;r index.html<br>复制代码<br>此时文件的权限就相当于 -rwxr-xr–。<br>此外，我们还可以省略不写 ugoa 这类身份内容，直接写：<br>chmod +x index.html<br>复制代码<br>此时相当于使用了 a，会给所有身份添加执行权限。<br>5. su 切换身份</p><h1 id="切换为-git-用户"><a href="#切换为-git-用户" class="headerlink" title="切换为 git 用户"></a>切换为 git 用户</h1><p>su git<br>复制代码<br>6. whoami 显示用户名</p><h1 id="whoami"><a href="#whoami" class="headerlink" title="whoami"></a>whoami</h1><p>root<br>复制代码<br>7. pwd 显示当前目录<br>[git@iZ2ze www]$ pwd<br>&#x2F;home&#x2F;www<br>复制代码<br>9. cd 切换工作目录</p><h1 id="进入-x2F-home-x2F-www-x2F"><a href="#进入-x2F-home-x2F-www-x2F" class="headerlink" title="进入 &#x2F;home&#x2F;www&#x2F;"></a>进入 &#x2F;home&#x2F;www&#x2F;</h1><p>cd &#x2F;home&#x2F;www</p><h1 id="进入自己的主目录"><a href="#进入自己的主目录" class="headerlink" title="进入自己的主目录"></a>进入自己的主目录</h1><p>cd ~</p><h1 id="进入当前目录的上上两层"><a href="#进入当前目录的上上两层" class="headerlink" title="进入当前目录的上上两层 :"></a>进入当前目录的上上两层 :</h1><p>cd ..&#x2F;..<br>复制代码<br>10. mkdir 创建目录</p><p>mkdir 创建目录：</p><p>mkdir new_folder<br>复制代码</p><p>mkdir -p 递归创建目录：</p><p>mkdir -p one&#x2F;two&#x2F;three<br>复制代码<br>11. touch 创建文件<br>用于修改文件或者目录的时间属性，当文件不存在，系统会创建空白文件<br>touch new_file<br>复制代码<br>12. echo 打印输出<br>echo 是 Shell 命令，用于打印输出：</p><h1 id="显示转义字符"><a href="#显示转义字符" class="headerlink" title="显示转义字符"></a>显示转义字符</h1><p>echo “&quot;test content&quot;“<br>复制代码<br>创建或覆盖文件内容为 “test content”：<br>echo “test content” &gt; index.html<br>复制代码<br>如果是想追加内容，就用 &gt;&gt; ：<br>[root@iZ2ze www]# echo “test content” &gt; index.html<br>[root@iZ2ze www]# cat index.html<br>test content<br>[root@iZ2ze www]# echo “test content” &gt;&gt; index.html<br>[root@iZ2ze www]# cat index.html<br>test content<br>test content<br>复制代码<br>13. cat 连接文件并打印输出<br>查看文件内容：<br>cat ~&#x2F;.ssh&#x2F;id_rsa.pub<br>复制代码<br>清空 index.html 内容：<br>cat &#x2F;dev&#x2F;null &gt; index.html<br>复制代码<br>把 index.html 的内容写入 second.html：<br>cat index.html &gt; second.html<br>复制代码<br>把 index.html 的内容追加写入 second.html：<br>cat index.html &gt;&gt; second.html<br>复制代码<br>把 index.html 和 second.html 追加写入 third.html：<br>cat index.html second.html &gt;&gt; third.html<br>复制代码<br>14. cp 复制文件或目录<br>将目录 website&#x2F; 下的所有文件复制到新目录 static 下：</p><h1 id="r：若给出的源文件是一个目录文件，此时将复制该目录下所有的子目录和文件。"><a href="#r：若给出的源文件是一个目录文件，此时将复制该目录下所有的子目录和文件。" class="headerlink" title="-r：若给出的源文件是一个目录文件，此时将复制该目录下所有的子目录和文件。"></a>-r：若给出的源文件是一个目录文件，此时将复制该目录下所有的子目录和文件。</h1><p>cp –r website&#x2F; static<br>复制代码<br>15. mv 移动并重命名<br>文件改名：<br>mv index.html index2.html<br>复制代码<br>隐藏文件：</p><h1 id="文件名上加上"><a href="#文件名上加上" class="headerlink" title="文件名上加上 ."></a>文件名上加上 .</h1><p>mv index.html .index.html<br>复制代码<br>移动文件：</p><h1 id="仅仅移动"><a href="#仅仅移动" class="headerlink" title="仅仅移动"></a>仅仅移动</h1><p>mv  &#x2F;home&#x2F;www&#x2F;index.html   &#x2F;home&#x2F;static&#x2F;</p><h1 id="移动又重命名"><a href="#移动又重命名" class="headerlink" title="移动又重命名"></a>移动又重命名</h1><p>mv &#x2F;home&#x2F;www&#x2F;index.html   &#x2F;home&#x2F;static&#x2F;index2.html<br>复制代码<br>批量移动：<br>mv  &#x2F;home&#x2F;www&#x2F;website&#x2F;*  &#x2F;home&#x2F;www&#x2F;static<br>复制代码<br>16. rm 删除一个文件或者目录</p><h1 id="系统会询问"><a href="#系统会询问" class="headerlink" title="系统会询问"></a>系统会询问</h1><p>rm file</p><h1 id="f-表示直接删除"><a href="#f-表示直接删除" class="headerlink" title="-f 表示直接删除"></a>-f 表示直接删除</h1><h1 id="r-表示目录下的所有文件删除"><a href="#r-表示目录下的所有文件删除" class="headerlink" title="-r 表示目录下的所有文件删除"></a>-r 表示目录下的所有文件删除</h1><h1 id="删除当前目录下的所有文件及目录"><a href="#删除当前目录下的所有文件及目录" class="headerlink" title="删除当前目录下的所有文件及目录"></a>删除当前目录下的所有文件及目录</h1><p>rm -r  * </p><h1 id="跑路"><a href="#跑路" class="headerlink" title="跑路"></a>跑路</h1><p>rm -rf &#x2F;*<br>复制代码<br>17. vi&#x2F;vim<br>Linux 内建 vi 文书编辑器，Vim 是从 vi 发展出来的一个文本编辑器。<br>基本上 vi&#x2F;vim 共分为三种模式，分别是命令模式（Command mode），输入模式（Insert mode）和底线命令模式（Last line mode）。我们边操作边介绍这三种模式：<br>​<br>我们执行 vim index.html，如果没有该文件，则会创建文件：<br>vim index.html<br>复制代码<br>此时界面为：</p><p>此时是命令模式，在命令模式下，输入的任何字符都会被视为命令，接下来几个常用的命令：​</p><dl><dt>i  切换到输入模式。<br>x 删除当前光标所在处的字符。</dt><dd>切换到底线命令模式。</dd></dl><p>我们按下 i，便会进入输入模式：</p><p>输入模式下，左下角有 – INSERT – 标志：<br>此时我们可以进行各种输入，当输入完毕后，按下 ESC 回到命令模式：</p><p>此时左下角的 INSERT已经消失不见了，如果我们要保存退出，我们先输入 : ，进入底线命令模式：</p><p>在底线命令模式中，常见的命令有：</p><p>w 保存文件<br>q 退出程序</p><p>我们输入 wq，表示保存并退出，此时我们就会发现并创建了一个 HTML 文件。<br>18. ssh 远程连接工具<br>注意 ssh 监听是 22 端口。<br>其基本语法为：<br>ssh [OPTIONS] [-p PORT] [USER@]HOSTNAME [COMMAND]<br>复制代码<br>监听端口示例：<br>ssh -p 300 <a href="mailto:&#103;&#105;&#116;&#64;&#x38;&#46;&#56;&#x2e;&#56;&#x2e;&#56;">&#103;&#105;&#116;&#64;&#x38;&#46;&#56;&#x2e;&#56;&#x2e;&#56;</a><br>复制代码<br>打开调试模式：</p><h1 id="v-冗详模式，打印关于运行情况的调试信息"><a href="#v-冗详模式，打印关于运行情况的调试信息" class="headerlink" title="-v 冗详模式，打印关于运行情况的调试信息"></a>-v 冗详模式，打印关于运行情况的调试信息</h1><p>ssh -v <a href="mailto:&#103;&#x69;&#x74;&#x40;&#x38;&#x2e;&#x38;&#x2e;&#56;&#46;&#56;">&#103;&#x69;&#x74;&#x40;&#x38;&#x2e;&#x38;&#x2e;&#56;&#46;&#56;</a></p><p>作者：冴羽<br>链接：<a href="https://juejin.cn/post/7044099175838908424">https://juejin.cn/post/7044099175838908424</a><br>来源：稀土掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>在字符串找到出最多出现字符</title>
      <link href="/2022/09/21/note/js-mian-shi-z-zai-zi-fu-chuan-zai-zhao-dao-chu-zui-duo-chu-xian-zi-fu/"/>
      <url>/2022/09/21/note/js-mian-shi-z-zai-zi-fu-chuan-zai-zhao-dao-chu-zui-duo-chu-xian-zi-fu/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token comment">//将字符串出现的字符和次数存在对象countStr中</span>        <span class="token comment">//保存形式为key等于字符value等于次数</span>        <span class="token comment">//for循环字符字符 如果无法根据字符访问这个对象属性说明没有出现过</span>        <span class="token comment">//没出现 countStr[str[i]] =1; 否则countStr[str[i]]++；</span>        <span class="token comment">//最后for of 这个对象哪个属性值大</span>        <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'aaaabbbbbbbbbbbbbasdx,cxcvx'</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">findMostChar</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> countStr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// let existKey = false;</span>                <span class="token comment">// for (let o = 0; o &lt; Object.keys(countStr).length; o++) &#123;</span>                <span class="token comment">//     if (str[i] == Object.keys(countStr)[o]) &#123;</span>                <span class="token comment">//         existKey = true;</span>                <span class="token comment">//         ++countStr[str[i]];</span>                <span class="token comment">//     &#125;</span>                <span class="token comment">// &#125;</span>                <span class="token comment">// if (!existKey) &#123;</span>                <span class="token comment">//     //初始化一次</span>                <span class="token comment">//     countStr[str[i]] = 1;</span>                <span class="token comment">// &#125;</span>                <span class="token comment">// //以上可以简化</span>                <span class="token comment">// if (countStr[str[i]]) &#123;//如果是undefined 没有出现过</span>                <span class="token comment">//     countStr[str[i]]++;</span>                <span class="token comment">// &#125; else &#123;</span>                <span class="token comment">//     countStr[str[i]] = 1;</span>                <span class="token comment">// &#125;</span>                <span class="token comment">//又或者</span>                <span class="token keyword">let</span> char <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//str[i]</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>countStr<span class="token punctuation">[</span>char<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//如果是undefined 没有出现过</span>                    countStr<span class="token punctuation">[</span>char<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    countStr<span class="token punctuation">[</span>char<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//最多出现的次数</span>            <span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token comment">//最多出现的字符</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>countStr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>countStr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    num <span class="token operator">=</span> countStr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    key <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">let</span> fRes <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            fRes<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>            <span class="token keyword">return</span> fRes<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">let</span> log <span class="token operator">=</span> <span class="token function">findMostChar</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mescroll-uni的组件的封装逻辑</title>
      <link href="/2022/09/18/note/xiang-mu-qian-duan-mescroll-uni-de-zu-jian-luo-ji/"/>
      <url>/2022/09/18/note/xiang-mu-qian-duan-mescroll-uni-de-zu-jian-luo-ji/</url>
      
        <content type="html"><![CDATA[<p>pages&#x2F;group&#x2F;chat.vue 的页面滚动方法 调用结构如下：</p><h2 id="1-被调用的mixins文件"><a href="#1-被调用的mixins文件" class="headerlink" title="1.被调用的mixins文件"></a>1.被调用的mixins文件</h2><p>&#x2F;uni_modules&#x2F;mescroll-uni&#x2F;components&#x2F;mescroll-uni&#x2F;mescroll-mixins.js<br><img src="https://qiniu.guet.link/asset/202208240106445.png"></p><h2 id="2-主页面"><a href="#2-主页面" class="headerlink" title="2.主页面"></a>2.主页面</h2><p>&#x2F;pages&#x2F;group&#x2F;chat.vue</p><h3 id="2-1引用mixins"><a href="#2-1引用mixins" class="headerlink" title="2.1引用mixins"></a>2.1引用mixins</h3><p>提供必要的组件数据<br><img src="https://qiniu.guet.link/asset/202208240105868.png"></p><h3 id="2-2使用mescroll-body组件，并创建自定义事件init-指向-mixins中的-mescroll-init方法"><a href="#2-2使用mescroll-body组件，并创建自定义事件init-指向-mixins中的-mescroll-init方法" class="headerlink" title="2.2使用mescroll-body组件，并创建自定义事件init 指向 mixins中的 mescroll init方法"></a>2.2使用mescroll-body组件，并创建自定义事件init 指向 mixins中的 mescroll init方法</h3><p>让mescroll初始化在mescroll-body组件的mounted函数创建<br><img src="https://qiniu.guet.link/asset/202208240103210.png"></p><h3 id="2-3-mescroll-body使用mescroll-uni-js完成初始化并回调"><a href="#2-3-mescroll-body使用mescroll-uni-js完成初始化并回调" class="headerlink" title="2.3 mescroll-body使用mescroll-uni.js完成初始化并回调"></a>2.3 mescroll-body使用mescroll-uni.js完成初始化并回调</h3><p>这里是对封装的调用<br><img src="https://qiniu.guet.link/asset/202208240113078.png"><br>&#x2F;uni_modules&#x2F;mescroll-uni&#x2F;components&#x2F;mescroll-uni&#x2F;mescroll-uni.js</p><p>mescroll-uni将组件的基础方法封装<br><img src="https://qiniu.guet.link/asset/202208240117851.png"></p><h3 id="2-4-mescroll-body使用mescroll-uni-js-完成自定义滚动"><a href="#2-4-mescroll-body使用mescroll-uni-js-完成自定义滚动" class="headerlink" title="2.4 mescroll-body使用mescroll-uni.js 完成自定义滚动"></a>2.4 mescroll-body使用mescroll-uni.js 完成自定义滚动</h3><p>对实例对象，自定义滚动方法</p><p>字符串的调用使用settimeout可能是因为this所指向的vm实例不一样或者uniapp的bug nexttick之后没有完全加载完数据<br><img src="https://qiniu.guet.link/asset/202208240118707.png"><br>&#x2F;uni_modules&#x2F;mescroll-uni&#x2F;components&#x2F;mescroll-uni&#x2F;mescroll-uni.js</p><p><img src="https://qiniu.guet.link/asset/202208240118344.png"></p><h2 id="3-x2F-pages-x2F-group-x2F-chat-vue"><a href="#3-x2F-pages-x2F-group-x2F-chat-vue" class="headerlink" title="3. &#x2F;pages&#x2F;group&#x2F;chat.vue"></a>3. &#x2F;pages&#x2F;group&#x2F;chat.vue</h2><p>经过如上步骤，主页面的mescroll初始化完成<br><img src="https://qiniu.guet.link/asset/202208240119748.png"></p><p><img src="https://qiniu.guet.link/asset/202208262338354.png" alt="12312"></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对文件处理的两个api</title>
      <link href="/2022/09/10/note/js-gai-nian-wen-jian-sheng-cheng-url-de-liang-ge-chang-yong-api/"/>
      <url>/2022/09/10/note/js-gai-nian-wen-jian-sheng-cheng-url-de-liang-ge-chang-yong-api/</url>
      
        <content type="html"><![CDATA[<p>FileReader.readAsDataURL(file)可以得到一段base64的字符串；</p><p>URL.createObjectURL(file)得到的是当前文件的一个内存url；</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> Web API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uniapp如何是如何进行字体的响应式处理的</title>
      <link href="/2022/08/31/note/uniapp-uniapp-ru-he-shi-ru-he-jin-xing-zi-ti-de-xiang-ying-shi-chu-li-de/"/>
      <url>/2022/08/31/note/uniapp-uniapp-ru-he-shi-ru-he-jin-xing-zi-ti-de-xiang-ying-shi-chu-li-de/</url>
      
        <content type="html"><![CDATA[<p>在uniapp中使用rpx设置自适应宽度</p><p>rpx 默认以750rpx作为375px（iPhone678）的基准</p><p>所以往往屏幕越大字体越大 为的就是比例一致</p><p>那么为什么在电脑上的比例却没有非常大呢</p><p>因为存在rpxCalcMaxDeviceWidth，最大支持，将以设备基准宽度375px计算。</p><p>下面是三个与响应式有关的属性：</p><p>rpxCalcBaseDeviceWidthNumber375rpx 计算使用的基准设备宽度，设备实际宽度超出 rpx 计算所支持的最大设备宽度时将按基准宽度计算，单位 pxApp（vue2 且不含 nvue）、H5（2.8.12+）</p><p>rpxCalcIncludeWidth    Number750rpx 计算特殊处理的值，始终按实际的设备宽度计算，单位 rpxApp（vue2 且不含 nvue）、H5（2.8.12+）</p><p>rpxCalcMaxDeviceWidth  Number960rpx 计算所支持的最大设备宽度，单位 pxApp（vue2 且不含 nvue）、H5（2.8.12+）</p><p><a href="https://uniapp.dcloud.net.cn/collocation/pages.html#globalstyle">https://uniapp.dcloud.net.cn/collocation/pages.html#globalstyle</a></p><p>rpx 其它相关配置 ：<br>1.HBuilder - 设置 - 编辑器设置 - px转rpx&#x2F;upx比例<br>2.rpx&#x2F;upx小数部分保留长度（特别重要，保留太小，比例会不对）<br>3.当然你还可以参考以上网页在manifest修改模板基准</p>]]></content>
      
      
      <categories>
          
          <category> uniapp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> 响应式 </tag>
            
            <tag> uniapp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>$ajax的配置详解</title>
      <link href="/2022/08/30/note/js-zong-jie-ajax-de-pei-zhi-xiang-jie/"/>
      <url>/2022/08/30/note/js-zong-jie-ajax-de-pei-zhi-xiang-jie/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jquery123.com/jQuery.ajax/">https://www.jquery123.com/jQuery.ajax/</a></p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图片懒加载</title>
      <link href="/2022/08/27/note/qian-duan-bian-cheng-t-tu-pian-lan-jia-zai/"/>
      <url>/2022/08/27/note/qian-duan-bian-cheng-t-tu-pian-lan-jia-zai/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h2><p>图片懒加载就是延迟加载，使得网络压力、渲染压力减轻。<br>先将图片链接放在自定义属性，使得img标签不对属性触发行为。<br>再利用监听方法，判断图片是否到达可视区域，将图片链接放到src上，触发标签网络行为。<br>最后取消监听。</p><h2 id="2-方法"><a href="#2-方法" class="headerlink" title="2. 方法"></a>2. 方法</h2><h3 id="2-1-scroll事件监听"><a href="#2-1-scroll事件监听" class="headerlink" title="2.1 scroll事件监听"></a>2.1 scroll事件监听</h3><p>使用document.queryselct(“asda”)获取节点<br>节点.BoundingClienReact(“xxx”).top()获取高度<br>…获取显示区域的高度<br>使用window.listener(“scroll”)监听滚动事件<br>滚动时判断节点高度小于显示高度<br>将data-scr 赋值给src<br>所有img加载完，将scroll监听取消</p><p><img src="https://qiniu.guet.link/asset/202208270506686.png"></p><h3 id="2-2-构造函数监听器"><a href="#2-2-构造函数监听器" class="headerlink" title="2.2 构造函数监听器"></a>2.2 构造函数监听器</h3><p>使用浏览器构造函数监视器（如果支持的话）<br>提前设置好处理的回调函数<br>将回调函数作为参数给构造函数，new出实例</p><p>对每一个img标签调用实例来监听</p><p>在回调函数里判断是否在交叉区域<br>在，将data-scr 赋值给src，取消这个节点的监听</p><p>还有判断是否还有监听没有监听了，释放实例null</p><p><img src="https://qiniu.guet.link/asset/202208270508974.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> 优化 </tag>
            
            <tag> 图片懒加载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宝塔配置node项目（nginx下）</title>
      <link href="/2022/08/22/note/yun-wei-shi-cao-bao-ta-pei-zhi-node-xiang-mu-nginx-xia/"/>
      <url>/2022/08/22/note/yun-wei-shi-cao-bao-ta-pei-zhi-node-xiang-mu-nginx-xia/</url>
      
        <content type="html"><![CDATA[<p>在使用宝塔配置node项目的时候碰到了一些雷区，本文就是对nginx下的node项目在宝塔如何配置做一个基本介绍和记录，对于项目的上传发布就不再赘述。</p><h2 id="1-域名管理"><a href="#1-域名管理" class="headerlink" title="1. 域名管理"></a>1. 域名管理</h2><p>配合外网映射，对实际项目端口进行访问</p><p>例如node项目实际端口是5000，但我们却可以通过nginx对该域名下的80端口进行访问，当然这个访问本质上还是nginx占用80端口，还是一端口对应一应用的。</p><p><img src="https://qiniu.guet.link/asset/202209272226459.png" alt="域名管理"></p><p>A：域名哪里来？当然是去阿里云自己买一个再生成子域名啦。需要注意的是，域名的备案周期比较长，我当初备案了近两周。</p><h2 id="2-外网映射"><a href="#2-外网映射" class="headerlink" title="2. 外网映射"></a>2. 外网映射</h2><p>如上</p><p>外网映射就是将本不属于项目的端口一并进行监听，反代理到实际端口</p><p><img src="https://qiniu.guet.link/asset/202209272219926.png" alt="外网映射"></p><h2 id="3-伪静态"><a href="#3-伪静态" class="headerlink" title="3. 伪静态"></a>3. 伪静态</h2><p>还没有用到</p><h2 id="4-SSL"><a href="#4-SSL" class="headerlink" title="4. SSL"></a>4. SSL</h2><p>可以对项目进行ssl证书配置</p><p>推荐去阿里云申请证书（那个申请的周期比较长也比较可靠），再粘贴过来。也可以选择let’s encrypt，更快速<br><img src="https://qiniu.guet.link/asset/202209272228314.png" alt="SSL"></p><h2 id="5-配置文件"><a href="#5-配置文件" class="headerlink" title="5. 配置文件"></a>5. 配置文件</h2><p>这里的配置文件是指nginx</p><p><img src="https://qiniu.guet.link/asset/202209272212343.png" alt="nginx配置"></p><p>Q：使用了node服务，这里是对node服务服务进行配置（误区）？</p><p>A：不是，这里是nginx的配置文件，需要通过nginx来对服务反代理到node服务端口。例如node项目停掉了nginx就无法访问https了，因为宝塔是通过nginx来配置ssl的。</p><p>这个配置一般不需要改动，是自动生成的，详细配置如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">server<span class="token punctuation">&#123;</span>    listen <span class="token number">80</span><span class="token punctuation">;</span>    listen <span class="token number">443</span> ssl http2<span class="token punctuation">;</span>    server_name server.guet.link<span class="token punctuation">;</span>    index index.html index.htm default.htm default.html<span class="token punctuation">;</span>    <span class="token comment">#root /www/wwwroot/pengpeng_server;</span>        <span class="token comment">#SSL-START SSL相关配置</span>    <span class="token comment">#error_page 404/404.html;</span>    ssl_certificate    /www/server/panel/vhost/cert/砰砰即时通讯server/fullchain.pem<span class="token punctuation">;</span>    ssl_certificate_key    /www/server/panel/vhost/cert/砰砰即时通讯server/privkey.pem<span class="token punctuation">;</span>    ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3<span class="token punctuation">;</span>    ssl_ciphers EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:<span class="token operator">!</span>MD5<span class="token punctuation">;</span>    ssl_prefer_server_ciphers on<span class="token punctuation">;</span>    ssl_session_cache shared:SSL:10m<span class="token punctuation">;</span>    ssl_session_timeout 10m<span class="token punctuation">;</span>    add_header Strict-Transport-Security <span class="token string">"max-age=31536000"</span><span class="token punctuation">;</span>    error_page <span class="token number">497</span>  https://<span class="token variable">$host</span><span class="token variable">$request_uri</span><span class="token punctuation">;</span>    <span class="token comment">#SSL-END</span>        <span class="token comment">#ERROR-PAGE-START  错误页相关配置</span>    <span class="token comment">#error_page 404 /404.html;</span>    <span class="token comment">#error_page 502 /502.html;</span>    <span class="token comment">#ERROR-PAGE-END</span>            <span class="token comment">#REWRITE-START 伪静态相关配置</span>    include /www/server/panel/vhost/rewrite/node_砰砰即时通讯server.conf<span class="token punctuation">;</span>    <span class="token comment">#REWRITE-END</span>        <span class="token comment">#禁止访问的文件或目录</span>    location ~ ^/<span class="token punctuation">(</span><span class="token punctuation">\</span>.user.ini<span class="token operator">|</span><span class="token punctuation">\</span>.htaccess<span class="token operator">|</span><span class="token punctuation">\</span>.git<span class="token operator">|</span><span class="token punctuation">\</span>.svn<span class="token operator">|</span><span class="token punctuation">\</span>.project<span class="token operator">|</span>LICENSE<span class="token operator">|</span>README.md<span class="token operator">|</span>package.json<span class="token operator">|</span>package-lock.json<span class="token operator">|</span><span class="token punctuation">\</span>.env<span class="token operator">|</span>node_modules<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token builtin class-name">return</span> <span class="token number">404</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">#一键申请SSL证书验证目录相关设置</span>    location /.well-known/ <span class="token punctuation">&#123;</span>        root  /www/wwwroot/pengpeng_server<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment"># HTTP反向代理相关配置开始 >>></span>    location ~ /purge<span class="token punctuation">(</span>/.*<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        proxy_cache_purge cache_one <span class="token variable">$host</span><span class="token variable">$request_uri</span><span class="token variable">$is_args</span><span class="token variable">$args</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    location / <span class="token punctuation">&#123;</span>        proxy_pass http://127.0.0.1:5000<span class="token punctuation">;</span>        proxy_set_header Host <span class="token variable">$host</span><span class="token builtin class-name">:</span><span class="token variable">$server_port</span><span class="token punctuation">;</span>        proxy_set_header X-Real-IP <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>        proxy_set_header X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span><span class="token punctuation">;</span>        proxy_set_header REMOTE-HOST <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>        add_header X-Cache <span class="token variable">$upstream_cache_status</span><span class="token punctuation">;</span>        proxy_connect_timeout 30s<span class="token punctuation">;</span>        proxy_read_timeout 86400s<span class="token punctuation">;</span>        proxy_send_timeout 30s<span class="token punctuation">;</span>        proxy_http_version <span class="token number">1.1</span><span class="token punctuation">;</span>        proxy_set_header Upgrade <span class="token variable">$http_upgrade</span><span class="token punctuation">;</span>        proxy_set_header Connection <span class="token string">"upgrade"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment"># HTTP反向代理相关配置结束 &lt;&lt;&lt;</span>        access_log  /www/wwwlogs/砰砰即时通讯server.log<span class="token punctuation">;</span>    error_log  /www/wwwlogs/砰砰即时通讯server.error.log<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>node项目实际的启动端口不要设置80，因为nginx要用</p><p>node项目实际的启动端口不要和域名绑定端口（请求端口）相同，因为nginx要用</p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> 项目部署 </tag>
            
            <tag> 宝塔 </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>axios如何提交formdata</title>
      <link href="/2022/08/18/note/js-zong-jie-axios-ru-he-ti-jiao-formdata/"/>
      <url>/2022/08/18/note/js-zong-jie-axios-ru-he-ti-jiao-formdata/</url>
      
        <content type="html"><![CDATA[<h2 id="1-背景："><a href="#1-背景：" class="headerlink" title="1. 背景："></a>1. 背景：</h2><p>在使用axios进行Post请求后端接口的时候，后端无法获取传参。</p><h2 id="2-原因："><a href="#2-原因：" class="headerlink" title="2. 原因："></a>2. 原因：</h2><p>使用axios调用接口的时候，对于参数接口往往期望得到一个以key&#x2F;val格式为传输数据的multipart&#x2F;formdata（多用于传输文件）或x-www-form-urlencoded（form标签的默认content-type）</p><p>axios默认传的是用application&#x2F;json的json格式，那么后台就拿不到传参。例如php中接收参数的变量$_POST就无法获取application&#x2F;json的参数（tp框架内置的助手函数input可以）</p><p>那么为什么get可以传输呢？</p><p>GET 请求不存在请求实体部分，键值对参数放置在 URL 尾部，浏览器把form数据转换成一个字串（name1&#x3D;value1&amp;name2&#x3D;value2…），然后把这个字串追加到url后面，用?分割，加载这个新的url。因此请求头不需要设置 Content-Type 字段，设置了也不会去使用。</p><p><a href="http://www.bilibili.com/?name=%E8%90%BD%E6%B2%89%E9%9B%AA">www.bilibili.com?name=落沉雪</a></p><h2 id="3-解决办如下："><a href="#3-解决办如下：" class="headerlink" title="3. 解决办如下："></a>3. 解决办如下：</h2><p>对于字符串参数，axios是会自动转为 application&#x2F;x-www-form-urlencoded ，所以（1）（2）（3）方法都不需要额外配置“application&#x2F;x-www-form-urlencoded”了</p><h3 id="（1）-new-FormData"><a href="#（1）-new-FormData" class="headerlink" title="（1） new FormData()"></a>（1） new FormData()</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（2）-URLSearchParams"><a href="#（2）-URLSearchParams" class="headerlink" title="（2） URLSearchParams"></a>（2） URLSearchParams</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（3）-qs库"><a href="#（3）-qs库" class="headerlink" title="（3） qs库"></a>（3） qs库</h3><p>这也是最多人使用的方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> qs <span class="token keyword">from</span> <span class="token string">'qs'</span> <span class="token comment">// qs在安装axios后会自动安装，只需要组件里import一下即可</span><span class="token comment">// 代码省略...</span>dataObj <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>dataObj<span class="token punctuation">)</span> <span class="token comment">// 得到转换后的数据为 string 类型</span><span class="token comment">//dataObj = qs.stringify(dataObj,&#123;indices:true&#125;) // 传数组时以下标的形式</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'https://jsonplaceholder.typicode.com/posts'</span><span class="token punctuation">,</span>  <span class="token comment">// headers: &#123;</span>  <span class="token comment">//   'Content-Type': 'application/x-www-form-urlencoded'</span>  <span class="token comment">// &#125;,</span>  <span class="token literal-property property">data</span><span class="token operator">:</span> dataObj<span class="token punctuation">,</span>  <span class="token comment">// 直接提交转换后的数据即可</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>content-type的总结请看另一篇 JS-总结-ajax请求时content-type详解.md</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> axios </tag>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多维数组中以数组为单位找最大值，并形成一个新数组</title>
      <link href="/2022/08/12/note/js-mian-shi-s-duo-wei-shu-zu-zhao-zui-da-zhi/"/>
      <url>/2022/08/12/note/js-mian-shi-s-duo-wei-shu-zu-zhao-zui-da-zhi/</url>
      
        <content type="html"><![CDATA[<p>请注意，数组中包含数组的话称之为多维数组。您可以通过将两组方括号链接在一起来访问数组内的另一个数组。</p><p>如果要细分的话，普通的数组叫一维，数组中嵌套着一个数组叫二维…以此类推</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">findMaxVal</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> arrRes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> element <span class="token operator">=</span> array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//使用 apply 更改接受参数的形式为数组</span>        <span class="token keyword">let</span> max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>        arrRes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> arrRes<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> oldArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span>newArr <span class="token operator">=</span> <span class="token function">findMaxVal</span><span class="token punctuation">(</span>oldArr<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> 数组 </tag>
            
            <tag> Math.max方法应用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>七牛水印笔记</title>
      <link href="/2022/08/10/note/qian-duan-sheng-huo-qi-niu-shui-yin-bi-ji/"/>
      <url>/2022/08/10/note/qian-duan-sheng-huo-qi-niu-shui-yin-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>示例:</p><p><a href="https://qiniu.guet.link/%E8%AF%81%E4%BB%B6a/IMG_1968%2820221011-003502%29.JPG?watermark/4/text/5LuF55So5LqO5a6e5ZCN6K6k6K-BCuacieaViOacn-iHszIwMjLlubQxMeaciA/fontsize/400/fill/cmVk/dissolve/50/rotate/30/uw/180/uh/180/resize/1">https://qiniu.guet.link/%E8%AF%81%E4%BB%B6a/IMG_1968%2820221011-003502%29.JPG?watermark/4/text/5LuF55So5LqO5a6e5ZCN6K6k6K-BCuacieaViOacn-iHszIwMjLlubQxMeaciA/fontsize/400/fill/cmVk/dissolve/50/rotate/30/uw/180/uh/180/resize/1</a></p><p>文档：</p><p><a href="https://developer.qiniu.com/dora/1316/image-watermarking-processing-watermark">https://developer.qiniu.com/dora/1316/image-watermarking-processing-watermark</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ref是干嘛的</title>
      <link href="/2022/08/07/note/vue-mian-shi-ref-shi-gan-ma-de/"/>
      <url>/2022/08/07/note/vue-mian-shi-ref-shi-gan-ma-de/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myimg<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>imgs<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xx/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">mounted()&#123;    &#x2F;&#x2F;获取可视高度 不包括border和滚动宽度    document.querySelector(&#39;#myimg&#39;).clientHeight&#x2F;&#x2F;麻烦    this.$refs.imgs.clientHeight&#x2F;&#x2F;好用&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h2><p>ref 被用来给元素或子组件注册引用信息,如果是普通元素就是dom，如果是组件就是组件实例。例如，通过给一个组件绑定了ref，那么我就可以通过它的别名来调用组件方法。</p><h2 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h2><p>可以通过this.$refs.imgs.clientHeight</p><h2 id="3-拓展"><a href="#3-拓展" class="headerlink" title="3.拓展"></a>3.拓展</h2><p>ref $refs一般和nextTick()搭配使用，操作dom</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>b站是如何在控制台作输出的，ascii艺术</title>
      <link href="/2022/08/07/note/bian-cheng-zhi-shi-b-zhan-shi-ru-he-zai-kong-zhi-tai-zuo-shu-chu-logo-de-ascii-yi-zhu/"/>
      <url>/2022/08/07/note/bian-cheng-zhi-shi-b-zhan-shi-ru-he-zai-kong-zhi-tai-zuo-shu-chu-logo-de-ascii-yi-zhu/</url>
      
        <content type="html"><![CDATA[<p>在B站打开控制台会看到带有B站logo的输出，这其实就是输出ascii art</p><h2 id="1-使用"><a href="#1-使用" class="headerlink" title="1. 使用"></a>1. 使用</h2><p>参考b站弄了一个自己的输出，代码如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> aniyaBase64 <span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span><span class="token keyword">let</span> aniya <span class="token operator">=</span> <span class="token function">decodeURI</span><span class="token punctuation">(</span><span class="token function">atob</span><span class="token punctuation">(</span>aniyaBase64<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> style <span class="token operator">=</span> <span class="token string">'background:black;color: pink;text-shadow: 0 0 10px rgba(255, 255, 255, 1)'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aniya<span class="token punctuation">,</span>style<span class="token punctuation">,</span><span class="token string">'color: black'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-过程解析"><a href="#2-过程解析" class="headerlink" title="2. 过程解析"></a>2. 过程解析</h2><h3 id="2-1-原型"><a href="#2-1-原型" class="headerlink" title="2.1 原型"></a>2.1 原型</h3><p>有样式和字符如下</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">let style &#x3D; &#39;background:black;color: pink;text-shadow: 0 0 10px rgba(255, 255, 255, 1)&#39;;let aniya &#x3D; &#96;                                ╔ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÉ%                █████████▀███¼ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ¼ÜÜÜÜM                ████████████Ü│&#123;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜD                ▓██████▓██▀░│╔ÜÜÜÜ¼ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜk                ▓████▄██▀│││││&#123;Ü¼¼¼ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ[ÜÜÜÜ[ÜÜÜÜÜÜÜ▒▄                 ▓▓▓███[Ü│░¼¼¼Ü&#123;$¼Ü¼Ü¼ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ¼ÜÜ¼ÜÜÜÉÜÜÜÜ^¼▓▓██▄                &#x2F;▓██▀½ÜÜÜÜÜÜÜÜÜ¼[Ü¼ÜÜÜÜÜÜÜÜÜÜÜÉÜÜÜÜÜÜÜÜÜÜÜÅÜÜÜÜÜÜÜÜì││Ü▓▓████▄               &#x2F;ÜÜÜÜÜ½ÜÜÜÜÜÜÜÜûÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÉÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÅÜÜ¼│││ÜÜ███▀             ┌%Ü$¼ÜÜÜ½&#123;ÜÜÜÜÜÜÜÉÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÉÜÜÜÜÜÜÜÜÜÜÜÜÉÜÜ¼│ÜÉ⌐║¼││¼Å▓▀            ╔¼ÜUÜÜ¼¼ÜÜÜÜÜÜÜÜÜ¼¼¼ÜÜÜÜÜÜÜÜÜÜÜÜÜ¼ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ¼Ü$Ü¼ÜÜüÜÉ▒            ôÜÜÉÜÜ½ÜÜÜWÜÜÜÜÜÜÉÜÜÜÜÜÜÜÜÜ[ÜÜÜÜÜ▒¼ÜÜÜÜÜÜÜÜÜÜÜÜÉÜÜÜÜÜÖÜÜÜÜÜÜÉÅ&#125;          ╔%ÜÜ¼¼ÜÜ¼ÜÜÜ¼ÜÜÜÜÜ$¼ÜÜÜÜÜÜÜÜWÉÜÜÜÜÉ$¼ÜÜÜÜÜÜÜÜÜÜÜÜ▒ÜÜÜÜÜÜÜÜÜÜÜÜÉ¼         ╔½ÜÜÜÉÜÜÜÜMÜÜÜ$ÜÜÜÜÉÜÜÜÜÜÜ[MⁿM¼ÜÜÜ@ºÉÜÜÜÜÜÜÜÜÜÜÜÜ½▒ÜÜÜÜÜÜÉÜÜÜÜÜÉÜ&#125;         %ÜÜÜ¼ÜÜÜÜÜÖÜ¼ÜÜÉÜÜ¼ÜÜÜÜÜÜⁿ││╔ÉÜÜûº│║Ü¼ÜFÜÜÜÜÜÜÜÜÜÉÜÜ[¼ÜÜÜÜÜÜÜÜ[Ü½Å,        ╔ÜÜÜÜ¼¼ÜÜÜÜÜÅ¼ÜÜ[ÜÜ½¼ÜÜⁿ~│  │Å[Üⁿ│  &#123;ÜÜP│╚ÜÜÜÜÜÜÜ¼»$ÜÜKÜÜ[ÜÜÜÜÜ$¼½Ü▒        ÅÜÜÜÜ$¼ÜÜÜÜÜÜ%ÜÜÜÅ¼½º││    ┌º^││   └Å¼ⁿ│  ╚ÜÜÜÜÜF│ ÉÜPⁿ¼Ü¼¼ÜÜÜÜÉÜ$Ü$⌐       ╔ÜÜÜÜÜ$ÜÜÜÜÜÜÜÜ%ÜÜÜ$¼__│╔,│││┌│┌    ┌~│└    ΓÜÜN&#39;│ j¼º│ ÜÜ$ÜÜÜÜ$¼ÜÉÜÖ%       &#123;ÜÜÜÜÜ▓%ÜÜÜÜÜÜÜ[%ÜÜÜ%▓▀██▄__ª┤»»√           δⁿ~│  ┌~│  └XÜÜÜÜÜ½Ü¼$¼¼ÜÉ,       ¼ÜÜÜÜÜ▓▒ÜÜÜÜÜÜÜÜÜN¼ÜÜ▒░ÑÑ▀▀▀▀▀▀ⁿº│          ┌└┌  ┌     ┌ⁿ$¼ÜÜÜÜÜ[Ü¼ÜÜÉ%       ¼ÜÜÜÜ¼▓▒ÉÜÜÜÜÜÜÜÜÜÅÜÜÜ▒¼¼░Ü&#123;░│││││        ┌│σ▄_ⁿ«»vv││┌│┌ÉÜÜÜÉÜ[ÉÜÜÜ¼ÉÜW       ¼ÜÜÜÜ¼▒▒▒ÜÜÜÜÜÜÜÜÜÜÜÜÜÅÇ░░░Ü&#123;░│││└    δ&#39; ││││░~▀▀████▒╡│δÜÜ[ÜÜ[ÜÜÜÜÜÜ$ÜÜ,       ¼ÜÜÜÜ$▒▒▒%ÜÜÜÜÜÜÜÜÜÜÜ½ÜÅ░││││││└└     ┌│││││░│Ü&#123;¼[ÜÜ[░░░▒Ü¼ÜÜQÜÜÜÜÜÜÜÅÜ¼Ü       &#123;ÜÜÜ¼▒▒▓▒▒ÜÜÜÜÜÜÜÜÜÜÜÜÅÜ&#125;│└└└└ └wNMMç__││┌││││Ü&#123;░Ü&#123;&#123;░░[ÉÉR[ÜF¼ÜÜÜÜÜÜÜ▒Ü¼¼%       δÜÜÜ$▒▒▒▒▒▒ÜÜÜÜÜÜÜ[ÜÜÜÜ[Q│ └└└╔ÜÜÜÜÜÜÜÜÖ│└││││││░░░░░[▒▒¼Ü¼ÜÜÜÜÜÜÜÜÜ¼▒Ü¼ÜÜ¡       ║ÜÜU▒▒▒▒▒▒▒▒ÜÜÜÜÜÜÜÜÜÜÜÜÜ&#125;   ┌╚%ÜÜ¼ÜÜÜÜÜ│ ┌│└││││││░▄▒▒▓¼ÜÜÜÜÜÜÜÜÜÜÜ▒ÜÜÜ▒Ü$       ║Ü¼▒▒▒▒▒▒▓▒▒▒ÜÜÜÜÜÜÜÜÜÜ¼ÜÅDb▄_││┌││~~ⁿⁿⁿ││││┌││░│▄@▒▒▒▒▓¼ÜÜÜÜÜÜÜÜÜÜ$▓Ü¼$▓¼Ü       j▒▒▒▒▓▒▒▒▓█▒▒▒▒ÜÜÜÜÜÜÜÜÜÜ¼ÜÜ¼Ü▓▀██%%mpw▄▄▄▄▄███▒▒▒▒▒▒▒▒▒ÜÜÜÜÜÜÜ¼Ü¼¼▒▓¼$▒║ÜU     ╔@▒▒▒▀▀▀▀▀ⁿ▓██▒▒▒▒▒Ü¼ÜÜÜÜÜÜÜÉÜÜÜÜÜÜÜ¼EÜÜ½█████████▒▒▒▒▒▓▒▒ÜÜÜÜÜÜÜÜ¼¼▒▒▒▒▒~║ÜÉ               ██████▒▒▒▒▒MÜÜÜÜÜÜK_JÜ▄▄▄▄▄▄█████████████▒▒▓ª╚M▒ÜÜÜÜÜÜÜÜ$▒▒▓▀&#39;  $ⁿ              ▄████████▒▒▒▒▒▒ÜÜÜÜ▓▀▀█▀▀█▀º^~~▓██▀▒▀▓█████     %ÜÜÜÜÜÜ[▒▒▒▓              █████████¼Ö▀▒▒▒▒▒ÜÜL ┌&#125;  ⌐ └&#x2F;√ⁿ^¼ⁿ░aÜ▓█████     |ÜÜÜÜÜM▒▒▒ⁿ             ▓██████████%ÑÑⁿM▒▒▒▒░\«$▄█~J││││││¢j⌂▄███████    ÖÜÜÜM▒▒▒ⁿ             █████████████J¿[░ⁿⁿ│││¼▓██W│││││││░▄█████████▄  ΓÜ▄▒▒▒▀^            ████████████████▄▄│││││││~»¿│││││_▄████████████  ^&#39;&#39;            ██████████████████~ⁿv,│││││││~ⁿ╝▀██████████████▒           ▓█████████████████É░││░~»¿│││││││░▀██████████████          ▓██████████████████░░░│││_q▓█▄_░││░░▓█████████████           ▓██████████████████¿▄▄███▒É▓██Ü▓█▄_[▓█████████████▒           ▀███████████████████████ⁿÑ▓██ⁿ▓██████████████████▒             ▓█████████████████████████████████████████████▀               ▓█████████%c阿尼亚~怀恋没有bug的存在~%c█████████              ▓████████████████████████████████████████              ▓████████████████████████████████████████&#96;;              console.log(aniya,style,&#39;color: black&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(1) 字符不需要自己一个个带出来，自己下载一张图片到asciiart.club这个网站上传就能得到ascii art图，有如下过程：</p><p>asciiart.club &#x3D;&#x3D;》上传图片 &#x3D;&#x3D;&gt; 负责文本 &#x3D;&#x3D;》去掉特殊字符（如&#96;）</p><p>(2) %c作用于后面的字符，如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//color: black作用于哈哈哈哈 color: red'作用于呵呵呵呵</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'%c哈哈哈哈%c呵呵呵呵'</span><span class="token punctuation">,</span><span class="token string">'color: black'</span><span class="token punctuation">,</span><span class="token string">'color: red'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-2-编码"><a href="#2-2-编码" class="headerlink" title="2.2 编码"></a>2.2 编码</h3><p>我们可能不想在js文件中直接显示图片，或者这样传输比较困难，那么可以对它进行base64编码：</p><h4 id="2-2-1-btoa-和-atob"><a href="#2-2-1-btoa-和-atob" class="headerlink" title="2.2.1 btoa 和 atob"></a>2.2.1 btoa 和 atob</h4><p>btoa 和 atob 是window对象的两个函数，其中：</p><p>btoa ：是binary to ascii  将字符 编码 成base64表示的ASCII字符串<br>atob ：是ascii to binary  将base64表示ASCII字符串 解码 成字符</p><p><strong>（ASCII的意思是只支持ASCII码，不覆盖Unicode）</strong></p><h4 id="2-2-2-Unicode"><a href="#2-2-2-Unicode" class="headerlink" title="2.2.2 Unicode"></a>2.2.2 Unicode</h4><p>正如上面所说btoa和atob只支持ascii不支持Unicode，如果你和我一样掺杂了中文，这样btoa和atob就没有办法支持了。</p><p>所以我们使用encodeURIComponent和decodeURIComponent方法（也可以使用encodeURI，会对部分uri字符不转义），将中文字符编码转变成ASCII字符序列。</p><p>编码时，先用encodeURIComponent对字符串进行编码，再用btoa进行Base64编码；</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">btoa</span><span class="token punctuation">(</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解码时，先用atob对Base64编码的串进行解码，再用decodeURIComponent对字符串进行解码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">decodeURIComponent</span><span class="token punctuation">(</span><span class="token function">atob</span><span class="token punctuation">(</span>demo<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>完成！但是由于 encodeURIComponent 和 decodeURIComponent 已经达到了转义控制字符的目的，使用 atob 和 btoa 感觉是多此一举，看你喜欢。</p><h2 id="2-参考"><a href="#2-参考" class="headerlink" title="2. 参考"></a>2. 参考</h2><p><a href="https://blog.csdn.net/liuarmyliu/article/details/115015236%EF%BC%88ascii%E8%89%BA%E6%9C%AF%E7%94%9F%E6%88%90%EF%BC%89">https://blog.csdn.net/liuarmyliu/article/details/115015236（ascii艺术生成）</a></p><p><a href="https://juejin.cn/post/6911337056678379534%EF%BC%88%E6%B7%BB%E5%8A%A0%E6%A0%B7%E5%BC%8F%EF%BC%89">https://juejin.cn/post/6911337056678379534（添加样式）</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>301和302重定向的区别</title>
      <link href="/2022/08/07/note/ji-suan-ji-wang-luo-301-he-302-chong-ding-xiang/"/>
      <url>/2022/08/07/note/ji-suan-ji-wang-luo-301-he-302-chong-ding-xiang/</url>
      
        <content type="html"><![CDATA[<p>301是永久重定向,302是临时重定向。</p><p>前端js是没有办法对301和302进行直接操作的，这要么事后端行为，要么是浏览器的默认行为。</p><h2 id="1-前端重定向"><a href="#1-前端重定向" class="headerlink" title="1. 前端重定向"></a>1. 前端重定向</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">"http://127.0.0.1:5501/实例-闭包.html"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>并不会产生301或302状态码，如下图：</p><p><img src="https://qiniu.guet.link/asset/202210022014908.png" alt="&#39;跳转&#39;"></p><h2 id="2-浏览器默认行为"><a href="#2-浏览器默认行为" class="headerlink" title="2. 浏览器默认行为"></a>2. 浏览器默认行为</h2><p>例如，当访问 <a href="http://localhost/archive">http://localhost/archive</a> 页面的时候，如果没有archive这个文件，那么将会发生301跳转到 <a href="http://localhost/archive/index.html">http://localhost/archive/index.html</a> （这是配置cdn加速时发现的,路径不准确导致触发了301重定向到了源站）</p><h2 id="3-后端重定向"><a href="#3-后端重定向" class="headerlink" title="3. 后端重定向"></a>3. 后端重定向</h2><p>后端php，接触过的thinkPHP框架 this-&gt;redirect() 发生的是302跳转。需要注意的是，如果这个行为是ajax，那么页面并不会发生跳转，而是返回重定向的数据到回调函数，拥有两个ajax请求，如下图：</p><p><img src="https://qiniu.guet.link/asset/202210022052217.png" alt="tp重定向"></p><p>而301重定向一般的应用场景是，当网站的目录结构或拓展发生改变时需要重定向，如php改成html便可以使用301永久重定向。</p><h2 id="4-301和302区别"><a href="#4-301和302区别" class="headerlink" title="4. 301和302区别"></a>4. 301和302区别</h2><p>301永久重定向对SEO无任何不好的影响，通过网页A的关键词排名和企业级别都会直接传给网页B。网址更换了域名，表示本网页永久性转移到另一个地址。对于SEO而言，是给了搜索引擎一个友好的信息，告诉它此页面已永久重定向，避免搜索引擎找不到正确的页面。</p><h2 id="5-更多"><a href="#5-更多" class="headerlink" title="5. 更多"></a>5. 更多</h2><p><a href="https://httpstatusdogs.com/">https://httpstatusdogs.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态组件</title>
      <link href="/2022/08/07/note/vue-gai-nian-dong-tai-zu-jian/"/>
      <url>/2022/08/07/note/vue-gai-nian-dong-tai-zu-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h2><p><a href="https://v2.cn.vuejs.org/v2/guide/components.html#%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6">https://v2.cn.vuejs.org/v2/guide/components.html#%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6</a></p><p>通过改变 :is 值变更组件</p><p>注意！！！ 不一定使用动态组件 v-if普通组件看起来可能更清晰 组件一样可以维护</p><h2 id="2-实例"><a href="#2-实例" class="headerlink" title="2. 实例"></a>2. 实例</h2><p>不同的类型的数据不同的组件</p><h2 id="2-1-引入"><a href="#2-1-引入" class="headerlink" title="2.1 引入"></a>2.1 引入</h2><p>首先和普通组件一样要引入组件</p><p><img src="https://qiniu.guet.link/asset/202209071248817.png"></p><h2 id="2-2-数据结构"><a href="#2-2-数据结构" class="headerlink" title="2.2 数据结构"></a>2.2 数据结构</h2><p><img src="https://qiniu.guet.link/asset/202209071256030.png"></p><h2 id="2-3-component-is"><a href="#2-3-component-is" class="headerlink" title="2.3 component :is"></a>2.3 component :is</h2><p><img src="https://qiniu.guet.link/asset/202209071257937.png"></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> vue </tag>
            
            <tag> 动态组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组件的基本使用</title>
      <link href="/2022/08/03/note/vue-gai-nian-zu-jian-de-ji-ben-shi-yong/"/>
      <url>/2022/08/03/note/vue-gai-nian-zu-jian-de-ji-ben-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h2><p>组件是可复用的 Vue 实例</p><p>例如，你可能会有页头、侧边栏、内容区等组件，每个组件又包含了其它的像导航链接、博文之类的组件。</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">&#x2F;&#x2F; 定义一个名为 button-counter 的新组件Vue.component(&#39;button-counter&#39;, &#123;  data: function () &#123;    return &#123;      count: 0    &#125;  &#125;,  template: &#39;&lt;button v-on:click&#x3D;&quot;count++&quot;&gt;You clicked me &#123;&#123; count &#125;&#125; times.&lt;&#x2F;button&gt;&#39;&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;div id&#x3D;&quot;components-demo&quot;&gt;  &lt;button-counter&gt;&lt;&#x2F;button-counter&gt;  &lt;button-counter&gt;&lt;&#x2F;button-counter&gt;  &lt;button-counter&gt;&lt;&#x2F;button-counter&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注册方式："><a href="#注册方式：" class="headerlink" title="注册方式："></a>注册方式：</h2><p>这里有两种组件的注册类型：全局注册和局部注册。</p><h3 id="全局注册："><a href="#全局注册：" class="headerlink" title="全局注册："></a>全局注册：</h3><p>全局注册是使用Vue的属性方法component定义组件，这样每个Vue实例都会引用这个组件</p><p>组件的注册必须在vue实例化前完成，即new Vue（{}）之前</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">Vue.component(&#39;my-component-name&#39;, &#123;  &#x2F;&#x2F; ... options ...&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="局部注册："><a href="#局部注册：" class="headerlink" title="局部注册："></a>局部注册：</h3><p>全局注册往往是不够理想的。比如，如果你使用一个像 webpack 这样的构建系统，全局注册所有的组件意味着即便你已经不再使用一个组件了，它仍然会被包含在你最终的构建结果中。这造成了用户下载的 JavaScript 的无谓的增加。</p><p>在这些情况下，你可以通过一个普通的 JavaScript 对象来定义组件：</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">var ComponentA &#x3D; &#123; &#x2F;* ... *&#x2F; &#125;new Vue(&#123;  el: &#39;#app&#39;,  components: &#123;    &#39;component-a&#39;: ComponentA,    &#39;component-b&#39;: ComponentB  &#125;&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="组件自动注册"><a href="#组件自动注册" class="headerlink" title="组件自动注册"></a>组件自动注册</h3>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> vue </tag>
            
            <tag> 组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http请求头-Referer的含义和作用</title>
      <link href="/2022/08/02/note/qian-duan-wang-luo-http-qing-qiu-tou-referer-de-han-yi-he-zuo-yong/"/>
      <url>/2022/08/02/note/qian-duan-wang-luo-http-qing-qiu-tou-referer-de-han-yi-he-zuo-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概念："><a href="#1-概念：" class="headerlink" title="1. 概念："></a>1. 概念：</h2><blockquote><p>“Referer 请求头包含了当前请求页面的来源页面的地址，即表示当前页面是通过此来源页面里的链接进入的。服务端一般使用 Referer 请求头识别访问来源，可能会以此进行统计分析、日志记录以及缓存优化等。” “需要注意的是 referer 实际上是 “referrer” 误拼写。”<br>——MDN</p></blockquote><h2 id="2-作用："><a href="#2-作用：" class="headerlink" title="2. 作用："></a>2. 作用：</h2><p>防盗链：通过对referer请求头进行判断，源站可以对请求的来源进行判断，从而防止盗用</p><p>反防盗链：我们可以在请求站点将referer请求头尽心修改和删除</p><p>如：</p><p>（1）设置meta</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;meta name&#x3D;&quot;referrer&quot; content&#x3D;&quot;never&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> （2） 设置资源属性</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;img referrerPolicy&#x3D;&quot;no-referrer&quot; src &#x3D;“https:&#x2F;&#x2F;qiniu.guet.link&#x2F;asset&#x2F;202208221649950.jpg” &gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-副作用："><a href="#3-副作用：" class="headerlink" title="3. 副作用："></a>3. 副作用：</h2><p>javascript 有一个可以获取前一页面的URL地址的方法：document.referrer</p><p>如果referrer不对，结果可想而知</p>]]></content>
      
      
      <categories>
          
          <category> 前端网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
            <tag> referer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uniapp与vue的关系</title>
      <link href="/2022/08/01/note/uniapp-uniapp-yu-vue-de-guan-xi/"/>
      <url>/2022/08/01/note/uniapp-uniapp-yu-vue-de-guan-xi/</url>
      
        <content type="html"><![CDATA[<p>1.uniapp是基于vue的多平台框架，支持vue2、vue3、vuex<br>2.uniapp拥有自己的路由，不是用vue-router</p>]]></content>
      
      
      <categories>
          
          <category> uniapp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uniapp </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自适应布局的几种方案的总结</title>
      <link href="/2022/07/31/note/html-css-mian-shi-zi-gua-ying-he-gua-pei/"/>
      <url>/2022/07/31/note/html-css-mian-shi-zi-gua-ying-he-gua-pei/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment">&lt;!-- 百度的移动mate  也可以删除 淘宝无限适配flexible会自动添加--></span>    <span class="token comment">&lt;!-- &lt;script src='flexible.js'>&lt;/script> --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">*</span> <span class="token punctuation">&#123;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">main</span> <span class="token punctuation">&#123;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 0.14rem<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">html</span> <span class="token punctuation">&#123;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 26.66vw<span class="token punctuation">;</span>            <span class="token comment">/* 100vw=>375px x=>100px             100/375 * 100= 26.666            */</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>            总结有以下方案：            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            一、淘宝无限适配 + rem <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            二、手写js监听浏览器宽度，设置动态font-size +rem 和淘宝的无限适配差不多 好处是可以自己设定规则 例如不让ipad上面的字体太大就设置如果超过700px 设置最大font-size            三、使用vw + rem vw是视口宽度 设置html的font-size为vw宽 那么rem就是自适应大小的单位            四、使用vmin来替换vw，vmin和vmax是视口的最大值和最小值，使用vmin在横屏时可以显示更多的内容(例子bilibili)        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token comment">// function reFontSize() &#123;</span>        <span class="token comment">//     let doc = document.documentElement;</span>        <span class="token comment">//     console.log('reFontSize' + doc.clientWidth)</span>        <span class="token comment">//     let font_size = doc.clientWidth / 3.75;</span>        <span class="token comment">//     //以iphone 678为模板 375/3.75 =100</span>        <span class="token comment">//     //1rem = 100px 设置方便</span>        <span class="token comment">//     doc.style.fontSize = font_size + 'px';</span>        <span class="token comment">// &#125;</span>        <span class="token comment">// window.onload = reFontSize();</span>        <span class="token comment">// window.onresize = function () &#123;</span>        <span class="token comment">//     reFontSize();</span>        <span class="token comment">// &#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> html&amp;css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> html </tag>
            
            <tag> 自适应 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>null和0的比较问题</title>
      <link href="/2022/07/26/note/js-null-he-0-de-bi-jiao-wen-ti/"/>
      <url>/2022/07/26/note/js-null-he-0-de-bi-jiao-wen-ti/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">null</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token comment">//  null 尝试转型为number , 则为0 . 所以结果为 false, </span><span class="token keyword">null</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token comment">//  null 尝试转为number ,则为0 , 结果为 true. </span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token comment">// null在设计上，在此处不尝试转型. 所以 结果为false.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li><p>关系运算符 和 相等运算符 并不是一个类别的.</p></li><li><p>关系运算符，在设计上总是需要运算元尝试转为一个number，而相等运算符在设计上，则没有这方面的考虑.</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hash</title>
      <link href="/2022/07/25/note/suan-fa-hash/"/>
      <url>/2022/07/25/note/suan-fa-hash/</url>
      
        <content type="html"><![CDATA[<p>世界十大算法就包含Hash算法,Hash的应用在编程领域无处不在。</p><h2 id="1-到底是什么是Hash？"><a href="#1-到底是什么是Hash？" class="headerlink" title="1.到底是什么是Hash？"></a>1.到底是什么是Hash？</h2><p>hash哈希是音译，本意是剁碎的食物[散列]，输入一些信息将其捣碎后输出出来</p><p>通过散列算法,变换成固定长度的输出,该输出就是散列值</p><h3 id="1-1-如果你是快递超市老板，你是怎么给快递安排货架"><a href="#1-1-如果你是快递超市老板，你是怎么给快递安排货架" class="headerlink" title="1.1 如果你是快递超市老板，你是怎么给快递安排货架?"></a>1.1 如果你是快递超市老板，你是怎么给快递安排货架?</h3><p><img src="https://qiniu.guet.link/asset/ZC$P_O3Z97_A4I$I%7B[M%7BHOI.png" alt="快递点"></p><ol><li>取件码</li></ol><p>2）存取基于相同的规则</p><p>3）分布均匀</p><p>4）取件码&#x3D;》位置</p><p>把某个对象映射到某个地方 叫做 Hash</p><p>hashMap MD5都是hash </p><h2 id="2-怎么设计Hash算法？"><a href="#2-怎么设计Hash算法？" class="headerlink" title="2.怎么设计Hash算法？"></a>2.怎么设计Hash算法？</h2><p>hash值理论上是可重复<br>但就像指纹那样，特别的小</p><p>hash函数是什么 杂凑函数 hash&#x3D;Hash（m），<br>将一个长度输出成一个固定的值，<br>可以成hash值成摘要或指纹</p><p>hash算法应该有以下特性<br>1.确定性<br>2.不可逆（单向）<br>3.分散性（敏感性）<br>4.压缩性</p><h2 id="3-MD5是怎么被“破解”的？"><a href="#3-MD5是怎么被“破解”的？" class="headerlink" title="3.MD5是怎么被“破解”的？"></a>3.MD5是怎么被“破解”的？</h2><p>MD5的hash算法不是+-*&#x2F;,是不可逆的<br>因为MD5在运算的时候已经彻底丢失了某种信息<br>就像位运算右移 101010 &#x3D;&gt; 010101</p><p>那么为什么还是有MD5的密码被破解呢<br>那是因为hash值具有确定性，可以通过建立MD5密码，对密码进行两两比较</p><h2 id="4-Hash可以用来干什么？"><a href="#4-Hash可以用来干什么？" class="headerlink" title="4.Hash可以用来干什么？"></a>4.Hash可以用来干什么？</h2><p>文件校验<br>签名</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递归组件</title>
      <link href="/2022/07/23/note/vue-di-gui-zu-jian/"/>
      <url>/2022/07/23/note/vue-di-gui-zu-jian/</url>
      
        <content type="html"><![CDATA[<p>递归组件</p><p>递归组件就是在模板中引用自身的组件</p><p>我们有时希望在一个组件内部渲染该组件本身，例如渲染树形结构时，需要在树根渲染子树，而子树与树根的结构是一样的，因此存在递归</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="（1）一个简单的递归组件的例子如Tree-vue："><a href="#（1）一个简单的递归组件的例子如Tree-vue：" class="headerlink" title="（1）一个简单的递归组件的例子如Tree.vue："></a>（1）一个简单的递归组件的例子如Tree.vue：</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in data<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        &#123;&#123;item.name&#125;&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tree</span> <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.children<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tree</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Tree"</span><span class="token punctuation">,</span>  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> Array  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（2）在App-vue中使用该递归组件"><a href="#（2）在App-vue中使用该递归组件" class="headerlink" title="（2）在App.vue中使用该递归组件"></a>（2）在App.vue中使用该递归组件</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tree</span> <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tree</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> Tree <span class="token keyword">from</span> <span class="token string">"./components/Tree.vue"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"App"</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"grandFather"</span><span class="token punctuation">,</span>          <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>              <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"father"</span><span class="token punctuation">,</span>              <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span>                  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"son"</span><span class="token punctuation">,</span>                  <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>              <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    Tree<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>less<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> vue </tag>
            
            <tag> 递归组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序分包总结</title>
      <link href="/2022/07/08/note/uniapp-wei-xin-xiao-cheng-xu-fen-bao/"/>
      <url>/2022/07/08/note/uniapp-wei-xin-xiao-cheng-xu-fen-bao/</url>
      
        <content type="html"><![CDATA[<p>关于原生小程序的分包设置，有如下图</p><p><img src="https://qiniu.guet.link/asset/202211210153520.png"></p><p>而uniapp也类似，只不过其文件换成page.json</p><p><a href="https://uniapp.dcloud.net.cn/collocation/pages.html#subpackages">https://uniapp.dcloud.net.cn/collocation/pages.html#subpackages</a></p>]]></content>
      
      
      <categories>
          
          <category> uniapp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> 小程序 </tag>
            
            <tag> 分包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>页面下拉加载闪屏问题</title>
      <link href="/2022/07/04/note/uniapp-xiang-mu-bug-ye-mian-xia-la-jia-zai-shan-ping-wen-ti/"/>
      <url>/2022/07/04/note/uniapp-xiang-mu-bug-ye-mian-xia-la-jia-zai-shan-ping-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>场景发生：<br>聊天页面，使用scroll-view标签，下拉加载历史消息，y轴位置不变，造成旧内容被新内容挤压的情况，显然这不是我们想看到的。</p><p>于是我尝试使用scroll-view提供的scroll-into-view方法定位到旧消息位置。发现可以定位，但又发生一个一个更大的问题，会闪屏。</p><p>多方查找，发现uni.pageScrollTo()可以进行不闪屏的滚动，但是它只作用于页面，于是重新定义封装了组件对页面进行定位<br>详细参考 mescroll-uni</p>]]></content>
      
      
      <categories>
          
          <category> uniapp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> uniapp </tag>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判断对象是否存在某个属性</title>
      <link href="/2022/06/29/note/js-mian-shi-pan-duan-dui-xiang-shi-fou-cun-zai-mou-ge-shu-xing/"/>
      <url>/2022/06/29/note/js-mian-shi-pan-duan-dui-xiang-shi-fou-cun-zai-mou-ge-shu-xing/</url>
      
        <content type="html"><![CDATA[<p>检测对象中属性的存在与否可以通过几种方法来判断。</p><h2 id="1-使用in关键字。"><a href="#1-使用in关键字。" class="headerlink" title="1. 使用in关键字。"></a>1. 使用in关键字。</h2><p>该方法可以判断对象的自有属性和继承（class extends 也就是 原型继承）来的属性是否存在。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> o<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token string">"x"</span> <span class="token keyword">in</span> o<span class="token punctuation">;</span>            <span class="token comment">//true，自有属性存在</span><span class="token string">"y"</span> <span class="token keyword">in</span> o<span class="token punctuation">;</span>            <span class="token comment">//false</span><span class="token string">"toString"</span> <span class="token keyword">in</span> o<span class="token punctuation">;</span>     <span class="token comment">//true，是一个继承属性</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-使用对象的hasOwnProperty-方法。"><a href="#2-使用对象的hasOwnProperty-方法。" class="headerlink" title="2. 使用对象的hasOwnProperty()方法。"></a>2. 使用对象的hasOwnProperty()方法。</h2><p>该方法只能判断自有属性是否存在，对于继承属性会返回false。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> o<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>o<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    　　 <span class="token comment">//true，自有属性中有x</span>o<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">"y"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    　　 <span class="token comment">//false，自有属性中不存在y</span>o<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">"toString"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false，这是一个继承属性，但不是自有属性</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-用undefined判断"><a href="#3-用undefined判断" class="headerlink" title="3. 用undefined判断"></a>3. 用undefined判断</h2><p>自有属性和继承属性均可判断。此方法有局限性，不能区分属性值为undefined或是没有这个属性。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> o<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>o<span class="token punctuation">.</span>x<span class="token operator">!==</span><span class="token keyword">undefined</span><span class="token punctuation">;</span>        <span class="token comment">//true</span>o<span class="token punctuation">.</span>y<span class="token operator">!==</span><span class="token keyword">undefined</span><span class="token punctuation">;</span>        <span class="token comment">//false</span>o<span class="token punctuation">.</span>toString<span class="token operator">!==</span><span class="token keyword">undefined</span>  <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-for…in"><a href="#4-for…in" class="headerlink" title="4. for…in"></a>4. for…in</h2><p>遍历枚举属性判断key</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> o<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token string">"x"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>===和==的区别</title>
      <link href="/2022/06/26/note/js-mian-shi-he-de-qu-bie-yu-yin-shi-zhuan-huan/"/>
      <url>/2022/06/26/note/js-mian-shi-he-de-qu-bie-yu-yin-shi-zhuan-huan/</url>
      
        <content type="html"><![CDATA[<h2 id="1-x3D-x3D-和-x3D-x3D-x3D-区别："><a href="#1-x3D-x3D-和-x3D-x3D-x3D-区别：" class="headerlink" title="1. &#x3D;&#x3D;和&#x3D;&#x3D;&#x3D;区别："></a>1. &#x3D;&#x3D;和&#x3D;&#x3D;&#x3D;区别：</h2><p>首先它们两个引用数据类型都会比较地址值</p><p>区别如下： </p><ul><li>&#x3D;&#x3D;&#x3D; 是严格相等 &#x3D;&#x3D; 代表相等</li><li>&#x3D;&#x3D; 数据类型存在隐式转换，如数组转成字符串</li></ul><p>简要分析：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//基本数据类型</span><span class="token comment">//1. 存在隐式转换</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"1,2"</span>arr <span class="token operator">==</span> str <span class="token comment">//true 因为arr调用了toString返回"1,2"</span><span class="token comment">//2. toString</span>arr<span class="token punctuation">.</span><span class="token function-variable function">toString</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>arr <span class="token operator">==</span> str <span class="token comment">//false 因为toString函数为空了</span><span class="token comment">//3. valueOf（跳过第二步）</span>arr<span class="token punctuation">.</span><span class="token function-variable function">valueOf</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>arr <span class="token operator">==</span> str <span class="token comment">//false 因为要先经过valueOf返回才能到toString</span><span class="token comment">//引用数据类型</span><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>arr1 <span class="token operator">==</span> arr2 <span class="token comment">//false 因为会比较地址值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-原始值"><a href="#2-原始值" class="headerlink" title="2. 原始值"></a>2. 原始值</h2><p>隐式转换会牵扯到原始值</p><p>原始值，也就是基本数据类型 string number … 除了引用类型Object Array …</p><p>如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">12</span>； <span class="token comment">//这是原始值</span><span class="token keyword">let</span> numObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这是对象 需要使用valueOf转换成原始值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3-隐式转换"><a href="#3-隐式转换" class="headerlink" title="3. 隐式转换"></a>3. 隐式转换</h2><p>以下代码会成功打印 hello world! 这便是隐式转换</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">i</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token function-variable function">toString</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>i<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello world!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>隐式转换会经过三个内部函数 ToPrimitive ToNumber ToString （我们无法直接操作）</p><h3 id="2-1-返回原始值ToPrimitive"><a href="#2-1-返回原始值ToPrimitive" class="headerlink" title="2.1 返回原始值ToPrimitive"></a>2.1 返回原始值ToPrimitive</h3><p>ToPrimitive(input, PreferredType?)会尝试调用valueOf方法和toString方法返回原始值，它有以下两种情况调用：</p><p>一般情况 PreferredType自动设置为Number</p><p>1、如果输入的值已经是一个原始值，<strong>则直接返回它</strong><br>2、否则，<strong>如果输入的值是一个对象</strong>，则调用该对象的valueOf()方法，<br>   如果valueOf()方法的返回值是一个原始值，则返回这个原始值。<br>3、否则，调用这个对象的toString()方法，如果toString()方法返回的是一个原始值，则返回这个原始值。<br>4、否则，抛出TypeError异常。</p><p>特殊（Date对象） PreferredType自动设置为String</p><p>1、如果输入的值已经是一个原始值，<strong>则直接返回它</strong><br>2、否则，<strong>调用这个对象的toString()方法</strong>，如果toString()方法返回的是一个原始值，则返回这个原始值。<br>3、否则，如果输入的值是一个对象，则调用该对象的valueOf()方法，<br>   如果valueOf()方法的返回值是一个原始值，则返回这个原始值。<br>4、否则，抛出TypeError异常。</p><p>因为valueOf函数会将Number、String、Boolean基础类型的对象类型值转换成 基础类型，Date类型转换为毫秒数，其它的返回对象本身，而toString方法会将所有对象转换为字符串。显然对于大部分对象转换，valueOf转换更合理些，因为并没有规定转换类型，应该尽可能保持原有值，而不应该想toString方法一样，一股脑将其转换为字符串。</p><p>上面的例子改成这样</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">i</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token function-variable function">toString</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"不输出原始值,没有隐式转换"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello world!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不会隐式转换。因为a是一个引用类型，那么它必须先转成原始值。它首先会调用valueOf，发现不行还是引用类型，那么调用toString，发现还是不行，那么便存在内部报错，无法隐式转换。</p><h3 id="2-1-ToNumber-和-ToString"><a href="#2-1-ToNumber-和-ToString" class="headerlink" title="2.1 ToNumber 和 ToString"></a>2.1 ToNumber 和 ToString</h3><p>对于原始值，js会直接调用这两内部方法隐式转换；对于引用类型，js会经过toPrimitive获取到原始值后再隐式转换。</p><p><strong>通过ToNumber将值转换为数字</strong></p><table><thead><tr><th>参数</th><th>结果</th></tr></thead><tbody><tr><td>undefined</td><td>NaN</td></tr><tr><td>null</td><td>+0</td></tr><tr><td>布尔值</td><td>true转换1，false转换为+0</td></tr><tr><td>数字</td><td>无须转换</td></tr><tr><td>字符串</td><td>有字符串解析为数字，例如：‘324’转换为324，‘qwer’转换为NaN</td></tr><tr><td>对象(obj)</td><td>先进行 ToPrimitive(obj, Number)转换得到原始值，在进行ToNumber转换为数字</td></tr></tbody></table><p><strong>通过ToString将值转换为字符串</strong></p><table><thead><tr><th>参数</th><th>结果</th></tr></thead><tbody><tr><td>undefined</td><td>‘undefined’</td></tr><tr><td>null</td><td>‘null’</td></tr><tr><td>布尔值</td><td>转换为’true’ 或 ‘false’</td></tr><tr><td>数字</td><td>数字转换字符串，比如：1.765转为’1.765’</td></tr><tr><td>字符串</td><td>无需转换</td></tr><tr><td>对象(obj)</td><td>先进行 ToPrimitive(obj, String)转换得到原始值，在进行ToString转换为字符串</td></tr></tbody></table><p>注意，以上转换并不适用任何情况，例如null &#x3D;&#x3D; 0 为false 因为这样并不会进行隐式转换，而是 null &gt;&#x3D; 0 为true 因为比较运算符会进行隐式转换，&#x3D;&#x3D;的情况请往下看</p><h2 id="3-x3D-x3D-运算符隐式转换"><a href="#3-x3D-x3D-运算符隐式转换" class="headerlink" title="3. &#x3D;&#x3D; 运算符隐式转换"></a>3. &#x3D;&#x3D; 运算符隐式转换</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css">比较运算 x==y<span class="token punctuation">,</span> 其中 x 和 y 是值，返回 true 或者 false。这样的比较按如下方式进行：1、若 <span class="token function">Type</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> 与 <span class="token function">Type</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> 相同， 则    1* 若 <span class="token function">Type</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> 为 Undefined， 返回 true。    2* 若 <span class="token function">Type</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> 为 Null， 返回 true。    3* 若 <span class="token function">Type</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> 为 Number， 则          <span class="token punctuation">(</span>1<span class="token punctuation">)</span>、若 x 为 NaN， 返回 false。        <span class="token punctuation">(</span>2<span class="token punctuation">)</span>、若 y 为 NaN， 返回 false。        <span class="token punctuation">(</span>3<span class="token punctuation">)</span>、若 x 与 y 为相等数值， 返回 true。        <span class="token punctuation">(</span>4<span class="token punctuation">)</span>、若 x 为 +0 且 y 为 −0， 返回 true。        <span class="token punctuation">(</span>5<span class="token punctuation">)</span>、若 x 为 −0 且 y 为 +0， 返回 true。        <span class="token punctuation">(</span>6<span class="token punctuation">)</span>、返回 false。            4* 若 <span class="token function">Type</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> 为 String<span class="token punctuation">,</span> 则当 x 和 y 为完全相同的字符序列（长度相等且相同字符在相同位置）时返回 true。 否则， 返回 false。    5* 若 <span class="token function">Type</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> 为 Boolean<span class="token punctuation">,</span> 当 x 和 y 为同为 true 或者同为 false 时返回 true。 否则， 返回 false。    6*  当 x 和 y 为引用同一对象时返回 true。否则，返回 false。  2、若 x 为 null 且 y 为 undefined， 返回 true。3、若 x 为 undefined 且 y 为 null， 返回 true。4、若 <span class="token function">Type</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> 为 Number 且 <span class="token function">Type</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> 为 String，返回比较 x == <span class="token function">ToNumber</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> 的结果。5、若 <span class="token function">Type</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> 为 String 且 <span class="token function">Type</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> 为 Number，返回比较 <span class="token function">ToNumber</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> == y 的结果。6、若 <span class="token function">Type</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> 为 Boolean， 返回比较 <span class="token function">ToNumber</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> == y 的结果。7、若 <span class="token function">Type</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> 为 Boolean， 返回比较 x == <span class="token function">ToNumber</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> 的结果。8、若 <span class="token function">Type</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> 为 String 或 Number，且 <span class="token function">Type</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> 为 Object，返回比较 x == <span class="token function">ToPrimitive</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> 的结果。9、若 <span class="token function">Type</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> 为 Object 且 <span class="token function">Type</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> 为 String 或 Number， 返回比较 <span class="token function">ToPrimitive</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> == y 的结果。10、返回 false。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面主要分为两类，x、y类型相同时，和类型不相同时。<br>类型相同时，没有类型转换，主要注意NaN不与任何值相等，包括它自己，即NaN !&#x3D;&#x3D; NaN。<br>类型不相同时，<br>1、x,y 为null、undefined两者中一个   &#x2F;&#x2F; 返回true<br>2、x、y为Number和String类型时，则转换为Number类型比较。<br>3、有Boolean类型时，Boolean转化为Number类型比较。<br>4、一个Object类型，一个String或Number类型，将Object类型进行原始转换后，按上面流程进行原始值比较。</p><p>参考： <a href="https://juejin.cn/post/6844903557968166926">https://juejin.cn/post/6844903557968166926</a></p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>块级作用域</title>
      <link href="/2022/06/25/note/js-gai-nian-k-kuai-ji-zuo-yong-yu/"/>
      <url>/2022/06/25/note/js-gai-nian-k-kuai-ji-zuo-yong-yu/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token comment">// 作用域指变量所作用的范围，在 Javascript 中有两种作用域：</span>        <span class="token comment">// 全局作用域</span>        <span class="token comment">// 函数作用域</span>        <span class="token comment">//ES6又新增了块级作用域 块级作用域只有在块语句&#123;&#125;下用let const才生效，同时只对let const变量有作用</span>        <span class="token comment">/**MDN block         *通过var声明的变量或者非严格模式下(non - strict mode) 创建的函数声明没有块级作用域。         * 在语句块里声明的变量的作用域不仅是其所在的函数或者 script 标签内，         * 所设置变量的影响会在超出语句块本身之外持续存在。         * 换句话说，这种语句块不会引入一个作用域。尽管单独的语句块是合法的语句，         * 但在 JavaScript 中你不会想使用单独的语句块，         */</span>        <span class="token comment">//  var定义的变量，没有块的概念，可以跨块访问, 不能跨函数访问。</span>        <span class="token comment">//  let定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问。</span>        <span class="token comment">//  const用来定义常量，使用时必须初始化(即必须赋值)，只能在块作用域里访问，而且不能修改。</span>        <span class="token comment">// //1.在函数外var定义 会变成全局变量</span>        <span class="token comment">// for (var i = 0; i &lt; 10; i++) &#123;</span>        <span class="token comment">//     console.log(i);</span>        <span class="token comment">// &#125;</span>        <span class="token comment">// console.log(i);</span>        <span class="token comment">//2.使用let const会形成块级作用域</span>        <span class="token comment">//只要是带有&#123;&#125;括号的都会变成块级作用域</span>        <span class="token comment">//但如果在高层环境定义依然能被访问</span>        <span class="token comment">// for (let k = 0; k &lt; 10; k++) &#123;</span>        <span class="token comment">//     (function () &#123;</span>        <span class="token comment">//         console.log(k);</span>        <span class="token comment">//     &#125;)()</span>        <span class="token comment">// &#125;</span>        <span class="token comment">// console.log(k);//undefined</span>        <span class="token comment">////3.***块级作用域只针对let const变量本身 不会影响 var 或全局变量***</span>        <span class="token comment">// if (true) &#123;</span>        <span class="token comment">//     let a = 2;</span>        <span class="token comment">//     var b = 3;</span>        <span class="token comment">//     window.c = 5;</span>        <span class="token comment">// &#125;</span>        <span class="token comment">// console.log(c);</span>        <span class="token comment">// console.log(b);</span>        <span class="token comment">// // console.log(a);//报错</span>        <span class="token comment">// //4.块级作用域解决settimeout循环输出</span>        <span class="token comment">// //for循环创建了x次块级作用域</span>        <span class="token comment">// //它们之间互相不干扰</span>        <span class="token comment">// //settimeout函数异步执行了块级作用域变量x</span>        <span class="token comment">// for (let x = 0; x &lt; 10; x++) &#123;</span>        <span class="token comment">//     setTimeout(() => &#123;</span>        <span class="token comment">//         console.log(x);</span>        <span class="token comment">//     &#125;, 1000);</span>        <span class="token comment">// &#125;</span>        <span class="token comment">// //5.函数作用域（局部作用域）</span>        <span class="token comment">// //形参也是函数变量</span>        <span class="token comment">// (function (n) &#123;</span>        <span class="token comment">//     console.log(n)</span>        <span class="token comment">// &#125;)(2)</span>        <span class="token comment">// console.log(n)//报错</span>        <span class="token comment">//6.try() catch</span>        <span class="token comment">//var被定义为全局作用域 let定义为块级作用域</span>        <span class="token comment">//catch 块捕获的异常只能在catch里使用</span>        <span class="token comment">// try &#123;</span>        <span class="token comment">//     throw new Error('debug');</span>        <span class="token comment">// &#125; catch (e) &#123;</span>        <span class="token comment">//     var o = 1;</span>        <span class="token comment">//     let p = 1;</span>        <span class="token comment">//     console.log(e);</span>        <span class="token comment">// &#125;</span>        <span class="token comment">// console.log(o);</span>        <span class="token comment">// console.log(e);//报错 define</span>        <span class="token comment">// console.log(p);//报错 define</span>        <span class="token comment">//事实上这种题出的知识点非常的偏 并没有多少实际意义</span>                <span class="token comment">//难题1</span>        <span class="token comment">//在立即执行函数中 函数a与let a存在于不同区块 互不干扰</span>        <span class="token comment">// let a = 1;</span>        <span class="token comment">// (function a() &#123;</span>        <span class="token comment">//     a = 2;</span>        <span class="token comment">//     console.log(a);//返回a函数体</span>        <span class="token comment">// &#125;)()</span>        <span class="token comment">// console.log(a);//返回1</span>        <span class="token comment">// //难题2 函数声明导致，MDN推荐使用表达式a=funciton()&#123;&#125;</span>        <span class="token comment">// var a = 1;</span>        <span class="token comment">// if (true) &#123;</span>        <span class="token comment">//     console.log(a)//函数 函数提升</span>        <span class="token comment">//     a = 2;</span>        <span class="token comment">//     console.log(a)//2</span>        <span class="token comment">//     function a() &#123; &#125;</span>        <span class="token comment">//     a = 3</span>        <span class="token comment">//     console.log(a)//3</span>        <span class="token comment">// &#125;</span>        <span class="token comment">// console.log(a)//2 为什么???</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> 块级作用域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>响应式media与响应式图片</title>
      <link href="/2022/06/25/note/html-css-bu-ju-xiang-ying-shi-media-yu-xiang-ying-shi-tu-pian/"/>
      <url>/2022/06/25/note/html-css-bu-ju-xiang-ying-shi-media-yu-xiang-ying-shi-tu-pian/</url>
      
        <content type="html"><![CDATA[<p>直接上例子上阐明</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>概念：响应式就是根据不同像素变化，做出响应，改变布局<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>作用有：            一、使用media改变局部，例如一行有四个盒子在PC上每个盒子占25%宽，            切换到手机后使每个盒子占50%宽，剩余换行。又或者是将一些不必要的元素隐藏。        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            二、做性能优化，在手机上的图片不需要PC端那么大的像素，可以用source的media属性来做响应式请求不同的图片        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>picture</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- media会从上到下识别规则 识别到了就返回了 不会再识别下一个 --></span>            <span class="token comment">&lt;!-- 如果media不设置max-width 请按大到小往下排列--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image/2.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(min-width:600px) and (max-width:1000px)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image/3.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(min-width:1000px)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- 默认图片放下边，否则识别的时候，没有规则会默认使用这张图片 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image/1.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>picture</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">html</span> <span class="token punctuation">&#123;</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">ul</span> <span class="token punctuation">&#123;</span>        <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>        <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">li.box</span> <span class="token punctuation">&#123;</span>        <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>        <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> #ffc70e<span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">border</span><span class="token punctuation">:</span> 1px solid orangered<span class="token punctuation">;</span>        <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 25%<span class="token punctuation">;</span>        <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.box.box_first</span> <span class="token punctuation">&#123;</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> 1.5rem<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.box.box_second</span> <span class="token punctuation">&#123;</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> 1.5rem<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.box.box_three</span> <span class="token punctuation">&#123;</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> 1.5rem<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* 移动优先: 从最小的屏幕开始进行适配 */</span>    <span class="token comment">/* &lt; 346px  */</span>    <span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 346px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>        <span class="token selector">html</span> <span class="token punctuation">&#123;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* 347px - 462px */</span>    <span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 347px<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 462px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>        <span class="token selector">html</span> <span class="token punctuation">&#123;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* 463px - 959px */</span>    <span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 463px<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 959px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>        <span class="token selector">html</span> <span class="token punctuation">&#123;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* >960px  */</span>    <span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 960px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>        <span class="token selector">html</span> <span class="token punctuation">&#123;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> html&amp;css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
            <tag> 卷 </tag>
            
            <tag> 响应式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vuex的应用</title>
      <link href="/2022/06/22/note/uniapp-vuex-de-ying-yong/"/>
      <url>/2022/06/22/note/uniapp-vuex-de-ying-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="1-初识VUEX"><a href="#1-初识VUEX" class="headerlink" title="1. 初识VUEX"></a>1. 初识VUEX</h2><p>vuex和localStorage的区别<br>1.实质区别<br>vuex存的是状态，存储在内存；localStorage是浏览器提供的接口，让你存的是接口，以文件的形式存储到本地<br>2.应用场景<br>vuex用于组件之间的传值，localStorage则主要用于页面之间的传值<br>3.永久性<br>当刷新页面时，vuex存储的值会丢失，localStorage不会<br>总结<br>localStorage可以代替vuex，对于不变的数据确实可以。</p><p>但是当两个组件共同用以数据源，如果其中一个组件中的数据源改变，希望另一个组件响应变化，这时候就要选择用vuex。<br>vuex是vue的状态管理机制，是方便组件之间通信的。<br>一个组件的数据变化是会映射到使用这个数据的其他组件。</p><p>而localStorage是本地存储，是将数据存储到浏览器的方法，一般在跨页面时使用。</p><p>注意：localStorage 保存对象的时候，需要先将对象转换成json字符串，然后获取的时候在转换成对象形式</p><h2 id="2-VUEX真的好用吗"><a href="#2-VUEX真的好用吗" class="headerlink" title="2. VUEX真的好用吗"></a>2. VUEX真的好用吗</h2><p>麻烦可以用</p><p>Vue.observable()</p><p><a href="https://blog.csdn.net/qq_27674439/article/details/109509581">https://blog.csdn.net/qq_27674439/article/details/109509581</a></p>]]></content>
      
      
      <categories>
          
          <category> uniapp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> localStorage </tag>
            
            <tag> vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端编程-常用库和框架</title>
      <link href="/2022/06/19/note/qian-duan-bian-cheng-ku/"/>
      <url>/2022/06/19/note/qian-duan-bian-cheng-ku/</url>
      
        <content type="html"><![CDATA[<p>使用别人的轮子不仅仅是为了提高工作效率，也是为了学习别人好的编程思想，因此我总结以下工作中常用的框架和库。</p><h2 id="1-常用库"><a href="#1-常用库" class="headerlink" title="1. 常用库"></a>1. 常用库</h2><h3 id="1-1-ElementUI"><a href="#1-1-ElementUI" class="headerlink" title="1.1 ElementUI"></a>1.1 ElementUI</h3><p><a href="https://element.eleme.cn/#/zh-CN">ElementUI</a>是一套为开发者、设计师和产品经理准备的基于 Vue 的桌面端组件库</p><h3 id="1-2-Layui"><a href="#1-2-Layui" class="headerlink" title="1.2 Layui"></a>1.2 Layui</h3><p><a href="http://layui.winxapp.cn/">LayUI</a>（谐音：类 UI) 是一套开源的 Web UI 解决方案，采用自身经典的模块化规范，并遵循原生 HTML&#x2F;CSS&#x2F;JS 的开发方式，常适合网页界面的快速开发。</p><h3 id="1-3-daisyui"><a href="#1-3-daisyui" class="headerlink" title="1.3 daisyui"></a>1.3 daisyui</h3><p><a href="https://daisyui.com/components/steps/">daisyui</a>给 Tailwind CSS 增加了组件类。 例如 btn， card等等… 不需要再处理成百上千的原子类</p><h3 id="1-4-echarts"><a href="#1-4-echarts" class="headerlink" title="1.4 echarts"></a>1.4 echarts</h3><p><a href="https://echarts.apache.org/zh/index.html">echarts</a>是一个基于javaScript的开源可视化图表库。</p><h3 id="1-5-Animate-css"><a href="#1-5-Animate-css" class="headerlink" title="1.5 Animate.css"></a>1.5 Animate.css</h3><p><a href="http://www.animate.net.cn/">Animate.css</a> 是一个有趣的，跨浏览器的 css3 动画库，内置了很多典型的 css3 动画，兼容性好使用方便。</p><h3 id="1-6-swiper"><a href="#1-6-swiper" class="headerlink" title="1.6 swiper"></a>1.6 swiper</h3><p><a href="https://www.swiper.com.cn/index.html">swiper</a>是纯javascript打造的滑动特效插件，面向手机、平板电脑等移动终端。关于swiper的使用，请查看 <strong>swiper的使用.md</strong></p><h3 id="1-7-big-js"><a href="#1-7-big-js" class="headerlink" title="1.7 big.js"></a>1.7 big.js</h3><p><a href="https://github.com/MikeMcl/big.js">big.js</a>是一个用于任意精度十进制算术的小型快速 JavaScript 库。</p><p>toFixed需要规定保留的小数，如果事先不知道结果是多少位小数就不方便使用。<br><img src="https://qiniu.guet.link/asset/202211140206239.png"></p><h3 id="1-8-Day-js"><a href="#1-8-Day-js" class="headerlink" title="1.8 Day.js"></a>1.8 Day.js</h3><p><a href="https://dayjs.fenxianglu.cn/">Day.js</a>是一个极简的JavaScript库，可以为现代浏览器解析、验证、操作和显示日期和时间。</p><h3 id="1-9-timeago-js"><a href="#1-9-timeago-js" class="headerlink" title="1.9 timeago.js"></a>1.9 timeago.js</h3><p>timeago.js是一个纳米库(小于2kb)，用于用xx时间前语句格式化datetime。例如:“3小时前”。</p><h3 id="1-10-vue-city"><a href="#1-10-vue-city" class="headerlink" title="1.10 vue-city"></a>1.10 vue-city</h3><p><a href="https://github.com/xinxingyu/vue-city">vue-city</a>是一个城市选择器。</p><h2 id="2-常用框架"><a href="#2-常用框架" class="headerlink" title="2. 常用框架"></a>2. 常用框架</h2><h3 id="2-1-Vue-js"><a href="#2-1-Vue-js" class="headerlink" title="2.1 Vue.js"></a>2.1 Vue.js</h3><p><a href="https://cn.vuejs.org/">Vue.js</a>是一个易学易用，性能出色，适用场景丰富的 Web 前端框架。</p><h3 id="2-2-uni-app"><a href="#2-2-uni-app" class="headerlink" title="2.2 uni-app"></a>2.2 uni-app</h3><p><a href="https://uniapp.dcloud.net.cn/">uni-app</a>是一个使用 Vue.js (opens new window)开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、Web（响应式）、以及各种小程序（微信&#x2F;支付宝&#x2F;百度&#x2F;头条&#x2F;飞书&#x2F;QQ&#x2F;快手&#x2F;钉钉&#x2F;淘宝）、快应用等多个平台。</p><h3 id="2-3-mescroll"><a href="#2-3-mescroll" class="headerlink" title="2.3 mescroll"></a>2.3 mescroll</h3><p><a href="http://www.mescroll.com/index.html?v=20200727">mescroll</a>是精致的下拉刷新和上拉加载js框架，其支持vue组件形式和uniapp</p><h3 id="2-4-ailwindcss"><a href="#2-4-ailwindcss" class="headerlink" title="2.4 ailwindcss"></a>2.4 ailwindcss</h3><p><a href="https://www.tailwindcss.cn/">tailwindcss</a>是一个功能类优先的 CSS 框架，它集成了诸如 flex, pt-4, text-center 和 rotate-90 这样的的类，它们能直接在脚本标记语言中组合起来，构建出任何设计。</p><h2 id="3-其它人总结的常用轮子"><a href="#3-其它人总结的常用轮子" class="headerlink" title="3. 其它人总结的常用轮子"></a>3. 其它人总结的常用轮子</h2><p><a href="https://juejin.cn/post/7012012633180078117#comment">https://juejin.cn/post/7012012633180078117#comment</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> 前端编程 </tag>
            
            <tag> 常用库 </tag>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>按位非 (~)是什么操作？什么是原码、反码、补码？</title>
      <link href="/2022/06/18/note/js-gai-nian-an-wei-fei-shi-shi-me-cao-zuo-shi-me-shi-yuan-ma-fan-ma-bu-ma/"/>
      <url>/2022/06/18/note/js-gai-nian-an-wei-fei-shi-shi-me-cao-zuo-shi-me-shi-yuan-ma-fan-ma-bu-ma/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>本文你将会知道JS中的按位非 (~)，什么是原码、反码、补码，负数如何在计算机中表示，以及为什么要使用补码。</strong></p><p>起因是在复习运算符优先级的时候，发现了按位非（~）。</p><p>以下是MDN官方给的示例：</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">const a &#x3D; 5;     &#x2F;&#x2F; 00000000000000000000000000000101const b &#x3D; -3;    &#x2F;&#x2F; 11111111111111111111111111111101console.log(~a); &#x2F;&#x2F; 11111111111111111111111111111010&#x2F;&#x2F; expected output: -6console.log(~b); &#x2F;&#x2F; 00000000000000000000000000000010&#x2F;&#x2F; expected output: 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有点蒙，为什么~a等于-6？真是“基础不牢，地动山摇”，所以有了本文。</p><p>我们知道计算机的数据存储是以0和1来表示的。那么为了能完整表示数据，就有了原码、反码、补码。</p><p>在计算机中，存储和计算都是以补码来完成的。</p><p>下面我们来看一下什么是原码、反码、补码：</p><h2 id="1-原码"><a href="#1-原码" class="headerlink" title="1. 原码"></a>1. 原码</h2><p>负数在二进制中的表示是，最高位是1</p><p>如-5： </p><p>1000 0101 （原码）</p><p>注意，无论8位表示还是多少位，负数最高位都应该是1。</p><h2 id="2-反码"><a href="#2-反码" class="headerlink" title="2. 反码"></a>2. 反码</h2><p>对于正数，反码与原码一致。</p><p>对于负数，原码按位取反（最高位不变）。</p><p>如-5： </p><p>1111 1010 （反码）</p><h2 id="3-补码"><a href="#3-补码" class="headerlink" title="3. 补码"></a>3. 补码</h2><p>对于正数，补码与原码一致。</p><p>对于负数，补码要在反码的基础上加1。</p><p>如-5： </p><p>1111 1011 （补码）</p><h2 id="4-计算"><a href="#4-计算" class="headerlink" title="4. 计算"></a>4. 计算</h2><p>刚刚我们说了计算机的存储和计算都是以补码来完成的。</p><p>那么为什么要使用补码？</p><p>在论述之前，我们需要知道计算机只要加运算，要通过操作负数来完成减运算。</p><p>例如：5 - 5</p><p>（1）如果使用原码，有以下结果：</p><p>0000 0101 （5原码）</p><p>1000 0101 （-5原码）</p><p>1000 1010 （-10）</p><p>明显不对</p><p>（2）如果使用反码，有以下结果：</p><p>0000 0101 （5反码）</p><p>1111 1010 （-5反码）</p><p>1111 1111 （-0反码）</p><p>为方便观看，将反码结果转成原码，有1000 0000（-0原码）。似乎结果是正确的？-0不就是0吗？但是我们要知道在计算机中0还有其它表示0000 0000。这样一来就有了两个二进制表示0，这样就乱套了。</p><p>（3）如果使用补码，有以下结果：</p><p> 0000 0101 （5补码）</p><p> 1111 1011 （-5补码）</p><p>10000 0000 （0）</p><p>我们讨论的是8位的计算，结果得到了9位，这里就可以直接的舍弃第九位。那么久得到0000 0000，记过为0，完全正确。</p><p>所以这就是使用补码的原因。</p><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p>回到MDN官方示例</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">const a &#x3D; 5;     &#x2F;&#x2F; 00000000000000000000000000000101console.log(~a); &#x2F;&#x2F; 11111111111111111111111111111010&#x2F;&#x2F; expected output: -6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>按位非就是将5的补码的每一位进行反转，从而得到反码。</p><p>下面展示一下5的二进制反转后，是如何计算出-6的，切换8位，如下：</p><p>1111 1010（补码）</p><p>-1得到：</p><p>1111 1001（反码）</p><p>取反得到最后结果：</p><p>1000 0110（原码）</p><p><strong>110就是6</strong>了</p><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT</a></p><p><a href="https://www.bilibili.com/video/BV1Y7411t7Fj">https://www.bilibili.com/video/BV1Y7411t7Fj</a></p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 二进制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口安全</title>
      <link href="/2022/06/17/note/qian-duan-an-quan-jie-kou-an-quan/"/>
      <url>/2022/06/17/note/qian-duan-an-quan-jie-kou-an-quan/</url>
      
        <content type="html"><![CDATA[<h2 id="1-接口安全的实现分类"><a href="#1-接口安全的实现分类" class="headerlink" title="1. 接口安全的实现分类"></a>1. 接口安全的实现分类</h2><p>看不懂：对请求响应的数据进行加密和解密</p><p>看不到：对请求接口的类型和参数校验，让自行请求的用户看不到数据</p><h2 id="2-看不懂"><a href="#2-看不懂" class="headerlink" title="2. 看不懂"></a>2. 看不懂</h2><p>使用base64对数据进行编码解码</p><h2 id="3-看不到"><a href="#3-看不到" class="headerlink" title="3. 看不到"></a>3. 看不到</h2><p>（1）鉴权</p><p>不用多说了</p><p>（2）暗号</p><p>例如请求一个接口，用户要上传用户id</p><p>那么可以再加一个暗号参数</p><p>用MD5加密用户id和盐</p><p>拿暗号和用户id作为参数向后端请求</p><p>后端拿到参数后，以同样的规则进行加密得到自己加密的暗号</p><p>两个暗号比较，相等则正常返回</p><p>（3）AK&#x2F;SK</p><p>AK&#x2F;SK算是比较专业的暗号</p><p><strong>AK为Access Key ID，SK为Secret Access Key</strong></p><p>客户端在调用的服务端接口时候，会带上ak以及signature（使用sk对内容进行加密后得出的签名）进行请求，在服务端接收到这个请求的时候，首先会根据ak去数据库里面去找到对应的sk，然后使用sk对请求内容进行加密得到一个签名，然后对比客户端传过来的签名和服务端计算的出来的签名是否一致，如果一致则代表身份认证通过，反之则不通过。</p><p>详细步骤，参看漓江书院api文档，写过一个了</p>]]></content>
      
      
      <categories>
          
          <category> 前端安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> 前端安全 </tag>
            
            <tag> 接口安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scope的原理和样式穿透</title>
      <link href="/2022/06/15/note/vue-mian-shi-scope-de-yuan-li-he-yang-shi-chuan-tou/"/>
      <url>/2022/06/15/note/vue-mian-shi-scope-de-yuan-li-he-yang-shi-chuan-tou/</url>
      
        <content type="html"><![CDATA[<h2 id="1-scope的作用"><a href="#1-scope的作用" class="headerlink" title="1. scope的作用"></a>1. scope的作用</h2><p>默认情况下，写在 .vue 组件中的样式会全局生效，因此很容易造成多个组件之间的样式冲突问题。</p><p>导致组件之间样式冲突的根本原因是：</p><p>（1）单页面应用程序中，所有组件的 DOM 结构，都是基于唯一的 index.html 页面进行呈现的<br>（2）每个组件中的样式，都会影响整个 index.html 页面中的 DOM 元素</p><p>为了解决这个问题有了scope</p><p>在vue文件中的 style 标签上，有一个特殊的属性：scoped。当一个 style 标签拥有 scoped 属性时，它的 CSS 样式就只能作用于当前的组件，也就是说，该样式只能适用于当前组件元素。通过该属性，可以使得组件之间的样式不互相污染。如果一个项目中的所有 style 标签全部加上了scoped，相当于实现了样式的模块化。</p><h2 id="2-scope的原理"><a href="#2-scope的原理" class="headerlink" title="2. scope的原理"></a>2. scope的原理</h2><p>给页面元素添加自定义属性，且修改css为属性选择器</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">h1[data-v-123f24]</span><span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">data-v-123f24</span><span class="token punctuation">></span></span>Vue会编译成这样,这样其它组件的标签没有自定义属性就不会被影响<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-样式穿透的使用"><a href="#3-样式穿透的使用" class="headerlink" title="3. 样式穿透的使用"></a>3. 样式穿透的使用</h2><p>scope导致当前的样式选择器附加属性选择器[data-v-123f24]，当前Vue页面的元素附加这个特定属性[data-v-123f24]。</p><p>这会造成了一个问题：Vue页面所使用的组件中的元素（除了根元素）并没有这个属性[data-v-123f24]，无法应用期望的样式。</p><p>所以有了样式穿透，有好几种写法，会这种就够了：</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token selector">父选择器 /deep/.u-upload__wrap</span><span class="token punctuation">&#123;</span><span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span><span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token selector">.u-upload__wrap__preview</span><span class="token punctuation">&#123;</span><span class="token property">margin-right</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其它写法：</p><p>如果你使用的是css，没有使用css预处理器，则可以使用&gt;&gt;&gt;，&#x2F;deep&#x2F;，::v-deep。<br>如果你使用的是less或者node-sass，那么可以使用&#x2F;deep&#x2F;，::v-deep都可以生效。<br>如果你使用的是dart-sass，那么就不能使用&#x2F;deep&#x2F;，而是使用::v-deep才会生效。</p><h2 id="4-样式穿透的原理"><a href="#4-样式穿透的原理" class="headerlink" title="4. 样式穿透的原理"></a>4. 样式穿透的原理</h2><p>用了样式穿透后，在deep之后的选择器最后就不会加上标识，组件自然能应用样式。</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 卷 </tag>
            
            <tag> vue </tag>
            
            <tag> scss </tag>
            
            <tag> 样式穿透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>批量修改文件</title>
      <link href="/2022/06/09/note/node-gong-ju-pi-liang-xiu-gai-wen-jian/"/>
      <url>/2022/06/09/note/node-gong-ju-pi-liang-xiu-gai-wen-jian/</url>
      
        <content type="html"><![CDATA[<p>对于一些文件命名有重命名的需求，特写了一个node批量处理程序</p><p>为了方便后续管理，拆分成了两个文件</p><p>一个程序文件(index.js)和一个执行文件(main.js)</p><p>index.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> fs <span class="token keyword">from</span> <span class="token string">'fs'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token function-variable function">renameFilesByPath</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//这里没办法使用绝对路径</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token string">'../../Note'</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> dirArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 被替换的内容</span><span class="token keyword">let</span> oldStr <span class="token operator">=</span> <span class="token string">'1_'</span><span class="token punctuation">;</span><span class="token comment">// 替换的新内容</span><span class="token keyword">let</span> newStr <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token comment">//同步获取文件</span><span class="token keyword">const</span> files <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//批量处理</span>files<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">file<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>oldStr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">let</span> newName <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>oldStr<span class="token punctuation">,</span> newStr<span class="token punctuation">)</span>fs<span class="token punctuation">.</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>path<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>files<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>path<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>newName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newName <span class="token operator">+</span> <span class="token string">'重命名成功'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>main.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> tools <span class="token keyword">from</span> <span class="token string">"./tools/index.js"</span><span class="token punctuation">;</span>tools<span class="token punctuation">.</span><span class="token function">renameFilesByPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>:key的作用以及为什么不能使用index作为key</title>
      <link href="/2022/06/05/note/vue-v-bind-key-de-zuo-yong-yi-ji-wei-shi-me-bu-neng-shi-yong-index-zuo-wei-key/"/>
      <url>/2022/06/05/note/vue-v-bind-key-de-zuo-yong-yi-ji-wei-shi-me-bu-neng-shi-yong-index-zuo-wei-key/</url>
      
        <content type="html"><![CDATA[<h2 id="1-key的作用"><a href="#1-key的作用" class="headerlink" title="1. key的作用"></a>1. key的作用</h2><p>key是diff算法中的唯一标识符，加了key之后dom元素就和数据项互相绑定，可以让vue知道dom节点谁是谁，不会出现因为dom元素就地复用出现bug的情况。</p><h3 id="案例讲解"><a href="#案例讲解" class="headerlink" title="案例讲解"></a>案例讲解</h3><p>代码如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>remove<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>remove<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>add<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>用id作为key：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(v,i) of list<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>i<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>v.name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;v.name&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span><span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">list</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"A"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"B"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">103</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"C"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">104</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"D"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"默认"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="情况1，不使用key："><a href="#情况1，不使用key：" class="headerlink" title="情况1，不使用key："></a>情况1，不使用key：</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(v,i) of list<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>v.name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;v.name&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>手动修改控制台dom元素 （控制台元素中的value和界面中input值是分开输入的，下面的例子同是） 1-1</p><p><img src="https://qiniu.guet.link/asset/202212020458273.png"></p><p>显示效果1-2</p><p><img src="https://qiniu.guet.link/asset/202212020459021.png"></p><p>remove第三项数据后，1-3</p><p><img src="https://qiniu.guet.link/asset/202212020500086.png"></p><p>效果1-4</p><p><img src="https://qiniu.guet.link/asset/202212020501131.png"></p><p>发现不使用key的情况下dom元素不会发生新建，但是就地复用了应该删除的元素，并且对应该删除的元素及文本进行了重新渲染。对于其它绑定了动态数据的input组件进行重新渲染，对于其它动态文本没有进行重新渲染。</p><h4 id="情况2，使用index作为key，并且文本绑定动态数据，input绑定静态数据时："><a href="#情况2，使用index作为key，并且文本绑定动态数据，input绑定静态数据时：" class="headerlink" title="情况2，使用index作为key，并且文本绑定动态数据，input绑定静态数据时："></a>情况2，使用index作为key，并且文本绑定动态数据，input绑定静态数据时：</h4><p>代码如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(v,i) of list<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>i<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>默认<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;v.name&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在控制台手动修改dom元素</p><p><img src="https://qiniu.guet.link/asset/202212020415579.png"></p><p>此时效果预览</p><p><img src="https://qiniu.guet.link/asset/202212020415646.png"></p><p>点击remove按钮，期望移除第二个项数据，其他不变</p><p>点击remove按钮后的dom元素</p><p><img src="https://qiniu.guet.link/asset/202212020417693.png"></p><p>此时效果预览</p><p><img src="https://qiniu.guet.link/asset/202212020420841.png"></p><p>发现节点并没有新建，但是删除位置的文本会重新渲染。绑定的静态数据没有发生改变。我们可以得出结论，vue认为key为index（下标为2）的数据发生了改变，所以就重新渲染了此位置文本；而后面的元素节点没有数组做支持就被删除了。</p><h4 id="情况3，使用index作为key时-文本绑定动态数据，input绑定动态数据时："><a href="#情况3，使用index作为key时-文本绑定动态数据，input绑定动态数据时：" class="headerlink" title="情况3，使用index作为key时,文本绑定动态数据，input绑定动态数据时："></a>情况3，使用index作为key时,文本绑定动态数据，input绑定动态数据时：</h4><p>代码如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(v,i) of list<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>i<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>v.name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;v.name&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在控制台手动修改dom元素 3-1</p><p><img src="https://qiniu.guet.link/asset/202212020446604.png"></p><p>此时效果预览图 3-2</p><p><img src="https://qiniu.guet.link/asset/202212020447468.png"></p><p>点击remove按钮，期望移除第二个项数据，其他不变</p><p>点击remove按钮后的dom元素 3-3</p><p><img src="https://qiniu.guet.link/asset/202212020448993.png"></p><p>此时效果预览 3-4</p><p><img src="https://qiniu.guet.link/asset/202212020448240.png"></p><p>发现节点并没有新建，但是删除位置的文本和所有绑定动态数据input进行了重新渲染。得出结论vue对于绑定动态数据节点的处理是不一样的，对于input这个可在界面上更改的节点会对其value进行重新渲染，而span文本这个不会重新渲染。</p><h4 id="情况4，使用id作为key时-文本绑定动态数据，input绑定动态数据时："><a href="#情况4，使用id作为key时-文本绑定动态数据，input绑定动态数据时：" class="headerlink" title="情况4，使用id作为key时,文本绑定动态数据，input绑定动态数据时："></a>情况4，使用id作为key时,文本绑定动态数据，input绑定动态数据时：</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(v,i) of list<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>v.id<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>v.name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;v.name&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>直接删除第一项，看对后面元素的影响</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在控制台手动修改dom元素 4-1</p><p><img src="https://qiniu.guet.link/asset/202212020541414.png"></p><p>此时效果预览图 4-2</p><p><img src="https://qiniu.guet.link/asset/202212020541774.png"></p><p>点击remove按钮后的dom元素 4-3</p><p><img src="https://qiniu.guet.link/asset/202212020543793.png"></p><p>效果图</p><p><img src="https://qiniu.guet.link/asset/202212020543702.png"></p><p>这时发现除了绑定了动态数据的imput value发生了重绘，没有其它改变。</p><h2 id="2-不用key行吗？"><a href="#2-不用key行吗？" class="headerlink" title="2. 不用key行吗？"></a>2. 不用key行吗？</h2><p>行。如以下官方例子，在切换登录方式时就不用key就很好：</p><p><a href="https://v2.cn.vuejs.org/v2/guide/conditional.html#%E7%94%A8-key-%E7%AE%A1%E7%90%86%E5%8F%AF%E5%A4%8D%E7%94%A8%E7%9A%84%E5%85%83%E7%B4%A0">用 key 管理可复用的元素</a></p><p>当不用key时，vue会最大限度的节省dom元素开支。</p><p>又如分页每页5条，如果不加key，diff时反而可以复用结构，只改变值，不涉及到节点的创建删除，效率更好。</p><p>key的时候vue不知道你删了哪条元素吗？</p><p>实际上并不是，通过上面的例子可以得知vue会刷新被删除数组项之后的数据，而被删除之前的数据是不会被刷新的（也就是就地复用）。</p><h2 id="3-为什么key不推荐用index"><a href="#3-为什么key不推荐用index" class="headerlink" title="3. 为什么key不推荐用index"></a>3. 为什么key不推荐用index</h2><p>因为index不能保证与dom元素进行唯一绑定，index会随着元素变化而变化，这实际上和就地复用一样（vue发现被删除的数据项key不变，数据改变，进行patch数据）。</p><p>在使用非文本节点的组件，且这个组件<strong>没有依赖于响应式的props</strong>，此时使用index作为key，那么此时对于列表的<strong>删除操作</strong>会导致视图错乱。</p><p>例子：在第二项数据上输入“静态数据二”，然后点击删除会发现“静态数据二”dom依然存在，而最后一项的dom消失了。</p><p><a href="https://codesandbox.io/s/elastic-lewin-7f15gy?file=/src/App.vue">https://codesandbox.io/s/elastic-lewin-7f15gy?file=/src/App.vue</a></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><ul><li>key会与元素互相绑定。如果不使用key，vue采用就地复用的策略。例如ABC三个元素，你删了B的数据，那么实际上它会删掉C而保留B，但是你用key就不一样了，删了B它会保留A和C。</li><li>简单的渲染不必加key，利用就地复用反而能减少dom开支提高性能。</li><li>而长列表渲染就要加key了，因为“就地复用”可能会导致视图错误。</li><li>当你要去写key值的时候，最好不要用index，因为那样和就地复用没啥区别。</li></ul><h2 id="5-参考"><a href="#5-参考" class="headerlink" title="5. 参考"></a>5. 参考</h2><p><a href="https://v2.cn.vuejs.org/v2/api/#key">https://v2.cn.vuejs.org/v2/api/#key</a></p><p><a href="https://v2.cn.vuejs.org/v2/guide/conditional.html#%E7%94%A8-key-%E7%AE%A1%E7%90%86%E5%8F%AF%E5%A4%8D%E7%94%A8%E7%9A%84%E5%85%83%E7%B4%A0">https://v2.cn.vuejs.org/v2/guide/conditional.html#%E7%94%A8-key-%E7%AE%A1%E7%90%86%E5%8F%AF%E5%A4%8D%E7%94%A8%E7%9A%84%E5%85%83%E7%B4%A0</a></p><p><a href="https://juejin.cn/post/6844904053344829453#heading-7">https://juejin.cn/post/6844904053344829453#heading-7</a></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> vue </tag>
            
            <tag> key </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路由模式有几种</title>
      <link href="/2022/06/03/note/vue-mian-shi-lu-you-mo-shi-you-ji-chong/"/>
      <url>/2022/06/03/note/vue-mian-shi-lu-you-mo-shi-you-ji-chong/</url>
      
        <content type="html"><![CDATA[<h2 id="1-路由的种类"><a href="#1-路由的种类" class="headerlink" title="1. 路由的种类"></a>1. 路由的种类</h2><p>常用有两种 history、hash</p><h2 id="2-路由的区别："><a href="#2-路由的区别：" class="headerlink" title="2. 路由的区别："></a>2. 路由的区别：</h2><h3 id="2-1-表现形式："><a href="#2-1-表现形式：" class="headerlink" title="2.1 表现形式："></a>2.1 表现形式：</h3><p>hash 有#</p><p>history 是普通的url</p><h3 id="2-2-请求形式："><a href="#2-2-请求形式：" class="headerlink" title="2.2 请求形式："></a>2.2 请求形式：</h3><p>hash 请求文档不会携带#后的字符串</p><p>history 请求文档是完整的url</p><h3 id="2-3-调式使用上："><a href="#2-3-调式使用上：" class="headerlink" title="2.3 调式使用上："></a>2.3 调式使用上：</h3><p>前端调试要用hash,因为history要配置nginx</p><p>#\</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> vue-router </tag>
            
            <tag> 路由模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域请求的三种方案</title>
      <link href="/2022/06/03/note/qian-duan-bian-cheng-kua-yu-qing-qiu-de-san-chong-fang-an/"/>
      <url>/2022/06/03/note/qian-duan-bian-cheng-kua-yu-qing-qiu-de-san-chong-fang-an/</url>
      
        <content type="html"><![CDATA[<h1 id="1-什么是跨域？"><a href="#1-什么是跨域？" class="headerlink" title="1.什么是跨域？"></a>1.什么是跨域？</h1><p>指的是浏览器执行不同源的脚本的行为，而在目前的前后端分离的开发工作中跨域访问是不可避免的。<br>\</p><h1 id="2-什么是同源？"><a href="#2-什么是同源？" class="headerlink" title="2.什么是同源？"></a>2.什么是同源？</h1><p>指的是 <strong>协议、域名、端口</strong> 这三者相同 ，浏览器拥有同源策略</p><p><br>例如：<a href="http://segmentfault.com/">http://segmentfault.com/</a> 这个网址，协议是http:&#x2F;&#x2F;，域名是 segmentfault.com，端口是80。<br><br>那么也就是说 https 请求是就是跨域，反过来也是跨域。<br><br>如果有的网站可以，那一定是设置了 cors。</p><h1 id="3-实现跨域请求的方式有哪些？"><a href="#3-实现跨域请求的方式有哪些？" class="headerlink" title="3.实现跨域请求的方式有哪些？"></a>3.实现跨域请求的方式有哪些？</h1><h2 id="3-1-JSONP"><a href="#3-1-JSONP" class="headerlink" title="3.1 JSONP"></a>3.1 JSONP</h2><p>script标签设计的时候就允许请求脚本，用这个方法跨域就是jsonp，</p><h3 id="3-1-1-步骤"><a href="#3-1-1-步骤" class="headerlink" title="3.1.1 步骤"></a>3.1.1 步骤</h3><ol><li>script src 接口 访问</li><li>后端返回 json 数据</li><li>前端执行返回的 JavaScript代码</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">fucntion <span class="token function">bb</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">echo</span> <span class="token string double-quoted-string">"bb('咸鱼翻身,还是咸鱼')"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.jQuery封装了jsonp</p><pre class="line-numbers language-none"><code class="language-none">$.ajax(&#123;    type: &quot;get&quot;,    url: &quot;http:&#x2F;&#x2F;localhost:3000&#x2F;test&#x2F;JSONP&quot;, &#x2F;&#x2F; 这个就是不同于当前域的一个URL地址，这里单纯演示，所以同域    dataType: &quot;jsonp&quot;,    jsonpCallback: &quot;JSONPCallback&quot;, &#x2F;&#x2F; 指定回调函数，这里名字可以为其他任意你喜欢的,这里传参callback:JSONPCallback，也可以在下面参数指定键值    data: &#123;        name: &#39;jxq&#39;,        email: &#39;feichexia@yahoo.com.cn&#39;,    &#125;,    success: function (json) &#123;        alert(json);    &#125;&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-1-2-前端如何传参"><a href="#3-1-2-前端如何传参" class="headerlink" title="3.1.2 前端如何传参"></a>3.1.2 前端如何传参</h3><p>利用url传参，&amp;分割参数，格式如下</p><pre class="line-numbers language-none"><code class="language-none">接口?key&#x3D;&#39;aabb&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-1-3-为什么叫jsonp"><a href="#3-1-3-为什么叫jsonp" class="headerlink" title="3.1.3 为什么叫jsonp"></a>3.1.3 为什么叫jsonp</h3><p>因为真实数据是json格式，p就是padding填充的意思，指外层包裹着json的函数。</p><p>4.返回数据的最后格式是什么样？<br>json【函数【json真实数据】】</p><h3 id="3-1-4-弊端"><a href="#3-1-4-弊端" class="headerlink" title="3.1.4 弊端"></a>3.1.4 弊端</h3><p>jsonp是利用script事项,那么只能使用get请求</p><h3 id="3-1-4-与CORS区别"><a href="#3-1-4-与CORS区别" class="headerlink" title="3.1.4 与CORS区别"></a>3.1.4 与CORS区别</h3><p><a href="https://www.it1352.com/2823193.html">默认带cookie，而CORS需要客户端和服务端配置</a></p><h2 id="3-2-CORS"><a href="#3-2-CORS" class="headerlink" title="3.2 CORS"></a>3.2 CORS</h2><p>CORS，全称Cross-Origin Resource Sharing ，是一种允许当前域（domain）的资源（比如html&#x2F;js&#x2F;web service）被其他域（domain）的脚本请求访问的机制，通常由于同域安全策略（the same-origin security policy）浏览器会禁止这种跨域请求。</p><h3 id="3-2-1-步骤"><a href="#3-2-1-步骤" class="headerlink" title="3.2.1 步骤"></a>3.2.1 步骤</h3><p>1.同源策略由浏览器产生，当前端跨域请求时，浏览器会在响应头上检查origin判断是否同源。<br>2.需要后端配置响应头origin</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">app.all(&quot;*&quot;, function (req, res, next) &#123;  &#x2F;&#x2F;设置允许跨域的域名，*代表允许任意域名跨域  res.header(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);  &#x2F;&#x2F;允许的header类型  res.header(&quot;Access-Control-Allow-Headers&quot;, &quot;*&quot;);  &#x2F;&#x2F;保持跨域时的 Cookie  res.header(&quot;Access-Control-Allow-Credentials&quot;, true);  &#x2F;&#x2F;跨域允许的请求方式  res.header(&quot;Access-Control-Allow-Methods&quot;, &quot;*&quot;);  &#x2F;&#x2F;字符集类型  res.header(&quot;Content-Type&#39;: &#39;*&quot;);  if (req.method.toLowerCase() &#x3D;&#x3D; &#39;options&#39;)    res.send(200);  &#x2F;&#x2F;让options尝试请求快速结束  &#x2F;&#x2F;option请求是用于询问所访问的服务器支持什么样的http访问方式。  &#x2F;&#x2F;而uniapp访问有两次，一次大概是看看这个服务器是否通的，也就是options请求，  &#x2F;&#x2F;这个请求通了，就会发送我们真实请求，如果没通，就不会发送我们的请求。  else    next();&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-2-前端如何传参"><a href="#3-2-2-前端如何传参" class="headerlink" title="3.2.2 前端如何传参"></a>3.2.2 前端如何传参</h3><p>前端使用和正常请求无二致，CORS是完全由后端来配置</p><h2 id="3-3-服务器代理（正向代理与反向代理）"><a href="#3-3-服务器代理（正向代理与反向代理）" class="headerlink" title="3.3 服务器代理（正向代理与反向代理）"></a>3.3 服务器代理（正向代理与反向代理）</h2><p>（1）正向代理</p><p>当浏览器访问不了服务端时，可以通过一个代理服务器访问目标服务器。目标服务器接受到代理服务器的请求，将结果返回给代理服务器，<br>再由代理服务器将结果返回给浏览器，这个过程称之为正向代理。正向代理，目标服务器是不知道真正的访问者是谁的，我们平时见到的科学上网<br>工具使用的就是正向代理。比如，无法访问google，使用科学上网工具的代理服务器进行间接访问。</p><p>（2）反向代理</p><p>当浏览器访问<a href="http://www.baidu.com时,背后可能有成千上万的服务器为浏览器服务.浏览器不需要知道背后是哪台服务器为其服务,只需要知道反代理服务器是/">www.baidu.com时，背后可能有成千上万的服务器为浏览器服务。浏览器不需要知道背后是哪台服务器为其服务，只需要知道反代理服务器是</a><br><a href="http://www.baidu.com就行.反代理服务器会将浏览器请求转发到真实的服务器.我们常用的nginx就是性能优异的反向代理服务器,可以用来做负载均衡./">www.baidu.com就行。反代理服务器会将浏览器请求转发到真实的服务器。我们常用的Nginx就是性能优异的反向代理服务器，可以用来做负载均衡。</a></p><p>（3）总结</p><p>服务对象不同。正向代理的服务对象是浏览器（客户端），而反向代理的服务对象是服务器（服务端）。</p><p>浏览器配置不同。正向代理，浏览器需要指明访问的目标服务器，而反向代理，浏览器只关注代理服务器。</p><p>（4）<strong>反向代理跨域</strong></p><p><a href="https://juejin.cn/post/6844904033874886663">原理解析：浏览器是禁止跨域的，但是服务端不禁止</a></p><p><a href="https://cli.vuejs.org/zh/config/#devserver-proxy">在Vue中的应用：vue.config.js可以配置代理服务器</a></p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">module.exports &#x3D; &#123;  devServer: &#123;    proxy: &#39;http:&#x2F;&#x2F;localhost:4000&#39;&#x2F;&#x2F;代理服务器会将请求指向 http:&#x2F;&#x2F;localhost:4000  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：Vue代理基于node服务器，所以只能在开发使用。生产跨域还是乖乖CORS。</p><p><a href="https://cli.vuejs.org/zh/config/#devserver-proxy">https://cli.vuejs.org/zh/config/#devserver-proxy</a></p><p>（5）误区：</p><p>Vue跨域配置是正向代理？</p><p>我理解正向代理代理的是客户端，并且客户端需要指定目标服务器；<br>反向代理代理的是服务端，由代理服务器指定目标服务器，客户端无需做任何配置；<br>Vue中用webpack启动了本地服务器，在这里相当于代理服务器，并在这个代理服务器上配置了目标服务器地址，客户端所有请求都发送到代理服务器上，并且不知道自己的这个请求将会由代理服务器转发到真正服务器上，也就是对客户端来说“代理”这个动作是不可见的，所以属于反向代理。（而在正向代理中客户端必须明确指定自己要代理到哪个目标服务器上）</p><h1 id="4-除了访问限制，浏览器还有什么安全机制"><a href="#4-除了访问限制，浏览器还有什么安全机制" class="headerlink" title="4. 除了访问限制，浏览器还有什么安全机制"></a>4. 除了访问限制，浏览器还有什么安全机制</h1><h2 id="4-1-预检请求（实际上也是同源策略）"><a href="#4-1-预检请求（实际上也是同源策略）" class="headerlink" title="4.1 预检请求（实际上也是同源策略）"></a>4.1 预检请求（实际上也是同源策略）</h2><p>请求有简单请求和复杂请求</p><p>简单请求：</p><p>请求方法是以下三种方法之一：<br>HEAD<br>GET<br>POST<br>HTTP的请求头信息不超出以下几种字段：<br>Accept<br>Accept-Language<br>Content-Language<br>Last-Event-ID<br>Content-Type：只限于三个值application&#x2F;x-www-form-urlencoded、multipart&#x2F;form-data、text&#x2F;plain</p><p><a href="https://blog.csdn.net/yexudengzhidao/article/details/124342081">https://blog.csdn.net/yexudengzhidao/article/details/124342081</a></p><p><br>以跨域为前提，当前端自定义header,或是发出危险请求，如put、delete、patch时，浏览会对服务器发出预检请求，请求类型为（option）。<br>预检请求会判断服务器是否支持当前请求。<br>需要注意的是简单请求是不会发出预检请求的。<br>例如，如果清空购物车是个简单请求能做到的事情的话，那同源策略很难帮到你，它只能阻止前端拿到数据，但服务器方法早已执行。毕竟写个img标签也是能让你请求的。<br>实际的操作都是走token 的模式的<br>\</p><h1 id="5-为什么只有浏览器有同源策略"><a href="#5-为什么只有浏览器有同源策略" class="headerlink" title="5. 为什么只有浏览器有同源策略"></a>5. 为什么只有浏览器有同源策略</h1><p><a href="https://www.zhihu.com/question/68203803/answer/1562461292">知乎回答</a><br>纠正，同源策略是针对浏览器没错，但是其它平台想Android也有自己的安全策略，只是它的策略没有体现在api上而已。例如，安卓APP与APP之间的资源不是可以随便访问。</p><p>因为，如果用户登录了一个钓鱼的网站，输入账号密码提交，那么钓鱼网站在没有同源策略限制的情况下就能获取一些用户私密信息和进行一些危险操作。</p><p>又因为，浏览器向一个域发起请求时总是会带上这个域及其父域的cookies，于是别有用心的人就可以诱骗你进入一个陌生页面，并向一些你可能登录过的网站发请求，盗取你的信息或做一些敏感操作。（注意，这里不是说钓鱼网站获取cookie，而是通过发起请求，请求自动带上cookie。cookie是有域限制的）</p><p>浏览器是一个公共空间，存在着很多钓鱼网站，而APP是一个独立的区域，没有这样的问题。</p>]]></content>
      
      
      <categories>
          
          <category> 前端编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> 前端编程 </tag>
            
            <tag> 跨域 </tag>
            
            <tag> CORS </tag>
            
            <tag> JSONP </tag>
            
            <tag> 反代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工厂函数</title>
      <link href="/2022/05/30/note/js-gai-nian-g-gong-han-han-shu/"/>
      <url>/2022/05/30/note/js-gai-nian-g-gong-han-han-shu/</url>
      
        <content type="html"><![CDATA[<p>工厂函数:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    obj<span class="token punctuation">.</span>name <span class="token operator">=</span> name    obj<span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token keyword">return</span> obj<span class="token punctuation">&#125;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token string">'carl'</span><span class="token punctuation">,</span><span class="token string">'28'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构造函数:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">&#125;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Constructor</span><span class="token punctuation">(</span><span class="token string">'carl'</span><span class="token punctuation">,</span><span class="token string">'28'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构造函数与工厂函数之间差异：</p><ul><li>工厂函数的使用不借助 new，而构造函数需要</li><li>工厂函数没有使用 this</li><li>工厂函数需要 明确 返回新对象，而构造函数不需要</li></ul><p>还可以看一下new一个函数的过程</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> 工厂函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&amp;与&amp;&amp;逻辑与短路与按位与</title>
      <link href="/2022/05/28/note/js-gai-nian-yu-luo-ji-yu-duan-lu-yu-an-wei-yu/"/>
      <url>/2022/05/28/note/js-gai-nian-yu-luo-ji-yu-duan-lu-yu-an-wei-yu/</url>
      
        <content type="html"><![CDATA[<p>&amp;&amp;( 逻辑与) ||(逻辑或) 是逻辑运算符<br>&amp; (按位与)  | (按位或) 是位运算符  </p><h2 id="1-逻辑运算符"><a href="#1-逻辑运算符" class="headerlink" title="1. 逻辑运算符"></a>1. 逻辑运算符</h2><p>作用：做条件判断</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">console.log(true||false);       &#x2F;&#x2F; trueconsole.log(false||true);       &#x2F;&#x2F; trueconsole.log(true||true);        &#x2F;&#x2F; trueconsole.log(false||false);      &#x2F;&#x2F; false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>只要 &amp;&amp; 前面是 false，无论 &amp;&amp; 后面是 true 还是 false，结果都将返 &amp;&amp; 前面的值;<br>只要 &amp;&amp; 前面是 true，无论 &amp;&amp; 后面是 true 还是 false，结果都将返 &amp;&amp; 后面的值;<br>（因为&amp;&amp;前面为假时 不再判断第二个条件）</p><p>只要 || 前面为 false,不管 || 后面是 true 还是 false，都返回 || 后面的值。<br>只要 || 前面为 true,不管 || 后面是 true 还是 false，都返回 || 前面的值。<br>（因为||前面为真时 不再判断第二个条件）</p><p>因为&amp;&amp;和||的短路性质，所以又叫做<strong>短路运算符</strong></p><h2 id="2-位运算符"><a href="#2-位运算符" class="headerlink" title="2. 位运算符"></a>2. 位运算符</h2><p>作用：位运算、条件判断</p><p>使用较少</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">console.log(1&amp;2);              &#x2F;&#x2F; 0console.log(false|true);       &#x2F;&#x2F; 1console.log(true|true);        &#x2F;&#x2F; 1console.log(false|false);      &#x2F;&#x2F; 0console.log(true&amp;true);      &#x2F;&#x2F; 1console.log(true&amp;false);      &#x2F;&#x2F; 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>按位与 ： 1&amp;2&#x3D;0，二进制按位与操作01和10结果为00</p><p>按位或 ： 1|2&#x3D;3，二进制按位或操作01和10结果为11</p><h2 id="3-其它语言差异"><a href="#3-其它语言差异" class="headerlink" title="3. 其它语言差异"></a>3. 其它语言差异</h2><h3 id="3-1-Java"><a href="#3-1-Java" class="headerlink" title="3.1 Java"></a>3.1 Java</h3><p>位运算在判断语句只能使用布尔值，不能使用。JS和PHP接收非布尔值类型。</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&#x2F;&#x2F;这里报错if(1&amp;2)&#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-2-PHP"><a href="#3-2-PHP" class="headerlink" title="3.2 PHP"></a>3.2 PHP</h3><p>可以使用短路机制，作逻辑判断。JS不行。</p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">&lt;?php$a &#x3D;2;&#x2F;&#x2F;使用&amp;&amp;时不会执行$a &#x3D;3if(1 &#x3D;&#x3D; 2 &amp;&amp; $a &#x3D;3)&#123;    echo($a);&#125;else &#123;    echo($a);&#125;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> 逻辑运算符 </tag>
            
            <tag> 位运算符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Object.prototype.toString与toString，为什么不直接使用toString方法</title>
      <link href="/2022/05/27/note/js-mian-shi-t-wei-shi-me-bu-zhi-jie-shi-yong-tostring/"/>
      <url>/2022/05/27/note/js-mian-shi-t-wei-shi-me-bu-zhi-jie-shi-yong-tostring/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token comment">//Object.prototype.toString === toString true </span>        <span class="token comment">//但是直接使用函数toString可能会导致调用错误，例如如果定义了一个toString函数，那么引用都就是这个函数了</span>        <span class="token comment">//注意，直接调用toString()方法这里不可以理解成为全局作用域调用toString()方法，即window.toString();</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给字符串新增方法</title>
      <link href="/2022/05/18/note/js-mian-shi-g-gei-zi-fu-chuan-xin-zeng-fang-fa/"/>
      <url>/2022/05/18/note/js-mian-shi-g-gei-zi-fu-chuan-xin-zeng-fang-fa/</url>
      
        <content type="html"><![CDATA[<p>其实就是在原型上添加方法，其它类型同理</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">String</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">addPrefix</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> str <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token comment">//自定义前缀加上调用的字符串 hello.world</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'world'</span><span class="token punctuation">.</span><span class="token function">addPrefix</span><span class="token punctuation">(</span><span class="token string">'hello '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> 原型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-SPA是什么和SPA有什么缺点</title>
      <link href="/2022/05/14/note/vue-spa-shi-shi-me-he-spa-you-shi-me-que-dian/"/>
      <url>/2022/05/14/note/vue-spa-shi-shi-me-he-spa-you-shi-me-que-dian/</url>
      
        <content type="html"><![CDATA[<p>SPA 单页面应用</p><p>优点：</p><p>1、良好的交互体验；</p><p>2、前后端分离，减少开发效率；</p><p>3、架构清晰；</p><p>4、减轻服务器的压力。</p><p>缺点：</p><p>1、<a href="https://www.zhihu.com/question/416192007">对SEO并不友好</a>；</p><p>2、可能出现首屏加载时间过长的问题；</p><p>3、页面复杂度提高，复杂逻辑程度成倍。</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>条件编译</title>
      <link href="/2022/05/14/note/uniapp-gai-nian-tiao-jian-bian-yi/"/>
      <url>/2022/05/14/note/uniapp-gai-nian-tiao-jian-bian-yi/</url>
      
        <content type="html"><![CDATA[<p>条件编译就是针对不同平台的混合开发，使用条件语句进行区分</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">#ifdef <span class="token constant">APP</span><span class="token operator">-</span><span class="token constant">PLUS</span><span class="token comment">// 需条件编译的代码</span>#endif<span class="token comment">// 仅出现在 App 平台下的代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Android 和 iOS 平台不支持通过条件编译来区分，<br>如果需要区分 Android、iOS 平台，<br>请通过调用 uni.getSystemInfo 来获取平台信息。支持ifios、ifAndroid代码块，可方便编写判断。</p>]]></content>
      
      
      <categories>
          
          <category> uniapp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uniapp </tag>
            
            <tag> 条件编译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生命周期</title>
      <link href="/2022/05/12/note/uniapp-gai-nian-chang-jian-sheng-ming-zhou-qi/"/>
      <url>/2022/05/12/note/uniapp-gai-nian-chang-jian-sheng-ming-zhou-qi/</url>
      
        <content type="html"><![CDATA[<h2 id="1-应用生命周期"><a href="#1-应用生命周期" class="headerlink" title="1. 应用生命周期"></a>1. 应用生命周期</h2><p>onLaunch当uni-app 初始化完成时触发（全局只触发一次）<br>onShow当 uni-app 启动，或从后台进入前台显示<br>onHide当 uni-app 从前台进入后台</p><h2 id="2-页面生命周期"><a href="#2-页面生命周期" class="headerlink" title="2. 页面生命周期"></a>2. 页面生命周期</h2><p>onLoad监听页面加载，其参数为上个页面传递的数据，参数类型为 Object（用于页面传参），参考示例<br>onShow监听页面显示。页面每次出现在屏幕上都触发，包括从下级页面点返回露出当前页面<br>onReady监听页面初次渲染完成。注意如果渲染速度快，会在页面进入动画完成前触发<br>onHide监听页面隐藏<br>onUnload监听页面卸载</p><h2 id="3-组件生命周期（同vue）https-cn-vuejs-org-v2-api-updated"><a href="#3-组件生命周期（同vue）https-cn-vuejs-org-v2-api-updated" class="headerlink" title="3. 组件生命周期（同vue）https://cn.vuejs.org/v2/api/#updated"></a>3. 组件生命周期（同vue）<a href="https://cn.vuejs.org/v2/api/#updated">https://cn.vuejs.org/v2/api/#updated</a></h2><p>beforeCreate在实例初始化之前被调用。详见(opens new window)<br>created在实例创建完成后被立即调用。详见(opens new window)<br>beforeMount在挂载开始之前被调用。详见(opens new window)<br>mounted挂载到实例上去之后调用。详见 (opens new window)注意：此处并不能确定子组件被全部挂载，如果需要子组件完全挂载之后在执行操作可以使用$nextTickVue官方文档(opens new window)<br>beforeUpdate数据更新时调用，发生在虚拟 DOM 打补丁之前。详见(opens new window)仅H5平台支持<br>updated由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。详见(opens new window)仅H5平台支持<br>beforeDestroy实例销毁之前调用。在这一步，实例仍然完全可用。详见(opens new window)<br>destroyedVue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。详见</p>]]></content>
      
      
      <categories>
          
          <category> uniapp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uniapp </tag>
            
            <tag> 生命周期 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>画一个三角形</title>
      <link href="/2022/05/11/note/html-css-mian-shi-hua-yi-ge-san-jiao-xing/"/>
      <url>/2022/05/11/note/html-css-mian-shi-hua-yi-ge-san-jiao-xing/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>画一个三角形<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token comment">/* 由于元素内容没有宽高，所以只有设置任意不同轴上的border才能构成图形 */</span>        <span class="token selector">div</span> <span class="token punctuation">&#123;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">border-top</span><span class="token punctuation">:</span> 100px solid transparent<span class="token punctuation">;</span>            <span class="token comment">/* 设置100px border 也就是向上凸起100px 由于元素没有宽高单设置时没有实际作用 */</span>            <span class="token property">border-left</span><span class="token punctuation">:</span> 100px solid pink<span class="token punctuation">;</span>            <span class="token comment">/* 设置100px border 也就是向左凸起100px 由于元素没有宽高单设置时没有实际作用 */</span>            <span class="token comment">/* 构成一个正方形 top和left平分 隐藏一边就构成了一个三角形*/</span>            <span class="token comment">/* border-right: 100px solid transparent;            border-bottom: 100px solid transparent; */</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> html&amp;css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 卷 </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现H5录音</title>
      <link href="/2022/05/10/note/uniapp-xiang-mu-shi-xian-h5-lu-yin/"/>
      <url>/2022/05/10/note/uniapp-xiang-mu-shi-xian-h5-lu-yin/</url>
      
        <content type="html"><![CDATA[<h2 id="uniapp是不支持h5录音的"><a href="#uniapp是不支持h5录音的" class="headerlink" title="uniapp是不支持h5录音的"></a>uniapp是不支持h5录音的</h2><p>使用别人造好的轮子<br><a href="https://blog.csdn.net/weixin_44020340/article/details/122100100">https://blog.csdn.net/weixin_44020340/article/details/122100100</a></p>]]></content>
      
      
      <categories>
          
          <category> uniapp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跳出多层循环</title>
      <link href="/2022/05/01/note/js-zong-jie-tiao-chu-duo-ceng-xun-huan/"/>
      <url>/2022/05/01/note/js-zong-jie-tiao-chu-duo-ceng-xun-huan/</url>
      
        <content type="html"><![CDATA[<p>1、throw new Error()<br>优点：可以中断循环执行；适用于各种形式（for循环，forEach循环等）<br>缺点：相当于强制抛错中断执行，不仅终止了循环，后续代码也不再执行</p><p>废话不多说，上例子，找出 【找出爱吃荔枝的人】 的人：</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">const arr &#x3D; [    &#123;        name: &#39;小周&#39;,        fruit: [&#39;苹果&#39;, &#39;香蕉&#39;]    &#125;,    &#123;        name: &#39;小蓝&#39;,        fruit: [&#39;梨&#39;, &#39;荔枝&#39;]    &#125;,    &#123;        name: &#39;小红&#39;,        fruit: [&#39;樱桃&#39;, &#39;西瓜&#39;]    &#125;,]console.log(&quot;开始查找爱吃荔枝的人：&quot;)let person;for (let i &#x3D; 0; i &lt; arr.length; i++) &#123;    for (let j &#x3D; 0; j &lt; arr[i].fruit.length; j++) &#123;        console.log(&quot;已找到：&quot;,&#96;$&#123;arr[i].name&#125;爱吃$&#123;arr[i].fruit[j]&#125;&#96;)            if (arr[i].fruit[j] &#x3D;&#x3D;&#x3D; &#39;荔枝&#39;) &#123;                    person &#x3D; arr[i].name                        &#x2F;&#x2F; 在这里抛出异常            throw new Error(&#39;程序终止&#39;)        &#125;                    &#125;&#125;console.log(&#39;仍然执行。爱吃荔枝的人是：&#39;, person)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、return语句<br>优点：可以中断循环执行，对于函数很方便；<br>缺点：只能在函数使用，不能再foreach、map等回调函数中发生作用，会阻断后续运行。</p><p>代码略</p><p>3、为循环命名，跳出对应的循环<br>优点：多层循环时非常灵敏（想跳出哪一层，就跳出哪一层）；循环体后面的代码仍然执行<br>缺点：必须是for循环！</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">const arr &#x3D; [    &#123;        name: &#39;小周&#39;,        fruit: [&#39;苹果&#39;, &#39;香蕉&#39;]    &#125;,    &#123;        name: &#39;小蓝&#39;,        fruit: [&#39;梨&#39;, &#39;荔枝&#39;]    &#125;,    &#123;        name: &#39;小红&#39;,        fruit: [&#39;樱桃&#39;, &#39;西瓜&#39;]    &#125;,]console.log(&quot;开始查找爱吃荔枝的人：&quot;)let person;outside:for (let i &#x3D; 0; i &lt; arr.length; i++) &#123;    inside:for (let j &#x3D; 0; j &lt; arr[i].fruit.length; j++) &#123;        console.log(&quot;已找到：&quot;,&#96;$&#123;arr[i].name&#125;爱吃$&#123;arr[i].fruit[j]&#125;&#96;)            if (arr[i].fruit[j] &#x3D;&#x3D;&#x3D; &#39;荔枝&#39;) &#123;                    person &#x3D; arr[i].name                        &#x2F;&#x2F;跳出循环            break outside;        &#125;                    &#125;&#125;console.log(&#39;仍然执行。爱吃荔枝的人是：&#39;, person)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> 循环 </tag>
            
            <tag> 遍历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宏任务与微任务（事件循环）</title>
      <link href="/2022/04/30/note/js-mian-shi-h-hong-ren-wu-yu-wei-ren-wu-shi-jian-xun-huan/"/>
      <url>/2022/04/30/note/js-mian-shi-h-hong-ren-wu-yu-wei-ren-wu-shi-jian-xun-huan/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概念："><a href="#1-概念：" class="headerlink" title="1. 概念："></a>1. 概念：</h2><p>事件循环指的就是浏览器执行js的一个机制，其机制就是js引擎在不停的询问事件队列是否有可执行的任务(事件)，将任务放到执行栈的机制</p><p>过程如下：</p><p>script宏任务&#x3D;》同步代码&#x3D;》微任务》&#x3D;》渲染&#x3D;》宏任务</p><h2 id="2-宏微任务"><a href="#2-宏微任务" class="headerlink" title="2. 宏微任务"></a>2. 宏微任务</h2><p>异步任务被拆分成宏微任务</p><h3 id="2-1-宏任务"><a href="#2-1-宏任务" class="headerlink" title="2.1 宏任务"></a>2.1 宏任务</h3><p>常见的宏任务有：</p><p>（1）定时器setTimeout和setInterval</p><p>（2）IO输入输出 网络请求</p><p>（3）注册的事件回调，比如click事件的回调</p><p>（4）整个script标签中的代码，也就是全局的代码，算一个宏任务</p><h3 id="2-2-微任务"><a href="#2-2-微任务" class="headerlink" title="2.2 微任务"></a>2.2 微任务</h3><p>常见的微任务有：</p><p>（1）promise.then</p><p>（2）promise.cathch</p><p>（3）promise.finally</p><p>（4）queuemicrotask </p><p>（5）MutationObsever</p><h2 id="3-示例"><a href="#3-示例" class="headerlink" title="3. 示例"></a>3. 示例</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 阻塞 --></span>    <span class="token comment">&lt;!-- &lt;script>        startTime = new Date().getTime()        do &#123;            endTime = new Date().getTime()            console.log(endTime - startTime);        &#125; while (endTime - startTime &lt;= 2000)    &lt;/script> --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://zhuanlan.zhihu.com/p/78113300<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>查看<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./js/jquery-1.10.2.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./assets/js/axios/axios-0.21.1.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./js/layer/layer.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">// 尽量不要讨论渲染，渲染这个步骤不一定 可能和运行环境有关 window谷歌浏览器有时会宏任务alert阻塞</span>        <span class="token comment">// js操作dom的渲染，有时候又不阻塞，甚至不加window.onload，初始的渲染都会阻塞</span>        <span class="token comment">// 而火狐不管你alert用在哪里都不阻塞 只要不是同步代码的alert都不回阻塞</span>    <span class="token comment">// import App from './common.js';</span>    <span class="token comment">//这里如果不加window.onload html渲染会暂停（alert导致页面元素丢失并不是阻塞的问题），等待js执行结束 https://www.cnblogs.com/songyao666/p/16112629.html</span>    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string-property property">"User"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token string-property property">"user_name"</span><span class="token operator">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span> <span class="token string-property property">"password"</span><span class="token operator">:</span> <span class="token string">"yoshop"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>        <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'https://yoshop.guet.link/index.php?s=/store/passport/login'</span><span class="token punctuation">,</span>        <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 'Content-Type': 'application/x-www-form-urlencoded',</span>            <span class="token string-property property">"X-Requested-With"</span><span class="token operator">:</span> <span class="token string">"xmlhttprequest"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span> data<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> body <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    body<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;button type='submit'>按我看看&lt;/button></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'宏任务执行1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment">//自己封装的axios请求方法 axios这里是异步then微任务 </span>    <span class="token comment">// App._post_form('adminUser/login', &#123;&#125;, (res) => &#123;</span>    <span class="token comment">// &#125;, (res) => &#123;</span>    <span class="token comment">//     console.log('IO结束then微任务执行2');</span>    <span class="token comment">// &#125;) </span>    Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'微任务执行1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> startTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> endTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>            endTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime <span class="token operator">&lt;=</span> <span class="token number">5000</span><span class="token punctuation">)</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'宏任务执行4'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'同步代码1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'微任务执行2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'宏任务执行3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> 异步 </tag>
            
            <tag> js </tag>
            
            <tag> 事件循环 </tag>
            
            <tag> 宏微任务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6的...rest-spread(剩余拓展)运算符</title>
      <link href="/2022/04/28/note/js-gai-nian-es6-de...rest-spread-sheng-yu-tuo-zhan-yun-suan-fu/"/>
      <url>/2022/04/28/note/js-gai-nian-es6-de...rest-spread-sheng-yu-tuo-zhan-yun-suan-fu/</url>
      
        <content type="html"><![CDATA[<p>…这是ES6新增的剩余&#x2F;拓展运算符</p><p>官方名字叫rest-spread（剩余&#x2F;拓展）。</p><p>##定义</p><p>…rest：将所有剩余的参数（其余的参数）收集到一个数组中</p><p>…spread：将迭代器张开为一个或多个参数</p><p>注意：</p><p>rest必须是唯一参数或是最后一个参数，不可以是第一个</p><p>spread可以在任何位置使用</p><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><p><strong>用于数组合并</strong></p><blockquote><p>ECMAScript 提案（第 3 阶段）的剩余&#x2F;扩展属性将扩展添加到对象属性面量。将自己的对象属性的枚举复制到一个新的对象上。</p></blockquote><p>使用比Object.assign()更短的语法，可以轻松简单（不包括原型）或组合对象。</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">var obj1 &#x3D; &#123; foo: &#39;bar&#39;, x: 42 &#125;;var obj2 &#x3D; &#123; foo: &#39;baz&#39;, y: 13 &#125;;var clonedObj &#x3D; &#123; ...obj1 &#125;;&#x2F;&#x2F; Object &#123; foo: &quot;bar&quot;, x: 42 &#125;var mergedObj &#x3D; &#123; ...obj1, ...obj2 &#125;;&#x2F;&#x2F; Object &#123; foo: &quot;baz&quot;, x: 42, y: 13 &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="剩余"><a href="#剩余" class="headerlink" title="剩余"></a>剩余</h2><p><strong>用于解构</strong></p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">let obj1 &#x3D; &#123;foo: &#39;bar&#39;, x: 42&#125;;let &#123;...a,x&#125; &#x3D; obj1;&#x2F;&#x2F;报错<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://qiniu.guet.link/asset/202209221318288.png" alt="多个参数时，不能放在第一位"></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Spread_syntax">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Spread_syntax</a></p><p><a href="https://juejin.cn/post/6844903487638093831">https://juejin.cn/post/6844903487638093831</a></p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超时取消后的touchend</title>
      <link href="/2022/04/28/note/qian-duan-xiang-mu-chao-shi-qu-xiao-hou-de-touchend/"/>
      <url>/2022/04/28/note/qian-duan-xiang-mu-chao-shi-qu-xiao-hou-de-touchend/</url>
      
        <content type="html"><![CDATA[<p>有touchend和超时两个量控制录音结束</p><p>超时取消后，已经没有在录音了，touchend怎么处理</p><p>那么这个时候就需要每次touchend 判断是否还在录音了 否则会产生报错</p>]]></content>
      
      
      <categories>
          
          <category> 前端项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>登录鉴权与动态路由</title>
      <link href="/2022/04/22/note/vue-mian-shi-deng-lu-jian-quan-yu-dong-tai-lu-you-wei-wan-dai-xu/"/>
      <url>/2022/04/22/note/vue-mian-shi-deng-lu-jian-quan-yu-dong-tai-lu-you-wei-wan-dai-xu/</url>
      
        <content type="html"><![CDATA[<h2 id="登录鉴权"><a href="#登录鉴权" class="headerlink" title="登录鉴权"></a>登录鉴权</h2><p>我们把重点放在动态路由上，先简单过一遍登录鉴权流程：</p><p>（1）前端携带用户登录信息访问登录api</p><p>（2）登录api会对信息进行校验，校验失败会返回失败信息，校验成功就返回包含token的成功信息</p><p>（3）前端拿到token会将其保存起来（localStorage），这是登录</p><p>（4）那么用户的每次请求附带token，服务端就可以完成鉴权（判断有没有权限，什么样的权限）</p><h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2><p>现在重点讲讲动态路由：</p><p>一般的后台数据库里面，就是分为一个user用户表，一个role权限路由表。在登录成功时，返回的成功信息包含routes信息，那么可以简单的分为用户和管理员两部分：</p><p>用户:</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>        name<span class="token operator">:</span> <span class="token string">"普通用户"</span><span class="token punctuation">,</span>        avatar<span class="token operator">:</span> <span class="token string">"https://sf1-ttcdn-tos.pstatp.com/img/user-avatar/6364348965908f03e6a2dd188816e927~300x300.image"</span><span class="token punctuation">,</span>        desc<span class="token operator">:</span> <span class="token string">"普通用户 - people"</span><span class="token punctuation">,</span>        username<span class="token operator">:</span> <span class="token string">"people"</span><span class="token punctuation">,</span>        token<span class="token operator">:</span> <span class="token string">"4es8eyDwznXrCX3b3439EmTFnIkrBYWh"</span><span class="token punctuation">,</span>        routes<span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span> path<span class="token operator">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">"Layout"</span><span class="token punctuation">,</span> redirect<span class="token operator">:</span> <span class="token string">"/index"</span><span class="token punctuation">,</span> hidden<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> children<span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">"index"</span><span class="token punctuation">,</span> path<span class="token operator">:</span> <span class="token string">"/index"</span><span class="token punctuation">,</span> meta<span class="token operator">:</span> <span class="token punctuation">&#123;</span> title<span class="token operator">:</span> <span class="token string">"index"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">"index/index"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"/form"</span><span class="token punctuation">,</span> path<span class="token operator">:</span> <span class="token string">"/form"</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">"Layout"</span><span class="token punctuation">,</span> redirect<span class="token operator">:</span> <span class="token string">"/form/index"</span><span class="token punctuation">,</span> hidden<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> children<span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">"/form/index"</span><span class="token punctuation">,</span> path<span class="token operator">:</span> <span class="token string">"/form/index"</span><span class="token punctuation">,</span> meta<span class="token operator">:</span> <span class="token punctuation">&#123;</span> title<span class="token operator">:</span> <span class="token string">"form"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">"form/index"</span> <span class="token punctuation">&#125;</span>            <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"/example"</span><span class="token punctuation">,</span> path<span class="token operator">:</span> <span class="token string">"/example"</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">"Layout"</span><span class="token punctuation">,</span> redirect<span class="token operator">:</span> <span class="token string">"/example/tree"</span><span class="token punctuation">,</span> meta<span class="token operator">:</span> <span class="token punctuation">&#123;</span> title<span class="token operator">:</span> <span class="token string">"example"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> hidden<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> children<span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">"/tree"</span><span class="token punctuation">,</span> path<span class="token operator">:</span> <span class="token string">"/example/tree"</span><span class="token punctuation">,</span> meta<span class="token operator">:</span> <span class="token punctuation">&#123;</span> title<span class="token operator">:</span> <span class="token string">"tree"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">"tree/index"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">"/copy"</span><span class="token punctuation">,</span> path<span class="token operator">:</span> <span class="token string">"/example/copy"</span><span class="token punctuation">,</span> meta<span class="token operator">:</span> <span class="token punctuation">&#123;</span> title<span class="token operator">:</span> <span class="token string">"copy"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">"tree/copy"</span> <span class="token punctuation">&#125;</span>            <span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"/table"</span><span class="token punctuation">,</span> path<span class="token operator">:</span> <span class="token string">"/table"</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">"Layout"</span><span class="token punctuation">,</span> redirect<span class="token operator">:</span> <span class="token string">"/table/index"</span><span class="token punctuation">,</span> hidden<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> children<span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">"/table/index"</span><span class="token punctuation">,</span> path<span class="token operator">:</span> <span class="token string">"/table/index"</span><span class="token punctuation">,</span> meta<span class="token operator">:</span> <span class="token punctuation">&#123;</span> title<span class="token operator">:</span> <span class="token string">"table"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">"table/index"</span> <span class="token punctuation">&#125;</span>            <span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"/people"</span><span class="token punctuation">,</span> path<span class="token operator">:</span> <span class="token string">"/people"</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">"Layout"</span><span class="token punctuation">,</span> redirect<span class="token operator">:</span> <span class="token string">"/people/index"</span><span class="token punctuation">,</span> hidden<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> children<span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">"/people/index"</span><span class="token punctuation">,</span> path<span class="token operator">:</span> <span class="token string">"/people/index"</span><span class="token punctuation">,</span> meta<span class="token operator">:</span> <span class="token punctuation">&#123;</span> title<span class="token operator">:</span> <span class="token string">"people"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">"people/index"</span> <span class="token punctuation">&#125;</span>            <span class="token punctuation">]</span> <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>管理员:</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">"管理员"</span><span class="token punctuation">,</span>    avatar<span class="token operator">:</span> <span class="token string">"https://sf3-ttcdn-tos.pstatp.com/img/user-avatar/ccb565eca95535ab2caac9f6129b8b7a~300x300.image"</span><span class="token punctuation">,</span>    desc<span class="token operator">:</span> <span class="token string">"管理员 - admin"</span><span class="token punctuation">,</span>    username<span class="token operator">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span>    token<span class="token operator">:</span> <span class="token string">"rtVrM4PhiFK8PNopqWuSjsc1n02oKc3f"</span><span class="token punctuation">,</span>    routes<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span> path<span class="token operator">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">"Layout"</span><span class="token punctuation">,</span> redirect<span class="token operator">:</span> <span class="token string">"/index"</span><span class="token punctuation">,</span> hidden<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> children<span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">"index"</span><span class="token punctuation">,</span> path<span class="token operator">:</span> <span class="token string">"/index"</span><span class="token punctuation">,</span> meta<span class="token operator">:</span> <span class="token punctuation">&#123;</span> title<span class="token operator">:</span> <span class="token string">"index"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">"index/index"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"/form"</span><span class="token punctuation">,</span> path<span class="token operator">:</span> <span class="token string">"/form"</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">"Layout"</span><span class="token punctuation">,</span> redirect<span class="token operator">:</span> <span class="token string">"/form/index"</span><span class="token punctuation">,</span> hidden<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> children<span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">"/form/index"</span><span class="token punctuation">,</span> path<span class="token operator">:</span> <span class="token string">"/form/index"</span><span class="token punctuation">,</span> meta<span class="token operator">:</span> <span class="token punctuation">&#123;</span> title<span class="token operator">:</span> <span class="token string">"form"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">"form/index"</span> <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"/example"</span><span class="token punctuation">,</span> path<span class="token operator">:</span> <span class="token string">"/example"</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">"Layout"</span><span class="token punctuation">,</span> redirect<span class="token operator">:</span> <span class="token string">"/example/tree"</span><span class="token punctuation">,</span> meta<span class="token operator">:</span> <span class="token punctuation">&#123;</span> title<span class="token operator">:</span> <span class="token string">"example"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> hidden<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> children<span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">"/tree"</span><span class="token punctuation">,</span> path<span class="token operator">:</span> <span class="token string">"/example/tree"</span><span class="token punctuation">,</span> meta<span class="token operator">:</span> <span class="token punctuation">&#123;</span> title<span class="token operator">:</span> <span class="token string">"tree"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">"tree/index"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">"/copy"</span><span class="token punctuation">,</span> path<span class="token operator">:</span> <span class="token string">"/example/copy"</span><span class="token punctuation">,</span> meta<span class="token operator">:</span> <span class="token punctuation">&#123;</span> title<span class="token operator">:</span> <span class="token string">"copy"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">"tree/copy"</span> <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"/table"</span><span class="token punctuation">,</span> path<span class="token operator">:</span> <span class="token string">"/table"</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">"Layout"</span><span class="token punctuation">,</span> redirect<span class="token operator">:</span> <span class="token string">"/table/index"</span><span class="token punctuation">,</span> hidden<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> children<span class="token operator">:</span> <span class="token punctuation">[</span>           <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">"/table/index"</span><span class="token punctuation">,</span> path<span class="token operator">:</span> <span class="token string">"/table/index"</span><span class="token punctuation">,</span> meta<span class="token operator">:</span> <span class="token punctuation">&#123;</span> title<span class="token operator">:</span> <span class="token string">"table"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">"table/index"</span> <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"/admin"</span><span class="token punctuation">,</span> path<span class="token operator">:</span> <span class="token string">"/admin"</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">"Layout"</span><span class="token punctuation">,</span> redirect<span class="token operator">:</span> <span class="token string">"/admin/index"</span><span class="token punctuation">,</span> hidden<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> children<span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">"/admin/index"</span><span class="token punctuation">,</span> path<span class="token operator">:</span> <span class="token string">"/admin/index"</span><span class="token punctuation">,</span> meta<span class="token operator">:</span> <span class="token punctuation">&#123;</span> title<span class="token operator">:</span> <span class="token string">"admin"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">"admin/index"</span> <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"/people"</span><span class="token punctuation">,</span> path<span class="token operator">:</span> <span class="token string">"/people"</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">"Layout"</span><span class="token punctuation">,</span> redirect<span class="token operator">:</span> <span class="token string">"/people/index"</span><span class="token punctuation">,</span> hidden<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> children<span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">"/people/index"</span><span class="token punctuation">,</span> path<span class="token operator">:</span> <span class="token string">"/people/index"</span><span class="token punctuation">,</span> meta<span class="token operator">:</span> <span class="token punctuation">&#123;</span> title<span class="token operator">:</span> <span class="token string">"people"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">"people/index"</span> <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由此可以看出，routes就是admin管理员和people普通用户的差异化动态路由了，管理员多了一个admin的页面，而用户是没有的。</p><p>其实这里是有多种思路的。有些开发者喜欢完整的静态路由都在前端里面，然后根据router的meta属性，写上对应user的role，登录的时候，再根据后端返回的权限，去过滤比对权限，把该用户角色所对应的路由处理好，渲染处理，这也是主流的一种处理方式。这种就等于是把所有的路由和权限业务处理都放在了前端，一旦上线发布后，想要修改就需要重新打包处理，而且不能经由后台动态新增删除</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> myRouter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/login'</span><span class="token punctuation">,</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'login'</span><span class="token punctuation">,</span>        <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>         <span class="token literal-property property">roles</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'admin'</span><span class="token punctuation">,</span> <span class="token string">'user'</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/components/Login'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/home'</span><span class="token punctuation">,</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'home'</span><span class="token punctuation">,</span>        <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">roles</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'admin'</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/Home'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>     <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/404'</span><span class="token punctuation">,</span>     <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/components/404'</span><span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//假设通过接口从后台获取的用户角色，可以存储在token中</span><span class="token keyword">const</span> role <span class="token operator">=</span> <span class="token string">'user'</span> myRouter<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span>from<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>roles<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>role<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//放行</span> <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">"/404"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">//跳到404页面</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有一种解法，就是所有的路由权限等，都交给后端，后端根据前端的账号密码，去获取角色权限，处理路由，丢出就是已经匹配对应角色的路由了。这种写法前端运算量不会太大，而且易于修改和后期维护以及动态的增删改查，本文就是以该种形式实现。</p><p>总体思路是 </p><p>路由跳转上 后端根据权限返回route 前端持久化存储route 利用全局路由守卫将route数据进行动态添加addRoute 那么只要将没有的路由规则的url跳转到403页面就好</p><p>tml导航元素的显示上 没有路由权限的就不予显示。 因为前端持久化存储了route 那么可以进行一个route.include(‘xxx&#x2F;xx’)的判断 如果有这个路由就显示，没有就不显示</p><p><a href="https://juejin.cn/post/7081517906026037284#heading-7">https://juejin.cn/post/7081517906026037284#heading-7</a></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Map对象</title>
      <link href="/2022/04/17/note/js-gai-nian-map-dui-xiang/"/>
      <url>/2022/04/17/note/js-gai-nian-map-dui-xiang/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">let map &#x3D; new Map();let item &#x3D; &#123; name: &#39;惠芬儿&#39; &#125;;map.set(item, [1, 2, 3]); &#x2F;&#x2F; 存储map.get(item)  &#x2F;&#x2F;[1, 2, 3] &#x2F;&#x2F; 获取map.has(item)  &#x2F;&#x2F;true &#x2F;&#x2F; 判断是否存在map.delete(item)  &#x2F;&#x2F;true  &#x2F;&#x2F; 删除map.has(item)  &#x2F;&#x2F;false&#x2F;&#x2F; 还有另一种设置方式，通过数组来设置map &#x3D; new Map([    [&#39;first&#39;, 123],    [&#39;second&#39;, 456]]);map.get(&#39;first&#39;)   &#x2F;&#x2F;123map.get(&#39;seconf&#39;)  &#x2F;&#x2F;456&#x2F;&#x2F; 注意：不能通过以下方式设置。let wrongMap &#x3D; new Map()wrongMap[&#39;bla&#39;] &#x3D; &#39;blaa&#39;wrongMap[&#39;bla2&#39;] &#x3D; &#39;blaaa2&#39;console.log(wrongMap)  &#x2F;&#x2F; Map &#123; bla: &#39;blaa&#39;, bla2: &#39;blaaa2&#39; &#125;wrongMap.has(&#39;bla&#39;)    &#x2F;&#x2F; falsewrongMap.delete(&#39;bla&#39;) &#x2F;&#x2F; falseconsole.log(wrongMap)  &#x2F;&#x2F; Map &#123; bla: &#39;blaa&#39;, bla2: &#39;blaaa2&#39; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.cnblogs.com/sws-kevin/p/16385126.html">Map的强大在于提供了很多实用方法</a></p><p>javascript中，对象本身就是一种Map结构。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> map <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>map<span class="token punctuation">[</span><span class="token string">'key1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>map<span class="token punctuation">[</span><span class="token string">'key2@'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span><span class="token string">'key1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果是1.</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span><span class="token string">'key2@'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果是2.</span> <span class="token comment">//如果遍历map</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> prop <span class="token keyword">in</span> map<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'key is '</span> <span class="token operator">+</span> prop <span class="token operator">+</span><span class="token string">' and value is'</span> <span class="token operator">+</span> map<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> Map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闭包</title>
      <link href="/2022/04/15/note/js-gai-nian-b-bi-bao/"/>
      <url>/2022/04/15/note/js-gai-nian-b-bi-bao/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token comment">// 官方解释</span>        <span class="token comment">// 一个函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起（或者说函数被引用包围），</span>        <span class="token comment">// 这样的组合就是闭包（closure）。</span>        <span class="token comment">// *这里的词法环境是指定义这个函数的外部词法环境</span>        <span class="token comment">// 闭包：</span>        <span class="token comment">//                 闭包的条件：</span>        <span class="token comment">//                     - 函数嵌套函数</span>        <span class="token comment">//                     - 内部函数使用外部函数的变量</span>        <span class="token comment">//                     - 调用外部函数</span>        <span class="token comment">//                 闭包到底是什么：</span>        <span class="token comment">//                     - 通俗的理解：函数内部嵌套的函数</span>        <span class="token comment">//                     - 浏览器查看后理解：内部函数的Scopes中，包含引用外部函数变量的一个对象</span>        <span class="token comment">//                 闭包的作用：</span>        <span class="token comment">//                     - 延长了局部变量的生命周期</span>        <span class="token comment">//                     - 保护局部变量</span>        <span class="token comment">//                     - 封装代码</span>        <span class="token comment">//                 闭包的缺点：</span>        <span class="token comment">//                     - 局部变量会长期驻留在内存中，可能会造成内存泄漏(IE9以下)</span>        <span class="token comment">//                 解决闭包带来的缺点：</span>        <span class="token comment">//                     - 减少使用闭包</span>        <span class="token comment">//                     - 及时释放</span>        <span class="token comment">// var fn = function () &#123;</span>        <span class="token comment">//     var count = 0;</span>        <span class="token comment">//     console.log(count);</span>        <span class="token comment">//     return function () &#123;</span>        <span class="token comment">//         return ++count;</span>        <span class="token comment">//     &#125;;</span>        <span class="token comment">// &#125;;</span>        <span class="token comment">// var use = fn();</span>        <span class="token comment">// setInterval(() => &#123;</span>        <span class="token comment">//     console.log('asdas');</span>        <span class="token comment">// &#125;, 0);</span>        <span class="token comment">// //例子2 返回闭包（函数和词法环境引用）给bb</span>        <span class="token comment">// var bb = (function () &#123;</span>        <span class="token comment">//     var a = new Array(1000000).join('a');//将a存储在堆内存</span>        <span class="token comment">//     var b = new Array(1000000).join('b');//不存堆内存</span>        <span class="token comment">//     var c;</span>        <span class="token comment">//     // c = c + a; 无法累加堆内存</span>        <span class="token comment">//     return function () &#123;</span>        <span class="token comment">//         console.log(a);//调用累加 输出</span>        <span class="token comment">//         c = c + a; //能累加堆内存</span>        <span class="token comment">//         console.log(c);//输出累加</span>        <span class="token comment">//     &#125;</span>        <span class="token comment">// &#125;)()</span>        <span class="token comment">// bb();</span>        <span class="token comment">//1.创建全局上下文 全局变量bb</span>        <span class="token comment">//2.执行匿名函数 创建函数上下文 函数变量a b c</span>        <span class="token comment">//3.返回闭包（函数和词法环境）给bb 被引用的部分（a,c）没有被释放 函数上下文结束</span>        <span class="token comment">//4.执行bb 创建函数上下文</span>        <span class="token comment">//5.函数上下文内根据闭包（内部匿名函数和词法的引用）调用 a c</span>        <span class="token comment">//6.闭包环境结束 函数上下文结束 全局上下文结束</span>        <span class="token comment">//函数上下文结束 全局上下文结束</span>        <span class="token comment">//例子3 阿里面试题</span>        <span class="token comment">// function A(a) &#123;</span>        <span class="token comment">//     A = function (b) &#123;</span>        <span class="token comment">//         console.log(a + b);</span>        <span class="token comment">//     &#125;</span>        <span class="token comment">//     console.log(a);</span>        <span class="token comment">// &#125;</span>        <span class="token comment">// A(new Array(1000000).join('x'));//此时A变成闭包 形参a的值 也就是new Array(1000000).join('x') 得不到释放</span>        <span class="token comment">// A(new Array(1000000).join('Q'));//执行之后函数作用域没有东西被外部占用 不会形成新闭包 但第一次传入形参a的值依然包含在词法环境中得不到释放</span>        <span class="token comment">// var c = (function () &#123;</span>        <span class="token comment">//     var a = new Array(100000000).join(1);</span>        <span class="token comment">//     function A() &#123;</span>        <span class="token comment">//         a = a + new Array(1000).join(1);</span>        <span class="token comment">//         console.log(a);</span>        <span class="token comment">//     &#125;</span>        <span class="token comment">//     return A;</span>        <span class="token comment">// &#125;)();</span>        <span class="token comment">// A(new Array(1000000).join('x'));//此时A变成闭包 形参a的值 也就是new Array(1000000).join('x') 得不到释放</span>        <span class="token comment">// A(new Array(1000000).join('Q'));//执行之后函数作用域没有东西被外部占用 不会形成新闭包 但第一次传入形参a的值依然包含在词法环境中得不到释放</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> 闭包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3和vue2区别总结</title>
      <link href="/2022/04/07/note/vue-mian-shi-vue3-he-vue2-qu-bie-zong-jie/"/>
      <url>/2022/04/07/note/vue-mian-shi-vue3-he-vue2-qu-bie-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>（1）vue3比vue2速度快百分三四十</p><p>（2）vue3的数据绑定是通过proxy而vue2是通过defineProperty进行数据劫持</p><ul><li><p>vue3使用的是Proxy对象进行代理，对数据进行监控，而vue2是使用object.defineProperty()来实现的。</p></li><li><p>vue2针对数组或者对象的新增属性的变化是需要专门用vue.set方法去做处理，通过命令的方式添加一个监控。</p></li><li><p>vue3使用ES6的proxy自然而然的取消了set方法，无形之中给我们省了很多代码。</p></li><li><p><strong>所以，再也不用vue.set()了</strong></p></li></ul><p>（3）生命周期函数名字的修改</p><p>Vue3 中有 选项式API 和 组合式API ,两者的生命周期钩子有些许不同：</p><ul><li><p>选项式API</p><p>beforeUnmount(在Vue2中是：beforeDestroy)：在卸载组件实例之前调用</p><p>unmounted (在Vue2中是： destroyed)：卸载组件实例后调用</p></li><li><p>组合式API的生命周期钩子</p></li></ul><p><img src="https://qiniu.guet.link/asset/202212250002342.png"></p><p>其中setup在created之前，是围绕之前两个生命周期的，所以就没有created和beforeCreate了</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>less和sass的使用和区别</title>
      <link href="/2022/04/05/note/html-css-mian-shi-less-he-sass-de-shi-yong-he-qu-bie/"/>
      <url>/2022/04/05/note/html-css-mian-shi-less-he-sass-de-shi-yong-he-qu-bie/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>sass和less都是css的预处理语言，是css的拓展。所谓预处理就是在编译成css之前，预先处理一番，以更优雅的方式编写css样式。<br>&#x2F;<br><a href="https://juejin.cn/post/6906845910157525000#heading-5">https://juejin.cn/post/6906845910157525000#heading-5</a></p><h1 id="1-sass的使用"><a href="#1-sass的使用" class="headerlink" title="1. sass的使用"></a>1. sass的使用</h1><p>sass目前的版本都是以scss作命名表示</p><pre class="line-numbers language-none"><code class="language-none">cnpm i sass-loader@7 -Dcnpm i node-sass@4 -D<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="https://www.sass.hk/guide/">https://www.sass.hk/guide/</a></p><h2 id="1-1-嵌套"><a href="#1-1-嵌套" class="headerlink" title="1.1 嵌套"></a>1.1 嵌套</h2><p>.father{<br>    &amp;:hover{<br>等同于 .father:hover<br>    }<br>    .son{<br>&#x2F;&#x2F;后代选择器<br>    }<br>}</p><h2 id="1-2-变量"><a href="#1-2-变量" class="headerlink" title="1.2 变量"></a>1.2 变量</h2><pre class="line-numbers language-none"><code class="language-none">$color:red;$color:$red; &#x2F;&#x2F;变量里可以用变量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="1-3-导入"><a href="#1-3-导入" class="headerlink" title="1.3 导入"></a>1.3 导入</h2><pre class="line-numbers language-none"><code class="language-none">&lt;style lang&#x3D;&quot;scss&quot;&gt;    @import url(&#39;xxx.scss&#39;)    &#x2F;&#x2F;用于scss的模块管理&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-less的使用"><a href="#2-less的使用" class="headerlink" title="2. less的使用"></a>2. less的使用</h1><pre class="line-numbers language-none"><code class="language-none">cnpm i less-loader@6.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-1-嵌套"><a href="#2-1-嵌套" class="headerlink" title="2.1 嵌套"></a>2.1 嵌套</h2><p>.father{<br>    &amp;:hover{<br>等同于 .father:hover<br>    }<br>    .son{<br>&#x2F;&#x2F;后代选择器<br>    }<br>}</p><h2 id="2-2-变量"><a href="#2-2-变量" class="headerlink" title="2.2 变量"></a>2.2 变量</h2><pre class="line-numbers language-none"><code class="language-none">@color:red;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="3-less和sass的区别"><a href="#3-less和sass的区别" class="headerlink" title="3. less和sass的区别"></a>3. less和sass的区别</h1><ol><li>sass对环境要求比较高，less对环境的要求比较松</li><li>变量书写的方式不一样</li><li>less的变量@有先后和类似块级作用域的概念，有变量提升<br>sass的变量$有先后和类似块级作用域的概念(3版本没有块级只有先后，现在已经改了)，没有变量提升</li></ol><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss">&lt;style  lang=<span class="token string">"scss"</span> scope><span class="token property"><span class="token variable">$color</span></span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token selector">.el-menu-vertical-demo </span><span class="token punctuation">&#123;</span>  <span class="token property"><span class="token variable">$color</span></span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">min-height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span>  &amp;<span class="token punctuation">:</span><span class="token function">not</span><span class="token punctuation">(</span>.el-menu--collapse<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token selector">.el-menu </span><span class="token punctuation">&#123;</span>  <span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token selector">h3 </span><span class="token punctuation">&#123;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">$color</span><span class="token punctuation">;</span><span class="token comment">//red</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 48px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token property"><span class="token variable">$color</span></span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>&lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-less" data-language="less"><code class="language-less">&lt;style  lang=<span class="token string">"less"</span> scope><span class="token variable">@color<span class="token punctuation">:</span></span> red<span class="token punctuation">;</span><span class="token selector">.el-menu-vertical-demo</span> <span class="token punctuation">&#123;</span>  <span class="token variable">@color<span class="token punctuation">:</span></span> blue<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">min-height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span>  <span class="token selector">&amp;:not(.el-menu--collapse)</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token selector">.el-menu</span> <span class="token punctuation">&#123;</span>  <span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token selector">h3</span> <span class="token punctuation">&#123;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">@color</span><span class="token punctuation">;</span><span class="token comment">//blue</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 48px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">@color<span class="token punctuation">:</span></span> blue<span class="token punctuation">;</span><span class="token comment">//全局状态下变量提升</span>&lt;<span class="token operator">/</span>style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> html&amp;css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 卷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高阶函数</title>
      <link href="/2022/04/03/note/js-gai-nian-gao-jie-han-shu/"/>
      <url>/2022/04/03/note/js-gai-nian-gao-jie-han-shu/</url>
      
        <content type="html"><![CDATA[<p>高阶函数 的英文名叫 Higher-Order Function ，是 <strong>函数式编程</strong> 中的一种。</p><p>他的表现形式往往是通过<strong>把函数作为参数</strong>传入另一个函数，或者<strong>把函数作为另一个函数的返回值</strong>返回。</p><p>在实际开发业务中， 高阶函数往往可以抽象我们的代码 ，将我们的<strong>命令式编程</strong>转换为复用性更高级的<strong>函数式编程</strong>，从而 提升我们的代码质量 。</p><p>例如在数组方法里map、reduce都是高阶函数。</p><p><a href="https://www.jb51.net/article/195544.htm">https://www.jb51.net/article/195544.htm</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/First-class_Function#%E7%A4%BA%E4%BE%8B_%E8%BF%94%E5%9B%9E%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0">https://developer.mozilla.org/zh-CN/docs/Glossary/First-class_Function#%E7%A4%BA%E4%BE%8B_%E8%BF%94%E5%9B%9E%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0</a></p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 函数式编程 </tag>
            
            <tag> 命令式编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>image组件</title>
      <link href="/2022/03/29/note/uniapp-you-hua-image-zu-jian/"/>
      <url>/2022/03/29/note/uniapp-you-hua-image-zu-jian/</url>
      
        <content type="html"><![CDATA[<p>   <a href="https://uniapp.dcloud.net.cn/component/image.html">uniapp页面结构复杂，css样式太多的情况，使用 image 可能导致样式生效较慢，出现 “闪一下” 的情况，此时设置 image{will-change: transform} ,可优化此问题。</a></p><p>   其实并不是这样，image的宽度有一个默认宽高，等到widthfix heightfix就会产生抖动，所以设置如下样式：<br>   height:0;width:0; 或者auto 这样就可以</p>]]></content>
      
      
      <categories>
          
          <category> uniapp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> uniapp </tag>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git的使用</title>
      <link href="/2022/03/29/note/qian-duan-gong-cheng-hua-git-de-shi-yong/"/>
      <url>/2022/03/29/note/qian-duan-gong-cheng-hua-git-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Git介绍"><a href="#1-Git介绍" class="headerlink" title="1. Git介绍"></a>1. Git介绍</h1><h2 id="1-1-Git是什么工具？"><a href="#1-1-Git是什么工具？" class="headerlink" title="1.1 Git是什么工具？"></a>1.1 Git是什么工具？</h2><p>Git是一个版本控制工具<br>有以下版本的项目<br>v1.1<br>v1.2<br>开发项目1.2出现了bug，那么我们可以切换到之前的正常版本\</p><h2 id="1-2-Git起到了什么作用？"><a href="#1-2-Git起到了什么作用？" class="headerlink" title="1.2 Git起到了什么作用？"></a>1.2 Git起到了什么作用？</h2><p>代码管理，版本回退，多人协作</p><h1 id="2-将本地代码以及文件提交到远程仓库"><a href="#2-将本地代码以及文件提交到远程仓库" class="headerlink" title="2. 将本地代码以及文件提交到远程仓库"></a>2. 将本地代码以及文件提交到远程仓库</h1><h2 id="2-1-Git全局设置"><a href="#2-1-Git全局设置" class="headerlink" title="2.1 Git全局设置"></a>2.1 Git全局设置</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> init.defaultBranch main <span class="token comment">#git和github原来的默认分支都是master，但github因为黑人运动的分支变成了main，这里是让git和github保持统一</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"iamfugui"</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"zgh0118c@gmail.com"</span><span class="token function">git</span> config <span class="token parameter variable">--list</span> <span class="token parameter variable">--global</span> <span class="token comment">#查看git配置</span><span class="token comment">#全局配置文件在：C:\Users\huawei的.gitconfig</span><span class="token comment">#系统配置文件在：git安装位置\etc\ .gitconfig</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-生成SSH-秘钥和公钥"><a href="#2-2-生成SSH-秘钥和公钥" class="headerlink" title="2.2 生成SSH 秘钥和公钥"></a>2.2 生成SSH 秘钥和公钥</h2><p>秘钥和公钥文件在：C:\Users\huawei.ssh<br><br>官方文档:<br><a href="https://docs.github.com/cn/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">https://docs.github.com/cn/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent</a><br><br>过程解析：<br><br>密钥形式登录的原理是利用密钥生成器制作一对密钥,一个公钥和一个私钥(id_ed25519.pub和id_ed25519)。将公钥添加到服务器的某个账户上，然后在客户端利用私钥即可完成认证并登录。这样一来，没有私钥，任何人都无法通过 SSH 暴力破解你的密码来远程登录到系统。<a href="https://segmentfault.com/a/1190000040983619">https://segmentfault.com/a/1190000040983619</a><br>\</p><h2 id="2-3-测试连接"><a href="#2-3-测试连接" class="headerlink" title="2.3 测试连接"></a>2.3 测试连接</h2><p>使用Git Bash</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可能碰到端口无法访问 参考以下连接：<br><a href="https://segmentfault.com/a/1190000041909858/">https://segmentfault.com/a/1190000041909858/</a></p><h2 id="2-4-克隆"><a href="#2-4-克隆" class="headerlink" title="2.4 克隆"></a>2.4 克隆</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 克隆</span><span class="token function">git</span> clone xxx<span class="token comment"># 如果已经存在本地仓库你可以这样</span><span class="token function">git</span> remote <span class="token function">add</span> origin xxx<span class="token function">git</span> branch <span class="token parameter variable">-M</span> main<span class="token function">git</span> push <span class="token parameter variable">-u</span> origin main<span class="token comment">## 远程的其它操作</span><span class="token function">git</span> remote <span class="token parameter variable">-v</span> <span class="token comment">#查看</span><span class="token function">git</span> remote <span class="token function">rm</span> origin <span class="token comment">#删除</span><span class="token function">git</span> remote <span class="token function">add</span> origin + 远程仓库地址 <span class="token comment">#添加</span><span class="token function">git</span> remote set-url origin 远程仓库地址 <span class="token comment">#修改</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-5-提交代码"><a href="#2-5-提交代码" class="headerlink" title="2.5 提交代码"></a>2.5 提交代码</h2><p>git add .<br><br>&#x2F;&#x2F;提交所有代码到中转站(后面是空格加.)<br><br><br>git commit -m “注释内容”<br><br>&#x2F;&#x2F;提交所有代码到本地仓库<br><br><br>git push<br><br>&#x2F;&#x2F;提交到远程仓库<br><br>\</p><h1 id="3-查看以前版本代码"><a href="#3-查看以前版本代码" class="headerlink" title="3. 查看以前版本代码"></a>3. 查看以前版本代码</h1><p>在平台查看代码，可追溯版本</p><h1 id="4-团队开发会碰到什么问题？"><a href="#4-团队开发会碰到什么问题？" class="headerlink" title="4. 团队开发会碰到什么问题？"></a>4. 团队开发会碰到什么问题？</h1><h2 id="4-1-备份多个版本，费空间和时间"><a href="#4-1-备份多个版本，费空间和时间" class="headerlink" title="4.1 备份多个版本，费空间和时间"></a>4.1 备份多个版本，费空间和时间</h2><h2 id="4-2-难以恢复以前版本"><a href="#4-2-难以恢复以前版本" class="headerlink" title="4.2 难以恢复以前版本"></a>4.2 难以恢复以前版本</h2><h2 id="4-3-难以解决代码冲突"><a href="#4-3-难以解决代码冲突" class="headerlink" title="4.3 难以解决代码冲突"></a>4.3 难以解决代码冲突</h2><h2 id="4-4-难以追溯问题以及责任人、修改时间"><a href="#4-4-难以追溯问题以及责任人、修改时间" class="headerlink" title="4.4 难以追溯问题以及责任人、修改时间"></a>4.4 难以追溯问题以及责任人、修改时间</h2><h2 id="4-5-难以进行权限控制"><a href="#4-5-难以进行权限控制" class="headerlink" title="4.5 难以进行权限控制"></a>4.5 难以进行权限控制</h2><h1 id="5-SVN和git的区别"><a href="#5-SVN和git的区别" class="headerlink" title="5. SVN和git的区别"></a>5. SVN和git的区别</h1><p>svn也是版本控制工具<br><br>git用的比较多<br>\</p><h2 id="5-1-集中式管理与分布式管理"><a href="#5-1-集中式管理与分布式管理" class="headerlink" title="5.1 集中式管理与分布式管理"></a>5.1 集中式管理与分布式管理</h2><p>svn它是集中式管理，git是分布式管理<br>集中式：没网提交不到远程仓库，没有本地仓库<br>分布式：没网可以提交到本地仓库 git commit</p><h2 id="5-2-速度"><a href="#5-2-速度" class="headerlink" title="5.2 速度"></a>5.2 速度</h2><p>git速度比svn快</p><h1 id="6-详细操作"><a href="#6-详细操作" class="headerlink" title="6. 详细操作"></a>6. 详细操作</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> init <span class="token comment">#项目初始化 克隆初始化也行</span><span class="token function">git</span> config <span class="token parameter variable">--list</span> <span class="token comment">#查看总体配置</span><span class="token function">git</span> config <span class="token parameter variable">--global</span>  <span class="token parameter variable">--list</span> <span class="token comment"># 查看全局配置</span><span class="token function">git</span> config <span class="token parameter variable">--local</span> <span class="token parameter variable">--list</span> <span class="token comment">#查看本地配置</span><span class="token function">git</span> config <span class="token parameter variable">--system</span> <span class="token parameter variable">--list</span> <span class="token comment">#查看系统配置 几个配置文件可以百度位置，或进入小乌龟修改</span><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span> <span class="token comment">#将文件添加暂缓区 . 所有文件，也可以输入具体文件名，代表添加这个文件</span><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"123123"</span> <span class="token comment">#添加到本地仓库</span><span class="token function">git</span> status <span class="token comment">#查看目录状态 没有被git管理的文件和被git管理且被修改但还未提交(git commit)的文件</span><span class="token function">git</span> <span class="token function">diff</span> xxx.js <span class="token comment"># 查看某一个文件</span><span class="token function">git</span> <span class="token function">diff</span> <span class="token comment"># 查看所有文件</span><span class="token function">git</span> log xxx.js <span class="token comment">#查看修改历史</span><span class="token function">git</span> log <span class="token comment">#查看所有文件修改历史 （按q退出）</span><span class="token function">git</span> reflog <span class="token comment">#查看修改历史【简单】 </span><span class="token function">git</span> reset xxxx  <span class="token comment">#默认为混合模式 --mixed 回到某一个版本号 保留文件到工作区</span><span class="token function">git</span> reset <span class="token parameter variable">--hard</span> <span class="token string">"HEAD^"</span>  <span class="token comment">#回到上一个版本 cmd的^表示换行 要""起来 也可以~代替</span><span class="token function">git</span> reset <span class="token parameter variable">--hard</span> xxxx <span class="token comment">#回到某一个版本号 硬重置 其它重置参考：https://juejin.cn/post/6844903614767448072#comment</span><span class="token function">git</span> restore xxx.js <span class="token comment">#恢复文件到这个版本未修改模样</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="7-多人开发解决冲突问题"><a href="#7-多人开发解决冲突问题" class="headerlink" title="7. 多人开发解决冲突问题"></a>7. 多人开发解决冲突问题</h1><pre class="line-numbers language-none"><code class="language-none">git pull #拉取,其实就是 git fetch 和 git merge FETCH_HEAD 的简写,FETCH_HEAD是一个短暂的ref，用于跟踪刚刚从远程存储库中获取的内容。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="7-1-过程"><a href="#7-1-过程" class="headerlink" title="7.1 过程"></a>7.1 过程</h2><p>当远程仓库有别人提交了新的代码时，那么你add commit push提交远程仓库就需要pull。如果pull下来的代码有冲突，就得来解决这个冲突。使用编辑器打开冲突的文件，有如下：</p><pre class="line-numbers language-none"><code class="language-none">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD三&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;周&gt;&gt;&gt;&gt;&gt;&gt;&gt; 10171d56910d4a2866546ad60a9ed9295fe1445b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中 &#x3D;&#x3D;&#x3D;&#x3D; 是冲突代码的分割线，HEAD是你的代码，下边一串版本号的是别人提交的代码；另一种情况是下边是其它分支。<br><br>解决完冲突，需要重新add commit push。当然如果没有冲突，可以pull完直接push<br><br>另外 解决冲突并不会在github上特别标注出来</p><h2 id="7-2-建议"><a href="#7-2-建议" class="headerlink" title="7.2 建议"></a>7.2 建议</h2><p>写完代码立马提交，后边提交的人要解决冲突</p><h1 id="8-分支操作"><a href="#8-分支操作" class="headerlink" title="8. 分支操作"></a>8. 分支操作</h1><p>主分支放置成型的项目，上线的项目，开发在其它分支上开发，最后合并给主分支</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone <span class="token parameter variable">-b</span> xxx git@github.com:iamfugui/lovely.git <span class="token comment">#克隆某个分支</span><span class="token function">git</span> branch     <span class="token comment">#查看分支</span><span class="token function">git</span> branch <span class="token parameter variable">-r</span>  <span class="token comment">#查看远程分支</span><span class="token function">git</span> branch <span class="token parameter variable">-a</span>  <span class="token comment">#查看所有分支</span><span class="token function">git</span> branch xxx origin/xxx <span class="token comment">#远程有分支 下载远程分支到新分支</span><span class="token function">git</span> branch xxx <span class="token comment">#远程无分支 复制当前分支到新分支</span><span class="token function">git</span> push <span class="token parameter variable">-u</span> origin xxx <span class="token comment">#创建并提交远程分支 -u 等于 --set-upstream (这命令是只有本地分支没有远程分支的情况下)</span><span class="token function">git</span> branch xxx <span class="token parameter variable">-u</span> origin/xxx <span class="token comment">#将本地分支设置对应的远程分支 (git branch xxx 后发现 远程分支已存在)</span><span class="token function">git</span> checkout xxx <span class="token comment">#切换分支</span><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> xxx <span class="token comment">#建立并切换分支</span><span class="token function">git</span> merge dev  <span class="token comment">#当前分支与dev分支 orgin/dev合并远程分支</span><span class="token function">git</span> rebase xxx <span class="token comment">#和merge一样是合并，不同的是副分支的也会合并最新commit时间点之前的主分支commit</span><span class="token function">git</span> branch <span class="token parameter variable">-d</span> xxx <span class="token comment">#删除本地分支 需要checkout到其它分支，同时需要合并分支 -D可以强制删除</span><span class="token function">git</span> push <span class="token parameter variable">-d</span> origin xxx <span class="token comment">#删除远程分支</span><span class="token function">git</span> remote show origin  <span class="token comment">#查看远程和本地不同步的分支 out of date（过时）表示你要清除的东西</span><span class="token function">git</span> remote prune origin <span class="token comment">#修剪，会对远程已经删除的分支进行删除同步</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://michaelliudev.blog.csdn.net/article/details/79108233?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-79108233-blog-119004977.pc_relevant_multi_platform_featuressortv2dupreplace&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-79108233-blog-119004977.pc_relevant_multi_platform_featuressortv2dupreplace&utm_relevant_index=1">‘git rebase’</a></p><h1 id="9-合并分支"><a href="#9-合并分支" class="headerlink" title="9. 合并分支"></a>9. 合并分支</h1><p>场景：将主分支和dev分支合并到主分支</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout master<span class="token function">git</span> merge dev <span class="token comment">#当前分支与dev分支</span><span class="token function">git</span> merge orgin/dev <span class="token comment">#合并远程分支</span><span class="token comment">#解决冲突后</span><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span> <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"合并分支"</span><span class="token function">git</span> push<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：合并是合并在当前分支，如在master，其它分支dev是不受影响的。同时git add 的一些列操作，只有解决冲突时才需要，如果合并后旧文件没有冲突、改变是只用push就行的。</p><h1 id="10-Gitflow工作流"><a href="#10-Gitflow工作流" class="headerlink" title="10. Gitflow工作流"></a>10. Gitflow工作流</h1><p>在中大型项目使用:<br>有如下分支使用<br>master 用于上线版本 创建dev分支 （领导合并）<br>develop 用于相对稳定的版本，创建feature 和 release（领导合并，用于合并feature的代码）<br>feature 用于开发某几个功能，合并到develop 不同功能可能会创建不同的分支，可能有多个 （这个是程序员负责的）<br>release 用于代码上线前的准备，合并到develop，（测试，bug修复），创建bugfix和hotfix<br>bugfix 用于修复不紧急bug 程序员修复，合并到release<br>hotfix 用于修复紧急bug 程序员修复，合并到release</p><h1 id="11-文件状态详解"><a href="#11-文件状态详解" class="headerlink" title="11. 文件状态详解"></a>11. 文件状态详解</h1><p>git status 查看状态，也可以使用<strong>小乌龟</strong>查看状态图标<br>文件状态：<br>1.没有被add过的文件叫untracked 【无足迹】<br>2.add之后文件处于staged 【已暂存】,等待commit<br>3.commit之后文件处于unmodified【未修改】<br>4.当unmodified【未修改】的文件被修改则会变为modified【修改】，modified【修改】是因为文件会跟仓库中的文件对比<br>5.modified【修改】之后的文件add之后将继续变为staged【已暂存】状态\</p><p>注意：git status实际显示的时候只有Untracked和Modified，关注信息的颜色由红【untracked】变为绿【staged】就可以了</p><h1 id="12-其它"><a href="#12-其它" class="headerlink" title="12. 其它"></a>12. 其它</h1><p>可能还需要了解的信息</p><h2 id="12-1-忽略文件"><a href="#12-1-忽略文件" class="headerlink" title="12.1 忽略文件"></a>12.1 忽略文件</h2><p>设置 .gitignore.txt 文件，内容为根目录的相对路径，如下:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#代表git下的相对路径</span>/前端工程化_webpack基本使用/node_modules<span class="token comment">#会获取git下的所有这个文件</span>node_modules<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-2-通用配置"><a href="#12-2-通用配置" class="headerlink" title="12.2 通用配置"></a>12.2 通用配置</h2><p>一些常需要的配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--system</span> core.longpaths <span class="token string">"true"</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> core.autocrlf <span class="token string">"false"</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> http.sslverify <span class="token string">"false"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="12-3-HEAD-是一个指针，它使得Git知道你在哪个分区工作"><a href="#12-3-HEAD-是一个指针，它使得Git知道你在哪个分区工作" class="headerlink" title="12.3 HEAD 是一个指针，它使得Git知道你在哪个分区工作"></a>12.3 HEAD 是一个指针，它使得Git知道你在哪个分区工作</h2><h2 id="12-4-origin-x2F-master"><a href="#12-4-origin-x2F-master" class="headerlink" title="12.4 origin&#x2F;master"></a>12.4 origin&#x2F;master</h2><p>“origin” 是当你运行 git clone 时默认的远程仓库名字。 如果你运行 git clone -o booyah，那么你默认的远程分支名字将会是 booyah&#x2F;master。</p><p>“master”是github的默认分支名，由于美国某个运动，在2020年10月后github将默认分支名master改为了main</p><h2 id="12-5-远程操作提示"><a href="#12-5-远程操作提示" class="headerlink" title="12.5 远程操作提示"></a>12.5 远程操作提示</h2><p>origin&#x2F;dev 有斜杠   代表分支路径<br>origin dev 没有斜杠 代表一些操作</p><h2 id="12-6-github中的commits"><a href="#12-6-github中的commits" class="headerlink" title="12.6 github中的commits"></a>12.6 github中的commits</h2><p>每个commit都有记录,合并有单独的记录。而合并的主分支同样有其它分支的commit记录。<br>也就是说master分支合并了dev和fg分支，dev和fg分支各commit了一次，那么当master push 上远程时会有dev和fg的commit记录和merge记录。</p><h2 id="12-7-tag"><a href="#12-7-tag" class="headerlink" title="12.7 tag"></a>12.7 tag</h2><p>如果你达到一个重要的阶段，并希望永远记住那个特别的提交快照，你可以使用 git tag 给它打上标签。</p><p>比如说，我们想为我们的 runoob 项目发布一个”1.0”版本。 我们可以用 git tag -a v1.0 命令给最新一次提交打上（HEAD）”v1.0”的标签。</p><p>-a 选项意为”创建一个带注解的标签”。 不用 -a 选项也可以执行的，但它不会记录这标签是啥时候打的，谁打的，也不会让你添加个标签的注解。 我推荐一直创建带注解的标签。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> tag <span class="token parameter variable">-a</span> v1.0 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当你执行 git tag -a 命令时，Git 会打开你的编辑器，让你写一句标签注解，就像你给提交写注解一样。</p><p>例如，假设我们发布了提交 85fc7e7(上面实例最后一行)，但是那时候忘了给它打标签。 我们现在也可以：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> tag <span class="token parameter variable">-a</span> v0.9 85fc7e7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>定点数和浮点数</title>
      <link href="/2022/03/24/note/bian-cheng-zhi-shi-ding-dian-shu-he-fu-dian-shu/"/>
      <url>/2022/03/24/note/bian-cheng-zhi-shi-ding-dian-shu-he-fu-dian-shu/</url>
      
        <content type="html"><![CDATA[<p>计算机无法直接表示小数点，所以需要定点数和浮点数。定点数使用相对较少，因为浮点数可以表示所有的实数，而浮点数又分为单精度浮点数和双精度浮点数。在java语言中，float为单精度浮点数double为双精度浮点数。在JavaScript中，所有Number都遵循<a href="https://baike.baidu.com/item/IEEE%20754/3869922?fr=aladdin">IEEE 754</a>按64位形式存入，不分浮点型和整型，所以1&#x3D;&#x3D;&#x3D;1.0</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Number">Number - 术语表 | MDN</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 定点数 </tag>
            
            <tag> 浮点数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数的四种调用方式</title>
      <link href="/2022/03/14/note/js-gai-nian-h-han-shu-han-shu-de-si-chong-diao-yong-fang-shi/"/>
      <url>/2022/03/14/note/js-gai-nian-h-han-shu-han-shu-de-si-chong-diao-yong-fang-shi/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=    , initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token comment">// //JS 中的函数调用</span>        <span class="token comment">//函数调用的方法一共有 4 种</span>        <span class="token comment">//1.作为一个函数调用</span>        <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"windowsName"</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"Cherry"</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// windowsName</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"inner:"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// inner: Window</span>        <span class="token punctuation">&#125;</span>        <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"outer:"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span>         <span class="token comment">// outer: Window复制代码这样一个最简单的函数，不属于任何一个对象，就是一个函数，这样的情况在 JavaScript 的在浏览器中的非严格模式默认是属于全局对象 window 的，在严格模式，就是 undefined。 </span>        <span class="token comment">// 2.作为一个对象方法</span>        <span class="token comment">//js中在对象内的函数，并将函数值赋给对象的属性即为方法</span>        <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"windowsName"</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Cherry"</span><span class="token punctuation">,</span>            <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// Cherry</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 3.使用构造函数</span>        <span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token parameter">arg1<span class="token punctuation">,</span> arg2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> arg1<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> arg2<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// This    creates a new object</span>        <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">myFunction</span><span class="token punctuation">(</span><span class="token string">"Li"</span><span class="token punctuation">,</span> <span class="token string">"Cherry"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>     <span class="token comment">// 返回 "Cherry"</span>        <span class="token comment">//这就有要说另一个面试经典问题：new 的过程了，</span>        <span class="token comment">//(ಥ_ಥ)这里就简单的来看一下 new 的过程吧：伪代码表示：</span>        <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">myFunction</span><span class="token punctuation">(</span><span class="token string">"Li"</span><span class="token punctuation">,</span> <span class="token string">"Cherry"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// new myFunction&#123;</span>        <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//1.创建新对象</span>        obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> myFunction<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span><span class="token comment">//2.设置原型指向,继承函数原型属性</span>        <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">myFunction</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"Li"</span><span class="token punctuation">,</span> <span class="token string">"Cherry"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.使用call方法改变this指向新对象,这样就可以是参数作为obj的值，而不是window</span>        <span class="token keyword">return</span> <span class="token keyword">typeof</span> result <span class="token operator">===</span> <span class="token string">'obj'</span> <span class="token operator">?</span> result <span class="token operator">:</span> obj<span class="token punctuation">;</span><span class="token comment">//4.判断用户是否需要自己定义一个对象</span>        <span class="token comment">// &#125;</span>        <span class="token comment">//4.被函数方法调用（call、apply）</span>        <span class="token comment">//请看this、apply、call、bind关键字</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js调用wsdl</title>
      <link href="/2022/03/13/note/qian-duan-bian-cheng-js-diao-yong-wsdl/"/>
      <url>/2022/03/13/note/qian-duan-bian-cheng-js-diao-yong-wsdl/</url>
      
        <content type="html"><![CDATA[<p>WSDL（webservice描述语言）是一种使用 XML 编写的文档，这种文档可描述某个 Web Service。webservice需要使用soap协议（一种基于xml描述的协议）进行通信。</p><p>可以通过wsdl查看接口方法，详细以文档示例的报文为准。<a href="http://ws.webxml.com.cn/WebServices/WeatherWS.asmx?WSDL%E4%B8%BA%E4%BE%8B">http://ws.webxml.com.cn/WebServices/WeatherWS.asmx?WSDL为例</a> 查看 wsdl:portType 中的 operation</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">wsdl:</span>operation</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getWeather<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">wsdl:</span>documentation</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>wsdl</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.xmlsoap.org/wsdl/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>获得天气预报数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>输入参数：城市/地区ID或名称，返回数据：一维字符串数组。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">wsdl:</span>documentation</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">wsdl:</span>input</span> <span class="token attr-name">message</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tns:getWeatherSoapIn<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">wsdl:</span>output</span> <span class="token attr-name">message</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tns:getWeatherSoapOut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">wsdl:</span>operation</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有以下使用方式</p><h2 id="1-fetch调用"><a href="#1-fetch调用" class="headerlink" title="1. fetch调用"></a>1. fetch调用</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"http://www.0755tt.com/services/ResultService?wsdl"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">accept</span><span class="token operator">:</span>      <span class="token string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"</span><span class="token punctuation">,</span>    <span class="token string-property property">"accept-language"</span><span class="token operator">:</span> <span class="token string">"en,zh;q=0.9,zh-CN;q=0.8,zh-TW;q=0.7,ja;q=0.6"</span><span class="token punctuation">,</span>    <span class="token string-property property">"cache-control"</span><span class="token operator">:</span> <span class="token string">"no-cache"</span><span class="token punctuation">,</span>    <span class="token literal-property property">pragma</span><span class="token operator">:</span> <span class="token string">"no-cache"</span><span class="token punctuation">,</span>    <span class="token string-property property">"upgrade-insecure-requests"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">referrerPolicy</span><span class="token operator">:</span> <span class="token string">"strict-origin-when-cross-origin"</span><span class="token punctuation">,</span>  <span class="token literal-property property">body</span><span class="token operator">:</span>    <span class="token string">'&lt;?xml version="1.0" encoding="utf-8"?>'</span> <span class="token operator">+</span>    <span class="token string">'&lt;soap:Envelope xmlns:xsi="http://www.w3.org/2003/XMLSchema-instance" '</span> <span class="token operator">+</span>    <span class="token string">'xmlns:web="http://webservice.sztce.apusic.com/"  '</span> <span class="token operator">+</span>    <span class="token string">'xmlns:xsd="http://www.w3.org/2003/XMLSchema" '</span> <span class="token operator">+</span>    <span class="token string">'xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">'</span> <span class="token operator">+</span>    <span class="token string">"&lt;soap:Body>"</span> <span class="token operator">+</span>    <span class="token string">"&lt;web:query>"</span> <span class="token operator">+</span> <span class="token comment">//方法</span>    <span class="token string">"&lt;idCardNo>"</span> <span class="token operator">+</span>  <span class="token comment">//参数</span>    <span class="token string">"440301197804200945"</span> <span class="token operator">+</span>    <span class="token string">"&lt;/idCardNo>"</span> <span class="token operator">+</span>    <span class="token string">"&lt;/web:query>"</span> <span class="token operator">+</span>    <span class="token string">"&lt;/soap:Body>"</span> <span class="token operator">+</span>    <span class="token string">"&lt;/soap:Envelope>"</span><span class="token punctuation">,</span>  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">"cors"</span><span class="token punctuation">,</span>  <span class="token literal-property property">credentials</span><span class="token operator">:</span> <span class="token string">"include"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-axios调用"><a href="#2-axios调用" class="headerlink" title="2. axios调用"></a>2. axios调用</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span><span class="token keyword">var</span> xml <span class="token operator">=</span>  <span class="token string">'&lt;?xml version="1.0" encoding="utf-8"?>'</span> <span class="token operator">+</span>  <span class="token string">'&lt;soap:Envelope xmlns:xsi="http://www.w3.org/2003/XMLSchema-instance" '</span> <span class="token operator">+</span>  <span class="token string">'xmlns:web="http://webservice.sztce.apusic.com/"  '</span> <span class="token operator">+</span>  <span class="token string">'xmlns:xsd="http://www.w3.org/2003/XMLSchema" '</span> <span class="token operator">+</span>  <span class="token string">'xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">'</span> <span class="token operator">+</span>  <span class="token string">"&lt;soap:Body>"</span> <span class="token operator">+</span>  <span class="token string">"&lt;web:query>"</span> <span class="token operator">+</span>  <span class="token string">"&lt;idCardNo>"</span> <span class="token operator">+</span>  <span class="token string">"440301197804200945"</span> <span class="token operator">+</span>  <span class="token string">"&lt;/idCardNo>"</span> <span class="token operator">+</span>  <span class="token string">"&lt;/web:query>"</span> <span class="token operator">+</span>  <span class="token string">"&lt;/soap:Body>"</span> <span class="token operator">+</span>  <span class="token string">"&lt;/soap:Envelope>"</span><span class="token punctuation">;</span><span class="token keyword">var</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">"Content-Type"</span><span class="token operator">:</span> <span class="token string">"text/xml;charset=utf-8"</span><span class="token punctuation">,</span> <span class="token comment">//不输入utf-8可能不能正常访问</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>axios  <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"http://www.0755tt.com/services/ResultService?wsdl"</span><span class="token punctuation">,</span> xml<span class="token punctuation">,</span> config<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">//有效数据</span>    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">//正则</span>    <span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;return>(.*?)&lt;\/return></span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>    <span class="token comment">//原始的xml内容</span>    <span class="token keyword">let</span> xmlStr <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token comment">//匹配出json字符串部分</span>    xmlStr<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">match<span class="token punctuation">,</span> vmKey</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">//有效数据</span>      data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>vmKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-其它的soap版本"><a href="#3-其它的soap版本" class="headerlink" title="3. 其它的soap版本"></a>3. 其它的soap版本</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"> <span class="token keyword">let</span> theCityCode <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span> <span class="token keyword">let</span> theUserID <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span> <span class="token keyword">var</span> xml <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> &lt;soap12:Envelope xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"  xmlns:xsd = "http://www.w3.org/2001/XMLSchema"  xmlns:soap12 = "http://www.w3.org/2003/05/soap-envelope">         &lt;soap12:Body>             &lt;getWeather xmlns="http://WebXml.com.cn/">                 &lt;theCityCode></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>theCityCode<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/theCityCode>                 &lt;theUserID></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>theUserID<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/theUserID>             &lt;/getWeather>         &lt;/soap12:Body>&lt;/soap12:Envelope></span><span class="token template-punctuation string">`</span></span><span class="token keyword">var</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>     <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>         <span class="token string-property property">"Content-Type"</span><span class="token operator">:</span> <span class="token string">"text/xml;charset=utf-8"</span><span class="token punctuation">,</span> <span class="token comment">//不输入utf-8可能不能正常访问</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'http://ws.webxml.com.cn/WebServices/WeatherWS.asmx?WSDL'</span><span class="token punctuation">,</span>     xml<span class="token punctuation">,</span>     config <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://blog.csdn.net/weixin_42058472/article/details/109676281">https://blog.csdn.net/weixin_42058472/article/details/109676281</a> 原生访问</p><p><a href="https://www.5axxw.com/questions/content/m12mm1">https://www.5axxw.com/questions/content/m12mm1</a> axios访问</p><p><a href="https://juejin.cn/post/6844903537629986824">https://juejin.cn/post/6844903537629986824</a> wsdl</p><p><a href="https://juejin.cn/post/6844903577127747598">https://juejin.cn/post/6844903577127747598</a> webservice</p><p><a href="https://blog.csdn.net/q913777031/article/details/110185443">https://blog.csdn.net/q913777031/article/details/110185443</a> WebServices 与 Web API 的区别</p>]]></content>
      
      
      <categories>
          
          <category> 前端编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> webservice </tag>
            
            <tag> wsdl </tag>
            
            <tag> soap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>v-if和v-for的优先级</title>
      <link href="/2022/03/10/note/vue-mian-shi-v-if-he-v-for-de-you-xian-ji/"/>
      <url>/2022/03/10/note/vue-mian-shi-v-if-he-v-for-de-you-xian-ji/</url>
      
        <content type="html"><![CDATA[<p>源码<br><a href="https://github.com/vuejs/vue/blob/dev/dist/vue.js">https://github.com/vuejs/vue/blob/dev/dist/vue.js</a> &#x3D;&gt; function genElement (el, state)</p><h1 id="v-if和v-for的优先级"><a href="#v-if和v-for的优先级" class="headerlink" title="v-if和v-for的优先级"></a>v-if和v-for的优先级</h1><p>不同Vue版本不同，但都不推荐在同一元素上使用 v-if 和 v-for</p><h2 id="1-Vue2"><a href="#1-Vue2" class="headerlink" title="1. Vue2"></a>1. Vue2</h2><p>v-for比v-if优先级大</p><p>当它们处于同一节点，v-for 的优先级比 v-if 更高，这<br>意味着 v-if 将分别重复运行于每个 v-for 循环中。</p><p><a href="https://v2.cn.vuejs.org/v2/guide/list.html#v-for-%E4%B8%8E-v-if-%E4%B8%80%E5%90%8C%E4%BD%BF%E7%94%A8">https://v2.cn.vuejs.org/v2/guide/list.html#v-for-%E4%B8%8E-v-if-%E4%B8%80%E5%90%8C%E4%BD%BF%E7%94%A8</a></p><h2 id="2-Vue3"><a href="#2-Vue3" class="headerlink" title="2. Vue3"></a>2. Vue3</h2><p>v-if比v-for优先级大</p><p>当它们同时存在于一个节点上时，v-if 比 v-for 的优先级更高。<br>这意味着 v-if 的条件将无法访问到 v-for 作用域内定义的变量别名：</p><p><a href="https://cn.vuejs.org/guide/essentials/list.html#v-for-with-v-if">https://cn.vuejs.org/guide/essentials/list.html#v-for-with-v-if</a></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见的兼容bug</title>
      <link href="/2022/03/10/note/qian-duan-jian-rong-chang-jian-de-jian-rong-bug/"/>
      <url>/2022/03/10/note/qian-duan-jian-rong-chang-jian-de-jian-rong-bug/</url>
      
        <content type="html"><![CDATA[<p>对一些兼容问题做记录</p><h2 id="1-样式兼容"><a href="#1-样式兼容" class="headerlink" title="1.样式兼容"></a>1.样式兼容</h2><h3 id="1-1-不同分辨率机型的字体和布局不对称"><a href="#1-1-不同分辨率机型的字体和布局不对称" class="headerlink" title="1.1 不同分辨率机型的字体和布局不对称"></a>1.1 不同分辨率机型的字体和布局不对称</h3><p><br>解决：使用vw + rem vw是视口宽度 设置html的font-size为vw宽 那么rem就是自适应大小的单位<br>\</p><h3 id="1-2-IOS使用margin把底部设置一定的间距-margin-bottom无效-安卓有效"><a href="#1-2-IOS使用margin把底部设置一定的间距-margin-bottom无效-安卓有效" class="headerlink" title="1.2 IOS使用margin把底部设置一定的间距,margin-bottom无效,安卓有效"></a>1.2 IOS使用margin把底部设置一定的间距,margin-bottom无效,安卓有效</h3><p>解决：在需要留白的区域添加空白块(DIV)<br>\</p><h3 id="1-3-安卓部分版本input的placehoder偏上"><a href="#1-3-安卓部分版本input的placehoder偏上" class="headerlink" title="1.3 安卓部分版本input的placehoder偏上"></a>1.3 安卓部分版本input的placehoder偏上</h3><p>解决：line-height:normal</p><h3 id="1-4-H5移动端touch事件有穿透（点透）的问题，怎么解决"><a href="#1-4-H5移动端touch事件有穿透（点透）的问题，怎么解决" class="headerlink" title="1.4 H5移动端touch事件有穿透（点透）的问题，怎么解决"></a>1.4 H5移动端touch事件有穿透（点透）的问题，怎么解决</h3><p>解决：<br>1.阻止默认行为:e.preventDefault();<br>2.第三方库：fastclick.js\</p><h2 id="2-其它兼容"><a href="#2-其它兼容" class="headerlink" title="2.其它兼容"></a>2.其它兼容</h2><h3 id="2-1-H5移动端click时间有300ms的延迟"><a href="#2-1-H5移动端click时间有300ms的延迟" class="headerlink" title="2.1 H5移动端click时间有300ms的延迟"></a>2.1 H5移动端click时间有300ms的延迟</h3><p>解决：设置不可缩放：mate name&#x3D;viewport content&#x3D;user-scalable&#x3D;no<br><br>原理：如果可缩放，浏览器要监听你是否双击，这存在300ms延迟</p><h3 id="2-2-ios转换日期字符串new-Date-‘2020-11-11-11-11-11’-成对象NaN"><a href="#2-2-ios转换日期字符串new-Date-‘2020-11-11-11-11-11’-成对象NaN" class="headerlink" title="2.2 ios转换日期字符串new Date(‘2020-11-11 11:11:11’)成对象NaN"></a>2.2 ios转换日期字符串new Date(‘2020-11-11 11:11:11’)成对象NaN</h3><p>解决：new Date(‘2020&#x2F;11&#x2F;11 11:11:11’)</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">new Date(date.replace(&#x2F;-&#x2F;g, “&#x2F;”))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><br>场景: 拿到日期字符串，需要转成对象重置格式2020-11-11 </p>]]></content>
      
      
      <categories>
          
          <category> 前端兼容 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> 兼容 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>报文包括什么</title>
      <link href="/2022/03/02/note/qian-duan-wang-luo-bao-wen-bao-gua-shi-me/"/>
      <url>/2022/03/02/note/qian-duan-wang-luo-bao-wen-bao-gua-shi-me/</url>
      
        <content type="html"><![CDATA[<p>接口报文的构成：接口报文的构成：</p><h2 id="一、请求报文："><a href="#一、请求报文：" class="headerlink" title="一、请求报文："></a>一、请求报文：</h2><p>请求行（协议+URL+http版本）</p><p>URL：统一资源定位符，uniform resource identifier，能够唯一标识一个资源的表示方法（身份证上的数字）<br>URI：统一资源标识符，uniform resource locator，通过地址的形式，找到对应的资源（身份上的地址）<br>URL是URI的一个子集，所有的URL都是URI，但是URI不一定都是URL。<br>URL encode编码 decode解码</p><p>URL的构成：</p><p>https:&#x2F;&#x2F; —–协议<br>baike.baidu.com ——IP或者域名 （端口：8080或443（https））<br>&#x2F;item&#x2F;%E6%8E%A5%E5%8F%A3&#x2F;15422203 ——地址<br>?fr&#x3D;aladdin ——参数（URL编码格式处理的，键&#x3D;值&amp;键&#x3D;值）</p><p>请求头<br>content-type：它规定了请求体用什么样的格式来进行传递，给服务器做解析。服务器是按照content-type规定的格式来解析请求体，测试的时候，注意填好content-type。<br>格式约定是服务器（后端开发）和前端开发共同约定的，只有自己项目的开发才知道到底用什么格式，所以标准基于接口文档，或者抓包看到的信息。</p><p>cookie请求头，会把浏览器本地已经保存的适用于该服务器的cookie携带进行请求。</p><p>请求体：<br>遵循content-type指定的格式传递给服务器。</p><h2 id="二、返回报文："><a href="#二、返回报文：" class="headerlink" title="二、返回报文："></a>二、返回报文：</h2><p>服务端发给客户端的。<br>在这里插入图片描述</p><p>返回行： 协议版本 状态码<br>返回头：格式是 键：值。<br>返回体：遵循返回的content-type格式，发送给客户端。</p><p><a href="https://blog.csdn.net/angboom/article/details/117487745">https://blog.csdn.net/angboom/article/details/117487745</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> 报文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中的动态路由与传参的两种方式</title>
      <link href="/2022/03/01/note/vue-vuerouter-tiao-zhuan-yu-chuan-can/"/>
      <url>/2022/03/01/note/vue-vuerouter-tiao-zhuan-yu-chuan-can/</url>
      
        <content type="html"><![CDATA[<p>平时我们在详情页的时候往往需要传递参数给详情页，详情页再根据传递过来的参数进行一个请求。那么在vue-cli中如何进行传参呢？首先在vue-cli，我们是通过vue-router来控制页面跳转和传参的，其传参方式无外乎两种：params和query。params相当于post，query相当于get。</p><h2 id="1-路由传参的使用"><a href="#1-路由传参的使用" class="headerlink" title="1. 路由传参的使用"></a>1. 路由传参的使用</h2><h3 id="1-1-query传参"><a href="#1-1-query传参" class="headerlink" title="1.1 query传参"></a>1.1 query传参</h3><p>有编程式（以js代码来实现界面跳转）和声明式（router-link）两种写法，但他们本质上没有区别，router-link内部最后也会调用push方法</p><h4 id="（1）router-link方式"><a href="#（1）router-link方式" class="headerlink" title="（1）router-link方式"></a>（1）router-link方式</h4><p><strong>首先是传参：</strong></p><p>先设置router-link name和query，以下三种写法都可：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;name:'home', query: &#123;id:1&#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 推荐,但是要确保router起名才行 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;path:'/home', query: &#123;id:1&#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- 也可以这么写 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;path:'/home?id=1'&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- 或者全写path --></span><span class="token comment">&lt;!-- 注意：router-link中链接如果是'/'开始就是从根路由开始，如果开始不带'/'，则从当前路由开始。 --></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用户点击router-link的时候query传参数，类似get,url后面会显示参数</p><p><strong>然后是取参：</strong></p><p>js要写this</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">$route.query.id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="（2）this-router-push-方式"><a href="#（2）this-router-push-方式" class="headerlink" title="（2）this.$router.push()方式"></a>（2）this.$router.push()方式</h4><p><strong>首先是传参：</strong></p><p>以某个回调函数对一下代码进行触发，两种写法都可</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'home'</span><span class="token punctuation">,</span><span class="token literal-property property">query</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token string">'1'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/home'</span><span class="token punctuation">,</span><span class="token literal-property property">query</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token string">'1'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>然后是取参：</strong></p><p>同上</p><h3 id="1-2-params传参"><a href="#1-2-params传参" class="headerlink" title="1.2 params传参"></a>1.2 params传参</h3><h4 id="（1）router-link方式-1"><a href="#（1）router-link方式-1" class="headerlink" title="（1）router-link方式"></a>（1）router-link方式</h4><p><strong>首先是传参：</strong><br>对于params需要写的to对象是name和params:{}。不能使用path，因为一旦写了path就会覆盖params的值。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;name:'home', params: &#123;id:1&#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>想要刷新完参数依然存在，得设置动态路由</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> routers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/home/:id"</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'about'</span><span class="token punctuation">,</span> <span class="token function-variable function">component</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../view/home.vue'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token comment">//或者 path: "/home:id" </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>然后是取参：</strong></p><p>js要写this</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">$route.params.id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="（2）this-router-push-方式-1"><a href="#（2）this-router-push-方式-1" class="headerlink" title="（2）this.$router.push()方式"></a>（2）this.$router.push()方式</h4><p><strong>首先是传参：</strong><br>以某个回调函数对一下代码进行触发。只有一种写法，因为path会覆盖params。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'home'</span><span class="token punctuation">,</span><span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token string">'1'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>然后是取参：</strong></p><p>同上</p><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>this.$router.replace() 和push一样，只是会替换当前路径而不是添加一个新路径</p><h3 id="query和params和区别："><a href="#query和params和区别：" class="headerlink" title="query和params和区别："></a>query和params和区别：</h3><ul><li>query相当于GET请求，页面跳转的时候，可以在地址栏看到请求参数</li><li>params相当于POST请求，参数不会在地址栏中显示，刷新会重置。但是设置了动态路由，会在地址栏以动态路由的格式显示（和query格式不一样,是&#x2F;值），并且刷新也会保留了。</li><li>query类似 get, 跳转之后页面 url后面会拼接参数,类似?id&#x3D;1, 刷新页面id还在，非重要性的可以这样传, 密码之类还是用params或其它方式</li><li>params类似 post, 跳转之后页面 url后面不会拼接参数 , 但是刷新页面id 会消失</li></ul><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>我们知道history.pushState是不会切换界面的，那么vue是如何利用他来进行跳转的呢？其实在执行push()进行路由跳转时，会执行VueRouter源码内History对象上的push()操作，为的是记录地址，然后会执行transitionTo()函数进行路由跳转，在该函数内首先会执行normalizeLocation对参数做出修正，统一修正为一个对象，因此对于push(‘&#x2F;login’)和push({path:’&#x2F;login’})来说是一样的。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://v3.router.vuejs.org/zh/guide/essentials/navigation.html">https://v3.router.vuejs.org/zh/guide/essentials/navigation.html</a></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> vue </tag>
            
            <tag> 动态路由 </tag>
            
            <tag> vueRouter </tag>
            
            <tag> 传参 </tag>
            
            <tag> history </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>问号点（链判断操作符）和双问号（空判断操作符）</title>
      <link href="/2022/02/22/note/js-gai-nian-wen-hao-dian-lian-pan-duan-cao-zuo-fu-he-shuang-wen-hao-kong-pan-duan-cao-zuo-fu/"/>
      <url>/2022/02/22/note/js-gai-nian-wen-hao-dian-lian-pan-duan-cao-zuo-fu-he-shuang-wen-hao-kong-pan-duan-cao-zuo-fu/</url>
      
        <content type="html"><![CDATA[<p>这是ES2020增加的内容</p><p> 链判断操作符(?.)：是否存在对象属性(不存在返回undefined且不再往下执行)</p><p> 空判断操作符(??)：是否值为undefined或null，是则使用默认值</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">let obj &#x3D;&#123;&#125;;obj.name.age&#x2F;&#x2F;这种情况会报错obj.name?.age&#x2F;&#x2F;这样会事先询问被访问属性是否是 null或undefined，是就返回undefinedobj.name??&quot;李华&quot;&#x2F;&#x2F;这样会返回默认值 等于 obj.name || &quot;李华&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zoom和scale的差异</title>
      <link href="/2022/02/15/note/html-css-zoom-he-scale-de-chai-yi/"/>
      <url>/2022/02/15/note/html-css-zoom-he-scale-de-chai-yi/</url>
      
        <content type="html"><![CDATA[<p>zoom 和 transform:scale 差异</p><p>1、缩放后位置：zoom的缩放是相对于左上角的；而scale默认是居中缩放；</p><pre><code>如果在开发过程中使用scale需要调整当前元素与父级元素的padding，margin值才能达到最终效果；</code></pre><p>2、缩放后元素占据空间大小：</p><p>　 zoom的缩放改变了元素占据的空间大小；而scale的缩放占据的原始尺寸不变，页面布局不会发生变化；</p><p>3、字体大小</p><p>   zoom缩放依然受限于最小12像素中文大小限制；而scale就是纯粹的对图形进行比例控制，文字50%原来尺寸。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">img</span><span class="token punctuation">&#123;</span>    <span class="token property">zoom</span><span class="token punctuation">:</span>0.5<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">img</span><span class="token punctuation">&#123;</span>    <span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">scale</span><span class="token punctuation">(</span>0.5<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   <img src="https://qiniu.guet.link/asset/202210251121382.png"></p>]]></content>
      
      
      <categories>
          
          <category> html&amp;css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 卷 </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>arguments类数组对象</title>
      <link href="/2022/02/14/note/js-gai-nian-arguments-lei-shu-zu-dui-xiang/"/>
      <url>/2022/02/14/note/js-gai-nian-arguments-lei-shu-zu-dui-xiang/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    1、在函数调用的时候，浏览器每次都会传递进两个隐式参数：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    一个是函数的上下文对象this，另一个则是封装实参的类数组对象arguments。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    2.arguments是类数组对象，除了length属性和索引元素之外没有任何Array属性。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    例如，它没有 pop方法。但是它可以被转换为一个真正的Array:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token comment">// function f5() &#123;</span>        <span class="token comment">//     // 即使没有形参,也可以用arguments</span>        <span class="token comment">//     // 可以使用slice来将arguments转换为真实数组</span>        <span class="token comment">//     var args1 = Array.prototype.slice.call(arguments);</span>        <span class="token comment">//     var args2 = [].slice.call(arguments);</span>        <span class="token comment">//     // 也可以使用Array.from()方法或者扩展运算符来将arguments转换为真实数组</span>        <span class="token comment">//     var args3 = Array.from(arguments);</span>        <span class="token comment">//     var args4 = [...arguments];</span>        <span class="token comment">// &#125;</span>        <span class="token comment">// f5('name', 'age');</span>        <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// object</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Arguments]</span>            <span class="token comment">//Object.prototype.toString === toString true 但是函数可能会导致一些错误，例如如果定义了一个toString函数，那么引用都就是这个函数了</span>            <span class="token comment">//注意，直接调用toString()方法这里不可以理解成为全局作用域调用toString()方法，即window.toString();</span>        <span class="token punctuation">&#125;</span>        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> arguments </tag>
            
            <tag> 类数组对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>到底有多少个Vue实例&amp;&amp;以及为什么组件export</title>
      <link href="/2022/02/13/note/vue-jin-jie-vue-dao-di-you-duo-shao-ge-vue-shi-li-yi-ji-wei-shi-me-zu-jian-export/"/>
      <url>/2022/02/13/note/vue-jin-jie-vue-dao-di-you-duo-shao-ge-vue-shi-li-yi-ji-wei-shi-me-zu-jian-export/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/aa7fb0a88d49">https://www.jianshu.com/p/aa7fb0a88d49</a></p><p>Vue项目每个组件都会创建一个实例，这在Vue文档上已经说明了</p><p>New Vue是根实例 通过export defaut{…} 可以创造子实例 这样就存在父子关系。</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> vue </tag>
            
            <tag> 组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端编程-编程范式</title>
      <link href="/2022/02/09/note/qian-duan-bian-cheng-bian-cheng-fan-shi-wei-wan-dai-xu/"/>
      <url>/2022/02/09/note/qian-duan-bian-cheng-bian-cheng-fan-shi-wei-wan-dai-xu/</url>
      
        <content type="html"><![CDATA[<p>命令式编程：命令式编程的主要思想是关注计算机执行的步骤，即一步一步告诉计算机先做什么再做什么，像JQuery框架。<br>声明式编程：声明式编程是以数据结构的形式来表达程序执行的逻辑。它的主要思想是告诉计算机应该做什么，但不指定具体要怎么做，像Vue框架。<br>函数式编程：函数式编程是声明式编程的子范式。主要思想是把运算过程尽量写成一系列嵌套的函数调用。</p><p>函数式编程（Functional Programming）相比面向对象编程（Object-oriented Programming）有哪些优缺点？ - 大宽宽的回答 - 知乎<br><a href="https://www.zhihu.com/question/19732025/answer/530161703">https://www.zhihu.com/question/19732025/answer/530161703</a></p><p>面向对象编程(OOP)通过封装变化使得代码更易理解。 函数式编程(FP)通过最小化变化使得代码更易理解。 – Michacel Feathers（Twitter）</p>]]></content>
      
      
      <categories>
          
          <category> 前端编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> 函数式编程 </tag>
            
            <tag> 命令式编程 </tag>
            
            <tag> 前端编程 </tag>
            
            <tag> 编程范式 </tag>
            
            <tag> 声明式编程 </tag>
            
            <tag> 未完待续 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解构</title>
      <link href="/2022/02/09/note/js-gai-nian-jie-gou/"/>
      <url>/2022/02/09/note/js-gai-nian-jie-gou/</url>
      
        <content type="html"><![CDATA[<p>解构赋值语法是一种 Javascript 表达式。通过<strong>解构赋值，</strong>可以将属性&#x2F;值 从 对象&#x2F;数组中取出，赋值给其他变量。</p><h2 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h2><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">var foo &#x3D; [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;];var [one, two, three] &#x3D; foo;console.log(one); &#x2F;&#x2F; &quot;one&quot;console.log(two); &#x2F;&#x2F; &quot;two&quot;console.log(three); &#x2F;&#x2F; &quot;three&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h2><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">var o &#x3D; &#123;p: 42, q: true&#125;;var &#123;p, q&#125; &#x3D; o;console.log(p); &#x2F;&#x2F; 42console.log(q); &#x2F;&#x2F; true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h2><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">const RGBA &#x3D; [255, 34];const [R, G, B &#x3D; 0, A &#x3D; 1] &#x3D; RGBA;console.log(R); &#x2F;&#x2F; 255console.log(G); &#x2F;&#x2F; 34console.log(B); &#x2F;&#x2F; 0console.log(A); &#x2F;&#x2F; 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="rest操作符解构"><a href="#rest操作符解构" class="headerlink" title="rest操作符解构"></a>rest操作符解构</h2><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">let arr &#x3D; [1,2,3];&#x2F;&#x2F;对象解构，对象程现；&#x2F;&#x2F;数组解构，数组呈现let &#123;...newArr&#125; &#x3D; arr;console.log(newArr);&#x2F;&#x2F;&#123;0：1,1:2,2:3&#125; 对象<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>解构就是将数组或对象的值抽离出来（属性没看出来），同时抽离方以对象或数组的形式表示，并且数组和对象之间可以相互解构。对于rest解构，不同的结构方式，结果也不同，请看<strong>rest操作符解构</strong><br>双方以key或index为基准点，值为变量名和变量值，一一解构。<br>请看以下例子：</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">var &#123;0:name, age, height&#125; &#x3D; [&quot;张三&quot;, &quot;18&quot;, &quot;177&quot;];&#x2F;&#x2F;console.log(name); &#x2F;&#x2F;张三&#x2F;&#x2F;console.log(age); &#x2F;&#x2F;undefined&#x2F;&#x2F;console.log(height); &#x2F;&#x2F;undefined&#x2F;&#x2F;只有name有值，因为只有name的key对应得上<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>opacity和rgba的区别</title>
      <link href="/2022/02/07/note/html-css-mian-shi-opacity-he-rgba-de-qu-bie/"/>
      <url>/2022/02/07/note/html-css-mian-shi-opacity-he-rgba-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">.blank</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/* opacity: 0.5; */</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>70<span class="token punctuation">,</span> 216<span class="token punctuation">,</span> 123<span class="token punctuation">,</span> 0.1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.blank span</span> <span class="token punctuation">&#123;</span>            <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 24px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>            opacity 不透明度值是0-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            rgba 前三个值就是红绿蓝 最后一个值代表不透明度是0-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            相同点：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            opacity和rgba都可以设置透明<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            不同点：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            1、但是rgba是不存在继承的 不会影响到子元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            2、opacity存在继承 会影响到子元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> html&amp;css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 卷 </tag>
            
            <tag> opacity </tag>
            
            <tag> rgba </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http和https的区别</title>
      <link href="/2022/02/05/note/ji-suan-ji-wang-luo-http-he-https-de-qu-bie/"/>
      <url>/2022/02/05/note/ji-suan-ji-wang-luo-http-he-https-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<p>http和https的区别 <strong>(前端角度)</strong></p><h2 id="1-端口号不一样"><a href="#1-端口号不一样" class="headerlink" title="1.端口号不一样"></a>1.端口号不一样</h2><p><br>http是80端口，https是443端口.<br><br>为什么浏览网页，只有域名没有端口呢？因为 http:&#x2F;&#x2F;默认80，https:&#x2F;&#x2F;默认443，ftp:&#x2F;&#x2F;默认21</p><h2 id="2-https比http更加安全"><a href="#2-https比http更加安全" class="headerlink" title="2.https比http更加安全"></a>2.https比http更加安全</h2><p><br>https有ssl证书。http可以调用https资源和接口 ,  https不能调用http资源和接口 (浏览器认为不安全)</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> http </tag>
            
            <tag> 计算机网络 </tag>
            
            <tag> ssl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>url结尾有斜杠和没有斜杠的区别</title>
      <link href="/2022/01/30/note/qian-duan-bian-cheng-url-jie-wei-you-xie-gang-he-mei-you-xie-gang-de-qu-bie/"/>
      <url>/2022/01/30/note/qian-duan-bian-cheng-url-jie-wei-you-xie-gang-he-mei-you-xie-gang-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<p>URL后面加不加“&#x2F;”有区别吗？<a href="http://localhost:8080/archive/">http://localhost:8080/archive/</a> 和 <a href="http://localhost:8080/archive">http://localhost:8080/archive</a></p><p>有区别</p><p>有&#x2F;会认为是目录，没&#x2F;会认为是文件.</p><p>加了&#x2F;浏览器会指向一个目录，默认读取文件index等，访问 <a href="http://localhost:8080/archive/index.html">http://localhost:8080/archive/index.html</a></p><p>没有&#x2F;浏览器会指向一个文件，读取其文件本身 ，访问 <a href="http://localhost:8080/archive%E3%80%82%E5%A6%82%E6%9E%9C%E6%B2%A1%E6%9C%89%E8%AF%A5%E6%96%87%E4%BB%B6%E5%86%8D%E6%89%BE%E5%90%8C%E5%90%8D%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E9%BB%98%E8%AE%A4%E6%96%87%E4%BB%B6%EF%BC%8C%E8%BF%99%E4%B8%AA%E6%97%B6%E5%80%99%E4%BC%9A%E5%8F%91%E7%94%9F301%E9%87%8D%E5%AE%9A%E5%90%91%EF%BC%8C%E4%B9%9F%E5%B0%B1%E6%98%AF%E8%B7%B3%E8%BD%AC%E5%88%B0">http://localhost:8080/archive。如果没有该文件再找同名目录下的默认文件，这个时候会发生301重定向，也就是跳转到</a> <a href="http://localhost:8080/archive/index.html%E3%80%82">http://localhost:8080/archive/index.html。</a></p><p>总结：他们之间多了一个判断与一个301跳转</p>]]></content>
      
      
      <categories>
          
          <category> 前端编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概念 </tag>
            
            <tag> url </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>作用域</title>
      <link href="/2022/01/24/note/js-gai-nian-z-zuo-yong-yu/"/>
      <url>/2022/01/24/note/js-gai-nian-z-zuo-yong-yu/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token comment">//作用域分为函数作用域和全局作用域</span>        <span class="token comment">//对于var变量在 if switch while for 等会变为执行环境下的变量 如var a 属于立即执行函数下的变量，在外部引用会报错</span>        <span class="token comment">//例子1</span>        <span class="token comment">// (function () &#123;</span>        <span class="token comment">//     if (true) &#123;</span>        <span class="token comment">//         var a = 2;</span>        <span class="token comment">//     &#125;</span>        <span class="token comment">//     console.log(a);</span>        <span class="token comment">// &#125;)()</span>        <span class="token comment">// // console.log(a);报错</span>        <span class="token comment">// //例子2</span>        <span class="token comment">// var b = 2</span>        <span class="token comment">// switch (b) &#123;</span>        <span class="token comment">//     case 2:</span>        <span class="token comment">//         var c = 1;</span>        <span class="token comment">//         break;</span>        <span class="token comment">// &#125;</span>        <span class="token comment">// console.log(c);//1</span>        <span class="token comment">// //作用域链 当立即执行函数中的e变量没有在函数作用域里找到会从全局调用</span>        <span class="token comment">// var d = 1;</span>        <span class="token comment">// var e = 1;</span>        <span class="token comment">// (function () &#123;</span>        <span class="token comment">//     var d = 2;</span>        <span class="token comment">//     console.log(d);//2</span>        <span class="token comment">//     console.log(e)//1</span>        <span class="token comment">// &#125;)();</span>        <span class="token comment">// console.log(d)//1</span>        <span class="token comment">// //变量提升</span>        <span class="token comment">//例子1</span>        <span class="token comment">// var f = 1;</span>        <span class="token comment">// (function () &#123;</span>        <span class="token comment">//     console.log(f);//undefined</span>        <span class="token comment">//     var f = 2;</span>        <span class="token comment">//     console.log(f);//2</span>        <span class="token comment">// &#125;)();</span>        <span class="token comment">// console.log(f)//1</span>        <span class="token comment">//例子2</span>        <span class="token comment">// if (a != 1) &#123;</span>        <span class="token comment">//     a = 2</span>        <span class="token comment">// &#125; else &#123;</span>        <span class="token comment">//     var a = 3</span>        <span class="token comment">// &#125;</span>        <span class="token comment">// console.log(a);//2</span>        <span class="token comment">//函数提升 函数提升比变量提升更优先</span>        <span class="token comment">//编写顺序</span>        <span class="token comment">// var g = 1;</span>        <span class="token comment">// (function () &#123;</span>        <span class="token comment">//     console.log(g);//undefined</span>        <span class="token comment">//     var g = 2;</span>        <span class="token comment">//     console.log(g);//2</span>        <span class="token comment">//     console.log(fn())//3</span>        <span class="token comment">//     function fn() &#123;</span>        <span class="token comment">//         return g + 1;</span>        <span class="token comment">//     &#125;</span>        <span class="token comment">// &#125;)();</span>        <span class="token comment">// console.log(g)//1</span>        <span class="token comment">// //编译后的顺序</span>        <span class="token comment">// var g = 1;</span>        <span class="token comment">// (function () &#123;</span>        <span class="token comment">//     function fn() &#123;</span>        <span class="token comment">//         return g + 1;</span>        <span class="token comment">//     &#125;</span>        <span class="token comment">//     var g;</span>        <span class="token comment">//     console.log(g);//undefined</span>        <span class="token comment">//     g = 2;</span>        <span class="token comment">//     console.log(g);//2</span>        <span class="token comment">//     console.log(fn())//3</span>        <span class="token comment">// &#125;)();</span>        <span class="token comment">// console.log(g)//1</span>        <span class="token comment">// //函数 因为函数在变量提升后面</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> a<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// var a;</span>        <span class="token comment">// a = 2;</span>        <span class="token comment">// function b() &#123; &#125;</span>        <span class="token comment">// console.log(a || b);</span>        <span class="token comment">// //例子2</span>        <span class="token comment">// //javascript 应用的是词法作用域 向函数定义的上一层找</span>        <span class="token comment">// //还有动态作用域 和this同概念</span>        <span class="token comment">// function test(fn) &#123;</span>        <span class="token comment">//     const a = 1;</span>        <span class="token comment">//     fn()</span>        <span class="token comment">// &#125;</span>        <span class="token comment">// const a = 2</span>        <span class="token comment">// function fn() &#123;</span>        <span class="token comment">//     console.log('a', a)</span>        <span class="token comment">// &#125;</span>        <span class="token comment">// test(fn)//2</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 作用域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>resetcss的使用</title>
      <link href="/2022/01/19/note/html-css-mian-shi-shi-me-shi-resetcss/"/>
      <url>/2022/01/19/note/html-css-mian-shi-shi-me-shi-resetcss/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reset.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- &lt;link rel="stylesheet" href="normalize.css"> --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>reset.css是一个重置样式库<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>normalize为了增强浏览器渲染的一致性，重置样式库<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.baidu.com/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> html&amp;css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 卷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是语义化标签</title>
      <link href="/2022/01/19/note/html-css-mian-shi-shi-me-shi-yu-yi-hua-biao-qian/"/>
      <url>/2022/01/19/note/html-css-mian-shi-shi-me-shi-yu-yi-hua-biao-qian/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>语义化标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    概念：    语义化标签就是看到这个标签你就知道它代表着某种意思 像button代表按钮 header页面头部 footer代表页脚        html5新增如下语义化标签：header、nav、main、article、section、aside、footer    作用：    一、易读性、可维护性高；    二、便于搜索引擎搜索seo    问题：    不针对语义化标签，IE8 html5不支持怎么办？    使用html5shiv.js插件    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> html&amp;css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> html5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组塌陷</title>
      <link href="/2022/01/15/note/js-gai-nian-shu-zu-ta-xian/"/>
      <url>/2022/01/15/note/js-gai-nian-shu-zu-ta-xian/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">var colors &#x3D; [&quot;red&quot;, &quot;blue&quot;, &quot;grey&quot;];for(let i &#x3D; 0; i&lt;colors.length;i++)&#123;    colors.splice(i,1);&#125;console.log(colors);&#x2F;&#x2F; [&quot;blue&quot;] &#x2F;&#x2F;因为splice删除的关系for到index为1的时候，指向的不是blue而是grey，这就是数组塌陷&#x2F;&#x2F;foreach也有这个问题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><h2 id="1-下标-i–"><a href="#1-下标-i–" class="headerlink" title="1. 下标 i–"></a>1. 下标 i–</h2><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">var colors &#x3D; [&quot;red&quot;, &quot;blue&quot;, &quot;grey&quot;];for(let i &#x3D; 0; i&lt;colors.length;i++)&#123;    colors.splice(i,1);    i--;&#125;console.log(colors);&#x2F;&#x2F; [] 在删除的时候给i--就能避免数组塌陷带来的问题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>又或者以下例子更好说明</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">var colors &#x3D; [&quot;red&quot;, &quot;blue&quot;, &quot;grey&quot;];for(let i &#x3D; 0; i&lt;colors.length;i++)&#123;    if(colors[i] &#x3D;&#x3D; &quot;red&quot;)&#123;     colors.splice(i,1);     i--;    &#125;&#125;console.log(colors);&#x2F;&#x2F; [&quot;blue&quot;, &quot;grey&quot;] 在删除的时候给i--就能避免数组塌陷带来的问题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-从后边删除"><a href="#2-从后边删除" class="headerlink" title="2. 从后边删除"></a>2. 从后边删除</h2><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">var colors &#x3D; [&quot;red&quot;, &quot;blue&quot;, &quot;grey&quot;];for(let i &#x3D; colors.length-1; i&gt;&#x3D; 0;i--)&#123;     colors.splice(i,1);&#125;console.log(colors);&#x2F;&#x2F; [] 这样也是没有问题的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>钉钉h5微应用起步</title>
      <link href="/2022/01/08/note/ding-ding-kai-fa-ding-ding-h5-wei-ying-yong/"/>
      <url>/2022/01/08/note/ding-ding-kai-fa-ding-ding-h5-wei-ying-yong/</url>
      
        <content type="html"><![CDATA[<p>按照以下文档开始</p><p><a href="https://open.dingtalk.com/document/resourcedownload/local-development-tools-for-microapplications">https://open.dingtalk.com/document/resourcedownload/local-development-tools-for-microapplications</a></p><p>钉钉微应用支持本地开发，（在vuecli的基础上）</p>]]></content>
      
      
      <categories>
          
          <category> 钉钉开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 钉钉开发 </tag>
            
            <tag> h5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网页应该使用奇数偶数字体</title>
      <link href="/2022/01/07/note/html-css-mian-shi-wang-ye-ying-gai-shi-yong-qi-shu-ou-shu-zi-ti-1/"/>
      <url>/2022/01/07/note/html-css-mian-shi-wang-ye-ying-gai-shi-yong-qi-shu-ou-shu-zi-ti-1/</url>
      
        <content type="html"><![CDATA[<pre><code>1.偶数：偶数让文字在浏览器上表现更好看2.ui给前端一般设计图都是偶数，这样布局和转换像素都比较方便</code></pre>]]></content>
      
      
      <categories>
          
          <category> html&amp;css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-slot插槽的使用</title>
      <link href="/2022/01/05/note/vue-slot-cha-cao-de-shi-yong/"/>
      <url>/2022/01/05/note/vue-slot-cha-cao-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>Slot 通俗的理解就是“占坑”，在组件模板中占好了位置，当使用该组件标签时候，组件标签里面的内容就会自动填坑（替换组件模板中slot位置）<br>并且可以作为承载分发内容的出口</p><h2 id="1-内容插槽"><a href="#1-内容插槽" class="headerlink" title="1. 内容插槽"></a>1. 内容插槽</h2><p>定义两个组件 home.vue、test.vue</p><p>然后在home.vue组件中引用test.vue组件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- test.vue --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-1-插槽内可以包含普通文本"><a href="#1-1-插槽内可以包含普通文本" class="headerlink" title="1.1 插槽内可以包含普通文本"></a>1.1 插槽内可以包含普通文本</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- home.vue --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>test</span><span class="token punctuation">></span></span>     Hello Word<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>test</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当组件渲染的时候，<slot></slot>会被替换为Hello Word</p><h3 id="1-2-插槽内也可以包含任何模板代码，包括HTML"><a href="#1-2-插槽内也可以包含任何模板代码，包括HTML" class="headerlink" title="1.2 插槽内也可以包含任何模板代码，包括HTML"></a>1.2 插槽内也可以包含任何模板代码，包括HTML</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- home.vue --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>test</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 添加一个 iconfont 图标 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>iconfont user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    Hello Word<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>test</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-插槽内添加其他组件"><a href="#1-3-插槽内添加其他组件" class="headerlink" title="1.3 插槽内添加其他组件"></a>1.3 插槽内添加其他组件</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- home.vue --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>test</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 添加一个图标的组件 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font-awesome-icon</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font-awesome-icon</span><span class="token punctuation">></span></span>    Hello Word<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>test</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-在插槽中使用数据"><a href="#1-4-在插槽中使用数据" class="headerlink" title="1.4 在插槽中使用数据"></a>1.4 在插槽中使用数据</h3><p>插槽跟模板其他地方一样都可以访问相同的实例属性(也就是相同的”作用域”)，而不能访问<test>的作用域</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- home.vue --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>test</span><span class="token punctuation">></span></span>//插槽可以获取到home组件里的内容Hello &#123;&#123;enhavo&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>test</span><span class="token punctuation">></span></span>data()&#123;return&#123;enhavo:'word'&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- home.vue --></span><span class="token comment">&lt;!-- 这里是获取不到name的，因为这个值是传给&lt;test>的 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>test</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>you<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    Hello &#123;&#123;name&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>test</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>规则：</strong></p><p>父级模板里的所有内容都是在父级作用域中编译的；子模板里的所有内容都是在子作用域中编译的。</p><h2 id="2-后备内容-默认内容-插槽"><a href="#2-后备内容-默认内容-插槽" class="headerlink" title="2. 后备内容(默认内容)插槽"></a>2. 后备内容(默认内容)插槽</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- test.vue --></span><span class="token comment">&lt;!-- 在slot插槽里设置默认内容 Submit --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span>Submit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在home.vue里直接使用test.vue如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- home.vue --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>test</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>test</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>那么最后设置的默认内容 Submit 将会被渲染</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>   Submit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>假如我们提供内容呢？</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- home.vue --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>test</span><span class="token punctuation">></span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>test</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>那么这个提供的内容将会替代默认的内容被渲染出来</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>   按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3-具名插槽"><a href="#3-具名插槽" class="headerlink" title="3. 具名插槽"></a>3. 具名插槽</h2><p>有时候我们一个组件里需要多个插槽</p><p>那么怎么办呢？ 对于这样的情况，<slot>元素有一个特殊的特性：name ，这个特性可以用来定义额外的插槽</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 我们希望把页头放这里 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 我们希望把主要内容放这里 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 我们希望把页脚放这里 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这时候，我们就可以使用name属性</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果一个 &lt;slot&gt; 不带name属性的话，那么它的name默认为default</p><p>在向具名插槽提供内容的时候，我们可以在&lt;template&gt; 元素上使用v-slot指令，并以参数的形式提供其名称</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>header</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>页头<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>主要内容这里.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这里.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>footer</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>页脚<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你希望更明确一点的话，那就把主体内容那个插槽里设置name&#x3D;”default”，然后把上面的内容包裹起来</p><template v-slot:default>    <p>主要内容这里.</p>  <p>这里.</p></template><p>注：v-slot只能添加在一个&lt;template&gt;上，(只有一种例外情况，下面会说)</p><h2 id="4-作用域插槽"><a href="#4-作用域插槽" class="headerlink" title="4. 作用域插槽"></a>4. 作用域插槽</h2><p>上面已经说了，插槽跟模板其他地方一样都可以访问相同的实例属性(也就是相同的”作用域”)，而不能访问<test>的作用域</p><p>那如果想访问<test>作用域该怎么办呢？</p><p>我们把需要传递的内容绑到 <slot> 上，然后在父组件中用v-slot设置一个值来定义我们提供给插槽的内容：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- test.vue --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 设置一个 usertext 然后把user绑到设置的 usertext 上 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>usertext</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;user.lastName&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 设置默认值：&#123;&#123;user.lastName&#125;&#125;获取 Jun --></span><span class="token comment">&lt;!-- 如果home.vue中给这个插槽值的话，则不显示 Jun --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 定义内容 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span><span class="token punctuation">&#123;</span><span class="token literal-property property">user</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">firstName</span><span class="token operator">:</span><span class="token string">"Fan"</span><span class="token punctuation">,</span>  <span class="token literal-property property">lastName</span><span class="token operator">:</span><span class="token string">"Jun"</span><span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在home.vue中接收传过来的值：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- home.vue --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 当被提供的内容只有默认插槽时，组件的标签才可以被当作插槽的模板来使用。这样我们就可以把 v-slot 直接用在组件上 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>test</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>slotProps<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &#123;&#123;slotProps.usertext.firstName&#125;&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>test</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就可以获得test.vue组件传过来的值了</p><p>绑定在 <slot> 元素上的特性被称为插槽 prop。在父组件中，我们可以用 v-slot 设置一个值来定义我们提供的插槽 prop 的名字，然后直接使用就好了</p><h3 id="4-1-独占默认插槽的缩写语法"><a href="#4-1-独占默认插槽的缩写语法" class="headerlink" title="4.1 独占默认插槽的缩写语法"></a>4.1 独占默认插槽的缩写语法</h3><p>在上述情况下，当被提供的内容只有默认插槽时，组件的标签才可以被当作插槽的模板来使用。这样我们就可以把 v-slot 直接用在组件上</p><p>这样写法还可以更简单，因为不带参数的v-slot就被假定为默认插槽，所以上面的代码还可以简化：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 可以把 :default 去掉，仅限于默认插槽 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>test</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>slotProps<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &#123;&#123;slotProps.usertext.firstName&#125;&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>test</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注： 默认插槽 的缩写语法不能和 具名插槽 混用，因为它会导致作用域不明确</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 可以把 :default 去掉，仅限于默认插槽 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>test</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>slotProps<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &#123;&#123;slotProps.usertext.firstName&#125;&#125;    <span class="token comment">&lt;!-- 无效，会警告 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>other</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>otherSlotProps<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      slotProps is NOT available here    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>test</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>只要出现多个插槽</strong>，始终要为所有的插槽使用完整的基于&lt;template&gt;的语法：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>test</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>slotProps<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &#123;&#123; slotProps.user.firstName &#125;&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>other</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>otherSlotProps<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    ...  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>test</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-解构插槽Prop"><a href="#4-2-解构插槽Prop" class="headerlink" title="4.2 解构插槽Prop"></a>4.2 解构插槽Prop</h3><p>因为 作用域插槽 的内部工作原理是将你的插槽内容包括在一个传入单个参数的函数里,那么这个参数实际上是一个对象变量</p><p>这意味着 v-slot 的值实际上可以是任何能够作为函数定义中的参数的 JS 表达式</p><p>所以本来是这样写的：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>test</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>slotProps<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &#123;&#123;slotProps.usertext.firstName&#125;&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>test</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还可以这样写：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>test</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>&#123;usertext&#125;</span><span class="token punctuation">></span></span>    &#123;&#123;usertext.firstName&#125;&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>test</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样可以使模板更简洁，尤其是在该插槽提供了多个 prop 的时候。它同样开启了 prop 重命名等其它可能，</p><p>例如可以将 usertext 重命名为 person：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>test</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>&#123;usertext:person&#125;</span><span class="token punctuation">></span></span>    &#123;&#123;person.firstName&#125;&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>test</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>甚至可以定义 后备内容(默认内容)，用于插槽没有值时可以使用默认内容的情形：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>test</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;usertext=&#123;firstName:'Yang'&#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &#123;&#123;usertext.firstName&#125;&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>test</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-动态插槽名-2-6-0新增"><a href="#5-动态插槽名-2-6-0新增" class="headerlink" title="5. 动态插槽名(2.6.0新增)"></a>5. 动态插槽名(2.6.0新增)</h2><blockquote><p>动态指令参数 简单说就是js的计算属性，如果data中有dynamicSlotName:user就是v-slot:user<br>动态指令参数也可以用在v-slot上，来定义动态的插槽名：</p></blockquote><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base-layout</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>[dynamicSlotName]</span><span class="token punctuation">></span></span>    ...  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>base-layout</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-具名插槽的缩写-2-6-0新增"><a href="#6-具名插槽的缩写-2-6-0新增" class="headerlink" title="6. 具名插槽的缩写(2.6.0新增)"></a>6. 具名插槽的缩写(2.6.0新增)</h2><p>跟 v-on 和 v-bind 一样，v-slot 也有缩写，即把参数之前的所有内容 v-slot: 替换为字符 #。例如 v-slot:header 可以被重写为 #header：</p><p>原来是这样写的：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>header</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Here might be a page title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>A paragraph for the main content.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>And another one.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>footer</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Here some contact info<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在可以这样写：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#header</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Here might be a page title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>A paragraph for the main content.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>And another one.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#footer</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Here some contact info<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注：该指令和其他指令一样，只在其有参数的时候才可用</strong></p><p>下面的书写形式是错误的：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>test</span> <span class="token attr-name">#</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123; usertext &#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  &#123;&#123; usertext.firstName &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>test</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果希望使用缩写的话，必须始终以明确插槽名取而代之：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>test</span> <span class="token attr-name">#default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123; usertext &#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  &#123;&#123; usertext.firstName &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>test</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="7-插槽可被复用"><a href="#7-插槽可被复用" class="headerlink" title="7. 插槽可被复用"></a>7. 插槽可被复用</h2><p>插槽 prop 允许我们将插槽转换为可复用的模板，这些模板可以基于输入的 prop 渲染出不同的内容。 这在设计封装数据逻辑同时允许父级组件自定义部分布局的可复用组件时是最有用的。</p><p>例如，我们要实现一个 &lt;todo-list&gt; 组件，它是一个列表且包含布局和过滤逻辑：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span>    <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todo in filteredTodos<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">v-bind:</span>key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todo.id<span class="token punctuation">"</span></span>  <span class="token punctuation">></span></span>    &#123;&#123; todo.text &#125;&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以将每个 todo 作为父级组件的插槽，以此通过父级组件对其进行控制，然后将 todo 作为一个插槽 prop 进行绑定：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span>    <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todo in filteredTodos<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">v-bind:</span>key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todo.id<span class="token punctuation">"</span></span>  <span class="token punctuation">></span></span>    <span class="token comment">&lt;!--    我们为每个 todo 准备了一个插槽，    将 `todo` 对象作为一个插槽的 prop 传入。    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todo<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>todo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!-- 后备内容 --></span>      &#123;&#123; todo.text &#125;&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在当我们使用 &lt;todo-list&gt; 组件的时候，我们可以选择为 todo 定义一个不一样的 &lt;template&gt; 作为替代方案，并且可以从子组件获取数据：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo-list</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>todos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todos<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>todo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123; todo &#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todo.isComplete<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>✓<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    &#123;&#123; todo.text &#125;&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo-list</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> vue </tag>
            
            <tag> 插槽 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ajax请求时content-type详解</title>
      <link href="/2022/01/04/note/js-zong-jie-ajax-qing-qiu-shi-content-type-xiang-jie/"/>
      <url>/2022/01/04/note/js-zong-jie-ajax-qing-qiu-shi-content-type-xiang-jie/</url>
      
        <content type="html"><![CDATA[<p>请求头的content-type它规定了请求体用什么样的格式来进行传递，给服务器做解析。服务器是按照content-type规定的格式来解析请求体。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string-property property">"Content-Type"</span><span class="token operator">:</span> <span class="token string">"application/x-www-form-urlencoded;charset:utf-8"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意，填写的时候最好加上 charset:utf-8 ，否则服务端以默认的方式进行的解析可能会导致乱码</p><p><a href="https://juejin.cn/post/6844903779377086478#comment">https://juejin.cn/post/6844903779377086478#comment</a></p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>历史消息导致分页错误记录</title>
      <link href="/2021/12/31/note/xiang-mu-qian-duan-fen-ye-cuo-wu-ji-lu/"/>
      <url>/2021/12/31/note/xiang-mu-qian-duan-fen-ye-cuo-wu-ji-lu/</url>
      
        <content type="html"><![CDATA[<p>发生位置：聊天页</p><p>发生背景：进入页面，自动加载第一页数据后，发送新消息，此时下拉加载，会发现数据有重复</p><p><img src="https://qiniu.guet.link/asset/202208240348479.png"></p><p><img src="https://qiniu.guet.link/asset/202208240349559.png"></p><p>bug原因：当我们进入页面时已经加载了第1页分页，此后的加载都是在这第1页的基础上加载的。但如果有新数据产生，程序并不会判断<br>哪条数据是我们第1页的数据，所以就会造成数据加载重复。</p><p>解决思路：当加载第1页数据时，将第1页最大的数据ID进行记录。以后每次加载下一页数据都带上这个最大ID，并且后端要以这个最大ID来请求数据，where id &lt;&#x3D; 最大ID ,这样就完全没有问题了。</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bfc的理解和作用</title>
      <link href="/2021/12/31/note/html-css-mian-shi-bfc-de-li-jie-he-zuo-yong/"/>
      <url>/2021/12/31/note/html-css-mian-shi-bfc-de-li-jie-he-zuo-yong/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">.float,        .normal</span> <span class="token punctuation">&#123;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>            <span class="token property">margin-right</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.float</span> <span class="token punctuation">&#123;</span>            <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>            <span class="token comment">/* 浮动会脱离文档流  使其它元素重新排列*/</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.normal</span> <span class="token punctuation">&#123;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> violet<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.bfc</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/* display: flex; */</span>            <span class="token comment">/* position: absolute; */</span>            <span class="token comment">/* float: left; */</span>            <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/* 触发条件：        float：left|right;  不是none        overflow:hidden|scroll|auto 不是visible        display:inline-block | table-cell |table-caption|flex|grid; 不是block none inline        position:absolute|fixed 非relative */</span>        <span class="token comment">/* 概念：BFC是一个封闭的独立空间，使得里面的元素不会影响到外边         作用：常用来解决浮动（见2）、margin重合（见1）、        使用：添加一个父标签，设置如上属性 */</span>        <span class="token comment">/* 1、margin重合：外边距的重叠只产生在普通流文档的上下外边距之间， 只有 块元素 会发生外边距重叠，行内元素 和 行内块元素 都不会发生外边距重叠问题         有两种情况：一、相邻兄弟元素的marin-bottom和margin-top的值发生重叠；二、父级和第一个/最后一个子元素的margin合并*/</span>        <span class="token comment">/* 2、float会脱离文档流，会导致无法给float元素设置边框、影响非浮动元素的情况 */</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bfc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>float<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>normal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> html&amp;css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> html </tag>
            
            <tag> bfc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>axios的使用</title>
      <link href="/2021/12/30/note/js-zong-jie-axios-de-shi-yong/"/>
      <url>/2021/12/30/note/js-zong-jie-axios-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="title-axios的使用-转载"><a href="#title-axios的使用-转载" class="headerlink" title="title: axios的使用 转载"></a>title: axios的使用 <a href="https://blog.csdn.net/weixin_43790653/article/details/123901742">转载</a></h2><p>axios是一个专注于网络请求的库。 不同于jquery，功能复杂，既可以操作dom，又可以做动画，还可以发ajax请求。axios是一个专注于网络请求的库。</p><h2 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1. 基本使用"></a>1. 基本使用</h2><h2 id="1-1-导入库文件"><a href="#1-1-导入库文件" class="headerlink" title="1.1 导入库文件"></a>1.1 导入库文件</h2><p>在js中导入axios的库文件后，会直接在全局挂载一个axios方法，就可以直接使用了。</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">&lt;!-- 导入axios的库文件 --&gt;&lt;script src&#x3D;&quot;&#x2F;axios.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script&gt;    console.log(axios);&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/9529ca41aa524df8afff403fbf32fda8.png" alt="导入axios的库文件"></p><p>在控制台打印axios可以看到，它是一个方法，我们现在就可以直接使用了。</p><h2 id="1-2-基本语法"><a href="#1-2-基本语法" class="headerlink" title="1.2 基本语法"></a>1.2 基本语法</h2><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">axios(&#123;   &#x2F;&#x2F;请求方式，&#39;GET&#39;或者&#39;POST&#39;    method: &#39;GET&#39;,    &#x2F;&#x2F;请求地址    url: &#39;&#39;&#125;).then(res &#x3D;&gt; &#123;&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>axios是基于promise的封装：</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">const res &#x3D; axios(&#123;    method: &#39;GET&#39;,    url: &#39;http:&#x2F;&#x2F;www.liulongbin.top:3006&#x2F;api&#x2F;getbooks&#39;&#125;)console.log(res);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/9529ca41aa524df8afff403fbf32fda8.png" alt="axios是基于promise的封装"></p><p>Promise对象可以通过 .then的方式拿到获取成功后的结果。</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">axios(&#123;    method: &#39;GET&#39;,    url: &#39;http:&#x2F;&#x2F;www.liulongbin.top:3006&#x2F;api&#x2F;getbooks&#39;&#125;).then(res &#x3D;&gt; console.log(res))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到获取成功了。到此为对基本语法的使用解释。</p><h2 id="1-3-结果分析"><a href="#1-3-结果分析" class="headerlink" title="1.3 结果分析"></a>1.3 结果分析</h2><p>但是，axios方法拿到的结果就是服务器请求到的结果吗？我们使用postman来测试一下。</p><p>postman显示的是服务器请求后拿到的返回结果。我们可以看到，和axios拿到的结果并不一样，经过比对，我们可以发现，axios拿到的对象结果中有一个data属性，那里面放着的才是服务器请求的真正的返回结果。</p><p>到此，我们可以得到axios拿到的对象结果和服务器请求的真正的返回结果之间的关系：</p><p><img src="https://img-blog.csdnimg.cn/f54ae511345047feae361d6977306fc4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAd2h1LeawtOiNiQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="数据格式"></p><p>要想直接拿到真实数据的格式，只需要res.data。</p><h2 id="1-4-参数传递"><a href="#1-4-参数传递" class="headerlink" title="1.4 参数传递"></a>1.4 参数传递</h2><p>【基本语法】 params中写GET方法的传参，data中写POST方法的传参。</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">axios(&#123;    &#x2F;&#x2F;请求方式，&#39;GET&#39;或者&#39;POST&#39;    method: &#39;GET&#39;,    &#x2F;&#x2F;请求地址    url: &#39;&#39;,    &#x2F;&#x2F;url中的查询参数，GET方法的传参    params: &#123;&#125;,    &#x2F;&#x2F;请求体参数，POST方法的传参    data: &#123;&#125;&#125;).then(res &#x3D;&gt; &#123;&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>get传参演示：</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">axios(&#123;    method: &#39;GET&#39;,    url: &#39;http:&#x2F;&#x2F;www.liulongbin.top:3006&#x2F;api&#x2F;getbooks&#39;,    params: &#123;        id: 1    &#125;,&#125;).then(res &#x3D;&gt; console.log(res))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/934269b977f842bb959e59690ff99d68.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAd2h1LeawtOiNiQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="get请求成功"></p><p>post传参演示：</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">axios(&#123;    method: &#39;POST&#39;,    url: &#39;http:&#x2F;&#x2F;www.liulongbin.top:3006&#x2F;api&#x2F;post&#39;,    data: &#123;        name: &#39;zs&#39;,        age: 20    &#125;,&#125;).then(res &#x3D;&gt; console.log(res))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/3ffb398a7faa4c919d4ad33951280806.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAd2h1LeawtOiNiQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="post请求成功"></p><h2 id="1-5-方法简化"><a href="#1-5-方法简化" class="headerlink" title="1.5.方法简化"></a>1.5.方法简化</h2><h3 id="（1）通过async和await语法糖的方式直接拿到返回值"><a href="#（1）通过async和await语法糖的方式直接拿到返回值" class="headerlink" title="（1）通过async和await语法糖的方式直接拿到返回值"></a>（1）通过<strong>async</strong>和<strong>await</strong>语法糖的方式直接拿到返回值</h3><p>因为axios方法获取的结果是一个Promise对象，所以我们可以通过async和await的方式直接拿到返回值，不需要再通过调用.then的方式了。</p><p>给’#btnGet’按钮绑定一个点击事件，点击后发起axios请求。通过async和await的方式可以直接拿到返回值。</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">document.querySelector(&#39;#btnGet&#39;).addEventListener(&#39;click&#39;, async function () &#123;    const res &#x3D; await axios(&#123;        method: &#39;GET&#39;,        url: &#39;http:&#x2F;&#x2F;www.liulongbin.top:3006&#x2F;api&#x2F;getbooks&#39;,        &#x2F;&#x2F; params: &#123;        &#x2F;&#x2F;     id: 1        &#x2F;&#x2F; &#125;    &#125;)    console.log(res);&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/94c8ccc0737047ecb577406ad7fa3bc2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAd2h1LeawtOiNiQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="请求结果"></p><h3 id="（2）解构赋值拿到服务器请求到的真正数据"><a href="#（2）解构赋值拿到服务器请求到的真正数据" class="headerlink" title="（2）解构赋值拿到服务器请求到的真正数据"></a>（2）解构赋值拿到服务器请求到的真正数据</h3><p>由第3小节我们知道，axios拿到的对象结果在服务器请求到的真正数据外面套了一层壳子，存在它的data属性中，我们可以通过对象解构的方式直接拿到服务器请求到的真正数据。</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">document.querySelector(&#39;#btnGet&#39;).addEventListener(&#39;click&#39;, async function () &#123;    const &#123;data&#125; &#x3D; await axios(&#123;        method: &#39;GET&#39;,        url: &#39;http:&#x2F;&#x2F;www.liulongbin.top:3006&#x2F;api&#x2F;getbooks&#39;,    &#125;)    console.log(data);&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/10fd94b286094fcd9ae74338443074ca.png" alt="data结构结果"></p><p>（3）解构赋值重命名<br>服务器请求到的真正数据有三个属性，data，status，msg，其中data是我们最关心的，存着需要的数据项，我们只希望取到这个data数组，这个比较简单，因为解构赋值已经拿到服务器请求到的真正数据了，并存在data变量中，所以只需要访问这个变量的data属性就能拿到，即data.data，但是这样很容易混淆， 所以我们在解构赋值的时候给data换个名字 { data: res } 。</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">document.querySelector(&#39;#btnGet&#39;).addEventListener(&#39;click&#39;, async function () &#123;    const &#123; data: res &#125; &#x3D; await axios(&#123;        method: &#39;GET&#39;,        url: &#39;http:&#x2F;&#x2F;www.liulongbin.top:3006&#x2F;api&#x2F;getbooks&#39;,    &#125;)    console.log(res.data);&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样访问就从 res.data.data 变成了 res.data</p><h2 id="1-6-axios直接发起GET请求和POST请求"><a href="#1-6-axios直接发起GET请求和POST请求" class="headerlink" title="1.6 axios直接发起GET请求和POST请求"></a>1.6 axios直接发起GET请求和POST请求</h2><p>基本语法：</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">&#x2F;&#x2F;axios直接发起GET请求axios.get(&#39;url地址&#39;, &#123;    &#x2F;&#x2F;GET参数    params: &#123;&#125;&#125;)&#x2F;&#x2F;axios直接发起POST请求axios.post(&#39;url地址&#39;, &#123; &#x2F;&#x2F;POST参数 &#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">document.querySelector(&#39;#btnGet&#39;).addEventListener(&#39;click&#39;, async function () &#123;    const &#123; data: res &#125; &#x3D; await axios.get(&#39;http:&#x2F;&#x2F;www.liulongbin.top:3006&#x2F;api&#x2F;getbooks&#39;, &#123;        params: &#123;            id: 1        &#125;    &#125;)    console.log(res.data);&#125;)document.querySelector(&#39;#btnPost&#39;).addEventListener(&#39;click&#39;, async function () &#123;    const &#123; data: res &#125; &#x3D; await axios.post(&#39;http:&#x2F;&#x2F;www.liulongbin.top:3006&#x2F;api&#x2F;post&#39;, &#123;        name: &#39;zs&#39;,        gender: &#39;女&#39;    &#125;)    console.log(res);&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://blog.csdn.net/weixin_43790653/article/details/123901742">https://blog.csdn.net/weixin_43790653/article/details/123901742</a></p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> axios </tag>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uniapp中的this指向哪里</title>
      <link href="/2021/12/29/note/uniapp-mian-shi-uniapp-wang-luo-qing-qiu-hui-diao-this-zhi-xiang-na-li/"/>
      <url>/2021/12/29/note/uniapp-mian-shi-uniapp-wang-luo-qing-qiu-hui-diao-this-zhi-xiang-na-li/</url>
      
        <content type="html"><![CDATA[<p>this不指向组件，但无需关心他具体指向哪里，毕竟uniapp的网络请求是封装过后的api，只要确定拿到想要的this就好了。</p><p>比如可以直接在外部设置保存this的that，回调函数利用词法作用域使用that。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//请求外的log指向组件</span>uni<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">'http://192.168.2.30:3000/app/friend/detail'</span><span class="token punctuation">,</span><span class="token literal-property property">header</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token string-property property">'content-type'</span><span class="token operator">:</span> <span class="token string">'application/json'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span><span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// console.log(this);</span>                    <span class="token comment">//1指向回调函数的调用 ƒ success(_x) &#123;return _success.apply(this, arguments);&#125;</span><span class="token comment">//2指向回调函数体</span><span class="token comment">//反正不指向组件</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//undefined 因为到这里的时候是第2种情况 外部this指向回调函数体</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//App._post_form中的this指向组件对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> uniapp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> this </tag>
            
            <tag> uniapp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>link和script的加载和阻塞问题</title>
      <link href="/2021/12/26/note/html-css-gai-nian-link-he-script-de-jia-zai-he-zu-sai-wen-ti/"/>
      <url>/2021/12/26/note/html-css-gai-nian-link-he-script-de-jia-zai-he-zu-sai-wen-ti/</url>
      
        <content type="html"><![CDATA[<pre><code>    link：link标签引入css资源时在火狐浏览器中是异步加载的，在谷歌浏览器中是同步加载的。但如果是通过style标签引入样式，则不论何种浏览器，均为同步加载。    js:脚本可以通过添加 async 或 defer 的方式来开启异步下载，开启异步下载则不会阻塞页面渲染。    但下载完成后，加 async 的脚本会立即执行，执行时会阻塞页面渲染；        而加 defer的脚本会等样式、dom结构加载完成后才会执行，此时页面已经渲染完了。所以只有同步脚本和个别情况下加了 async的脚本会阻塞页面渲染。</code></pre>]]></content>
      
      
      <categories>
          
          <category> html&amp;css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> 加载 </tag>
            
            <tag> 渲染 </tag>
            
            <tag> 阻塞 </tag>
            
            <tag> 异步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取js对象属性的多种方式</title>
      <link href="/2021/12/25/note/js-zong-jie-huo-qu-dui-xiang-shu-xing-de-duo-chong-fang-shi/"/>
      <url>/2021/12/25/note/js-zong-jie-huo-qu-dui-xiang-shu-xing-de-duo-chong-fang-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为什么要讨论获取属性的多种方式，通常我们访问对象使用的是for…in，而for…in有时候并不符合我们的预期</p><p>for in</p><p>主要用于遍历对象的可枚举属性，包括自有属性、继承自原型的属性</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">var obj &#x3D; &#123;&quot;name&quot;:&quot;tom&quot;,&quot;sex&quot;:&quot;male&quot;&#125;； Object.defineProperty(obj, &quot;age&quot;, &#123;value:&quot;18&quot;, enumerable:false&#125;);&#x2F;&#x2F;增加不可枚举的属性age Object.prototype.protoPer1 &#x3D; function()&#123;console.log(&quot;name is tom&quot;);&#125;;&#x2F;&#x2F;通过原型链增加属性，为一个函数 Object.prototype.protoPer2 &#x3D; 2;&#x2F;&#x2F;通过原型链增加属性，为一个整型值2 console.log(&quot;For In : &quot;); for(var a in obj)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下这些方法都不会遍历原型</p><h2 id="1-Object-keys"><a href="#1-Object-keys" class="headerlink" title="1. Object.keys"></a>1. Object.keys</h2><p>此方法返回一个数组，元素均为对象自有可枚举的属性</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">var obj &#x3D; &#123;&quot;name&quot;:&quot;tom&quot;,&quot;sex&quot;:&quot;male&quot;&#125;； Object.defineProperty(obj, &quot;age&quot;, &#123;value:&quot;18&quot;, enumerable:false&#125;);&#x2F;&#x2F;增加不可枚举的属性age Object.prototype.protoPer1 &#x3D; function()&#123;console.log(&quot;name is tom&quot;);&#125;;&#x2F;&#x2F;通过原型链增加属性，为一个函数 Object.prototype.protoPer2 &#x3D; 2;通过原型链增加属性，为一个整型值2 console.log(&quot;Object.keys:&quot;) console.log(Object.keys(obj));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-Object-getOwnPropertyNames"><a href="#2-Object-getOwnPropertyNames" class="headerlink" title="2. Object.getOwnPropertyNames"></a>2. Object.getOwnPropertyNames</h2><p><strong>Object.getOwnPropertyNames()</strong> 方法返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括 Symbol 值作为名称的属性）组成的数组。</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">Object.getOwnPropertyNames(obj)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-Object-getOwnPropertySymbols"><a href="#3-Object-getOwnPropertySymbols" class="headerlink" title="3. Object.getOwnPropertySymbols"></a>3. Object.getOwnPropertySymbols</h2><p><strong>Object.getOwnPropertySymbols()</strong> 方法返回一个给定对象自身的所有 Symbol 属性的数组。</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">Object.getOwnPropertySymbols(obj)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-Reflect-ownKeys"><a href="#4-Reflect-ownKeys" class="headerlink" title="4. Reflect.ownKeys()"></a>4. Reflect.ownKeys()</h2><p>静态方法 Reflect.ownKeys() 返回一个由目标对象自身的属性键组成的数组。也就是说包括了symbol和不可枚举属性。</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> 对象api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-Vue.use()的作用及原理</title>
      <link href="/2021/12/25/note/vue-vue.use-de-zuo-yong-ji-yuan-li/"/>
      <url>/2021/12/25/note/vue-vue.use-de-zuo-yong-ji-yuan-li/</url>
      
        <content type="html"><![CDATA[<p>[原理]<a href="https://www.jianshu.com/p/0b8b6f2e5a82">https://www.jianshu.com/p/0b8b6f2e5a82</a> </p><p>[Vue.use对Echarts的应用]<a href="https://blog.csdn.net/qq_43299703/article/details/120447626">https://blog.csdn.net/qq_43299703/article/details/120447626</a></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webkit前缀是什么</title>
      <link href="/2021/12/15/note/html-css-webkit-qian-zhui-shi-shi-me/"/>
      <url>/2021/12/15/note/html-css-webkit-qian-zhui-shi-shi-me/</url>
      
        <content type="html"><![CDATA[<p>CSS3中新增了一些属性，例如box-reduis、box-orient、text-overflow等等，而这些属性在以往的版本中是不存在的，或者不被支持的，因此，针对不同的浏览器，规定其内核名称让它们可以对这些新增属性进行解析。这看上去是一个合理的解释，即-moz-是针对firefox的，-webkit-是针对safari和chrome的。</p><p>-moz代表firefox浏览器私有属性</p><p>-ms代表ie浏览器私有属性</p><p>-webkit代表safari、chrome私有属性</p><p>在为CSS标准还未确定时，部分浏览器已经根据最初草案实现了部分功能，为了与之后确定下来的标准进行兼容，所以每种浏览器使用了自己的私有前缀与标准进行区分，当标准确立后，各大浏览器将逐步支持不带前缀的css3新属性。</p><p>*不是说webkit前缀只能webkit内核的浏览器才支持，像火狐浏览器，它出于主流开发考虑也支持 -webkit 前缀的解析.</p><p>示例如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"> <span class="token selector">div</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span>300px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span>#ff9900<span class="token punctuation">;</span><span class="token property">-moz-box-shadow</span><span class="token punctuation">:</span> 10px 10px 5px #888888<span class="token punctuation">;</span> <span class="token comment">/* 老的 Firefox */</span><span class="token property">box-shadow</span><span class="token punctuation">:</span> 10px 10px 5px #888888<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.qy.cn/jszx/detail/8670.html">https://www.qy.cn/jszx/detail/8670.html</a></p>]]></content>
      
      
      <categories>
          
          <category> html&amp;css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> webkit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后端无法判断axios为ajax请求</title>
      <link href="/2021/12/05/note/js-bug-hou-duan-wu-fa-pan-duan-axios-wei-ajax-qing-qiu/"/>
      <url>/2021/12/05/note/js-bug-hou-duan-wu-fa-pan-duan-axios-wei-ajax-qing-qiu/</url>
      
        <content type="html"><![CDATA[<p>我们知道无论jquery的$ajax还是axios都是基于xhr的ajax请求，但是我在使用axios的时候却无法对请进行ajax判断。</p><p>原因是axios的请求默认缺少了X-Requested-With: XMLHttpRequest这个请求头，这个请求头是给服务器用的，意思是告诉其是一个ajax请求。</p><p>所以有如下代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'https://yoshop.guet.link/index.php?s=/store/passport/login'</span><span class="token punctuation">,</span>    <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string-property property">"X-Requested-With"</span><span class="token operator">:</span> <span class="token string">"xmlhttprequest"</span><span class="token comment">//添加这个代码即可</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> data<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考：<a href="https://segmentfault.com/q/1010000023310303">https://segmentfault.com/q/1010000023310303</a></p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> axios </tag>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6大总结</title>
      <link href="/2021/11/28/note/js-mian-shi-es6-da-zong-jie/"/>
      <url>/2021/11/28/note/js-mian-shi-es6-da-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>ES6可以特指ES2015，也可以统称ES2015之后的所有标准。本文中ES6特指ES2015。ES678…特性比较多，在这里列举几个常用的：</p><h2 id="ES6新特性（2015）"><a href="#ES6新特性（2015）" class="headerlink" title="ES6新特性（2015）"></a>ES6新特性（2015）</h2><ul><li>类</li><li>模块化</li><li>箭头函数</li><li>函数参数默认值</li><li>模板字符串</li><li>解构赋值</li><li>扩展操作符</li><li>对象属性简写</li><li>Promise</li><li>Let与Const</li><li>Symbol</li><li>proxy</li><li>对象api</li><li>数组api</li></ul><h3 id="1-类（class）"><a href="#1-类（class）" class="headerlink" title="1. 类（class）"></a>1. 类（class）</h3><p>对熟悉纯面向对象语言的开发者来说，都会对class有一种特殊的情怀。ES6 引入了class（类），让JavaScript的面向对象编程变得更加简单和易于理解。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 构造函数，实例化的时候将会被调用，如果不指定，那么会有一个不带参数的默认构造函数.</span>   <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>color</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">// toString 是原型对象上的属性</span>   <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'name:'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">',color:'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token keyword">var</span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'dog'</span><span class="token punctuation">,</span><span class="token string">'white'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//实例化Animal</span>animal<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>animal<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>animal<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'toString'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>animal<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'toString'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">action</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 子类必须要在constructor中指定super 函数，否则在新建实例的时候会报错.</span>   <span class="token comment">// 如果没有置顶consructor,默认带super函数的constructor将会被添加、</span>   <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">'cat'</span><span class="token punctuation">,</span><span class="token string">'white'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>action <span class="token operator">=</span> action<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">'catch'</span><span class="token punctuation">)</span>cat<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 实例cat 是 Cat 和 Animal 的实例，和Es5完全一致。</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat <span class="token keyword">instanceof</span> <span class="token class-name">Cat</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat <span class="token keyword">instanceof</span> <span class="token class-name">Animal</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-模块化-Module"><a href="#2-模块化-Module" class="headerlink" title="2. 模块化(Module)"></a>2. 模块化(Module)</h3><h4 id="导出-export"><a href="#导出-export" class="headerlink" title="导出(export)"></a>导出(export)</h4><p>ES6允许在一个模块中使用export来导出多个变量或函数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'Rainbow'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="导入-import"><a href="#导入-import" class="headerlink" title="导入(import)"></a>导入(import)</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>myModule<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'myModule'</span><span class="token punctuation">;</span><span class="token comment">// main.js</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>name<span class="token punctuation">,</span>age<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'test'</span><span class="token punctuation">;</span><span class="token comment">// test.js</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-箭头（Arrow）函数"><a href="#3-箭头（Arrow）函数" class="headerlink" title="3. 箭头（Arrow）函数"></a>3. 箭头（Arrow）函数</h3><ul><li>箭头函数没有自己的this，如果在函数中调用this，会在定义时的词法环境中寻找，而非调用时。</li><li>箭头函数相比其它函数写起来更简单</li></ul><h3 id="4-函数参数默认值"><a href="#4-函数参数默认值" class="headerlink" title="4. 函数参数默认值"></a>4. 函数参数默认值</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>height <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-模板字符串"><a href="#5-模板字符串" class="headerlink" title="5. 模板字符串"></a>5. 模板字符串</h3><p>ES6支持模板字符串，使得字符串的拼接更加的简洁、直观。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Your name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>first<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>last<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-解构赋值"><a href="#6-解构赋值" class="headerlink" title="6. 解构赋值"></a>6. 解构赋值</h3><ul><li>常用写法是声明、赋值方都是对象或数组。</li><li>声明方key对应赋值方key，声明的值 等于 赋值方对应的value 。key对应不上，声明的值就是undefined。</li><li>声明的name等于声明方的value。</li></ul><p>数组</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span> <span class="token comment">//先声明变量</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> student <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'Ming'</span><span class="token punctuation">,</span>  <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token string">'18'</span><span class="token punctuation">,</span>  <span class="token literal-property property">city</span><span class="token operator">:</span><span class="token string">'Shanghai'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//name重命名firstName</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"firstName"</span><span class="token punctuation">,</span>age<span class="token punctuation">,</span>city<span class="token punctuation">&#125;</span> <span class="token operator">=</span> student<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-扩展操作符-Spread-operator"><a href="#7-扩展操作符-Spread-operator" class="headerlink" title="7. 扩展操作符(Spread operator)"></a>7. 扩展操作符(Spread operator)</h3><p>…可以在函数调用&#x2F;数组构造&#x2F;对象构造时, 将数组表达式&#x2F;对象表达式或者string在语法层面展开。值得注意的是对 对象 的支持是在ECMAScript 2018中增加的。</p><h4 id="1-函数调用"><a href="#1-函数调用" class="headerlink" title="(1) 函数调用"></a>(1) 函数调用</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//不使用延展操作符</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> numbers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用延展操作符</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token operator">...</span>numbers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-数组构造-x2F-对象构造"><a href="#2-数组构造-x2F-对象构造" class="headerlink" title="(2) 数组构造&#x2F;对象构造"></a>(2) 数组构造&#x2F;对象构造</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> stuendts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Jine'</span><span class="token punctuation">,</span><span class="token string">'Tom'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">const</span> persons <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tony'</span><span class="token punctuation">,</span><span class="token operator">...</span> stuendts<span class="token punctuation">,</span><span class="token string">'Aaron'</span><span class="token punctuation">,</span><span class="token string">'Anna'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>conslog<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>persions<span class="token punctuation">)</span><span class="token comment">// ["Tony", "Jine", "Tom", "Aaron", "Anna"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3-拷贝"><a href="#3-拷贝" class="headerlink" title="(3) 拷贝"></a>(3) 拷贝</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 等同于 arr.slice()</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token comment">//[1, 2, 3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4-连接"><a href="#4-连接" class="headerlink" title="(4) 连接"></a>(4) 连接</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr1<span class="token punctuation">,</span><span class="token operator">...</span>arr2<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="5-解构"><a href="#5-解构" class="headerlink" title="(5) 解构"></a>(5) 解构</h4><h3 id="8-对象属性简写"><a href="#8-对象属性简写" class="headerlink" title="8. 对象属性简写"></a>8. 对象属性简写</h3><p>属性赋值时可以直接写一个变量。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> name<span class="token operator">=</span><span class="token string">'Ming'</span><span class="token punctuation">,</span>age<span class="token operator">=</span><span class="token string">'18'</span><span class="token punctuation">,</span>city<span class="token operator">=</span><span class="token string">'Shanghai'</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> student <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token punctuation">,</span>    age<span class="token punctuation">,</span>    city<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&#123;name: "Ming", age: "18", city: "Shanghai"&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-Promise"><a href="#9-Promise" class="headerlink" title="9. Promise"></a>9. Promise</h3><p>避免回调地域</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> waitSecond <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>waitSecond    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1秒后输出"Hello"</span>      <span class="token keyword">return</span> waitSecond<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2秒后输出"Hi"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-支持let与const"><a href="#10-支持let与const" class="headerlink" title="10. 支持let与const"></a>10. 支持let与const</h3><p>并且他们支持块级作用域</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//-1 or Error“ReferenceError: a is not defined”</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-Symbol"><a href="#11-Symbol" class="headerlink" title="11. Symbol"></a>11. Symbol</h3><p>新的基本数据类型</p><h3 id="12-Proxy"><a href="#12-Proxy" class="headerlink" title="12. Proxy"></a>12. Proxy</h3><p>定义：修改某些操作的默认行为</p><p>声明：const proxy &#x3D; new Proxy(target, handler)</p><p>入参</p><ul><li>target：拦截的目标对象</li><li>handler：定制拦截行为</li></ul><p>方法</p><p>Proxy.revocable()：返回可取消的Proxy实例(返回{ proxy, revoke }，通过revoke()取消代理)</p><h3 id="13-对象api"><a href="#13-对象api" class="headerlink" title="13. 对象api"></a>13. 对象api</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//合并对象(浅拷贝)，返回原对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="14-数组api"><a href="#14-数组api" class="headerlink" title="14. 数组api"></a>14. 数组api</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>callFn<span class="token punctuation">)</span><span class="token comment">//返回第一个符合条件的成员，否则undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="ES7新特性（2016）"><a href="#ES7新特性（2016）" class="headerlink" title="ES7新特性（2016）"></a>ES7新特性（2016）</h2><ul><li>数组includes()方法，用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回true，否则返回false。</li><li>a ** b指数运算符，它与 Math.pow(a, b)相同。</li></ul><h3 id="1-Array-prototype-includes"><a href="#1-Array-prototype-includes" class="headerlink" title="1. Array.prototype.includes()"></a>1. Array.prototype.includes()</h3><p>includes() 函数用来判断一个数组是否包含一个指定的值，如果包含则返回 true，否则返回false。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">//true</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-指数操作符"><a href="#2-指数操作符" class="headerlink" title="2. 指数操作符"></a>2. 指数操作符</h3><p>在ES7中引入了指数运算符<strong>，</strong>具有与Math.pow(..)等效的计算结果。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出1024</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="ES8新特性（2017）"><a href="#ES8新特性（2017）" class="headerlink" title="ES8新特性（2017）"></a>ES8新特性（2017）</h2><ul><li>async&#x2F;await</li><li>Object.values()</li><li>Object.entries()</li></ul><h3 id="1-async-x2F-await"><a href="#1-async-x2F-await" class="headerlink" title="1. async&#x2F;await"></a>1. async&#x2F;await</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> array<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//可以和 for...of 一起用</span>    <span class="token function">doSomething</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-Object-values"><a href="#2-Object-values" class="headerlink" title="2. Object.values()"></a>2. Object.values()</h3><p>Object.values()是一个与Object.keys()类似的新函数，但返回的是Object自身属性的所有值，不包括继承的值。<br>假设我们要遍</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> values<span class="token operator">=</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[1, 2, 3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-Object-entries"><a href="#2-Object-entries" class="headerlink" title="2. Object.entries()"></a>2. Object.entries()</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//之前</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'key:'</span><span class="token operator">+</span>key<span class="token operator">+</span><span class="token string">' value:'</span><span class="token operator">+</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//key:a value:1</span><span class="token comment">//key:b value:2</span><span class="token comment">//key:c value:3</span><span class="token comment">//现在</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span>value<span class="token punctuation">]</span> <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">key: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> value:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//key:a value:1</span><span class="token comment">//key:b value:2</span><span class="token comment">//key:c value:3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ES9新特性（2018）"><a href="#ES9新特性（2018）" class="headerlink" title="ES9新特性（2018）"></a>ES9新特性（2018）</h2><ul><li>Rest&#x2F;Spread 属性</li></ul><h3 id="Rest-x2F-Spread"><a href="#Rest-x2F-Spread" class="headerlink" title="Rest&#x2F;Spread"></a>Rest&#x2F;Spread</h3><p>…原本只有spread扩展的属性，ES9为…添加了Rest属性。rest参数语法允许我们将一个不定数量的参数表示为一个数组。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">restParam</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">restParam</span><span class="token punctuation">(</span><span class="token parameter">p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> <span class="token operator">...</span>p3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// p1 = 1</span>  <span class="token comment">// p2 = 2</span>  <span class="token comment">// p3 = [3, 4, 5]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ES10新特性（2019）"><a href="#ES10新特性（2019）" class="headerlink" title="ES10新特性（2019）"></a>ES10新特性（2019）</h2><ul><li>新增了Array的flat()方法和flatMap()方法</li><li>数组sort()</li><li>BigInt</li></ul><h3 id="Array-prototype-flat"><a href="#Array-prototype-flat" class="headerlink" title="Array.prototype.flat()"></a>Array.prototype.flat()</h3><p>flat() 方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr3<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//扁平化两个深度的意思</span><span class="token comment">// [1, 2, 3, 4, 5, 6]</span><span class="token comment">//使用 Infinity 作为深度，展开任意深度的嵌套数组</span>arr3<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4, 5, 6]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Array-prototype-flatMap"><a href="#Array-prototype-flatMap" class="headerlink" title="Array.prototype.flatMap()"></a>Array.prototype.flatMap()</h3><p>flatMap() 方法首先使用映射函数映射每个元素，然后将结果压缩成一个新数组。它与 map 和 深度值1的 flat 几乎相同，但 flatMap 通常在合并成一种方法的效率稍微高一些。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 只会将 flatMap 中的函数返回的数组 “压平” 一层</span>arr1<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token punctuation">[</span>x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [[2], [4], [6], [8]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Array-prototype-sort"><a href="#Array-prototype-sort" class="headerlink" title="Array.prototype.sort()"></a>Array.prototype.sort()</h3><p>排序关键字相同的项目其排序前后的顺序不变，默认为稳定</p><h3 id="BigInt"><a href="#BigInt" class="headerlink" title="BigInt"></a>BigInt</h3><h2 id="ES11新特性（2020）"><a href="#ES11新特性（2020）" class="headerlink" title="ES11新特性（2020）"></a>ES11新特性（2020）</h2><ul><li>import</li></ul><p>ESModule增加了import动态导入</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://juejin.cn/post/6844903959283367950">https://juejin.cn/post/6844903959283367950</a></p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>枚举enumerable</title>
      <link href="/2021/11/24/note/js-gai-nian-m-mei-ju-enumerable/"/>
      <url>/2021/11/24/note/js-gai-nian-m-mei-ju-enumerable/</url>
      
        <content type="html"><![CDATA[<p>枚举也就是列举，js中对象属性可以设置是否枚举。不可枚举也就无法列举，无法for…in遍历。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//对象属性可设置枚举与不可枚举 不可枚举指的是属性无法列出来也就是 </span><span class="token comment">//无法通过for in 访问 且这个属性为灰色</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"小明"</span><span class="token punctuation">&#125;</span><span class="token comment">//直接定义属性值 Person.prototype.job = "学生";</span><span class="token comment">//通过 Object.defineProperty 定义属性值与枚举</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">"job"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">"学生"</span><span class="token punctuation">,</span>    <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">//enumerable默认为false</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">var</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>student<span class="token punctuation">,</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">"male"</span><span class="token punctuation">,</span>    <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token comment">//enumerable默认为false</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> student<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"遍历的student."</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">" = "</span> <span class="token operator">+</span> student<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//遍历访问不到student.sex</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"直接输出的student.sex"</span> <span class="token operator">+</span> <span class="token string">" = "</span> <span class="token operator">+</span> student<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 能直接访问student.sex</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>student<span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//查看属性描述</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//查看属性描述--总</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> 枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>立即执行函数</title>
      <link href="/2021/11/19/note/js-gai-nian-h-li-ji-zhi-xing-han-shu/"/>
      <url>/2021/11/19/note/js-gai-nian-h-li-ji-zhi-xing-han-shu/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token comment">// 1.定义</span>        <span class="token comment">// ​声明一个函数，并立即调用这个函数，此时这个函数就是立即执行函数，简单来说就是定义函数之后立即执行该函数。</span>        <span class="token comment">// 立即执行函数一般也写成匿名函数的形式，匿名函数写法为 function()&#123;&#125;，就是使用function关键字声明一个函数，</span>        <span class="token comment">// 但是未命名的函数。关于匿名函数有一点要注意的是：匿名函数不能单独使用，否则会报错，至少需要用 () 包裹起来。</span>        <span class="token comment">// 2.作用</span>        <span class="token comment">// ​① 不需要为函数命名，避免污染全局变量。</span>        <span class="token comment">// ② 创建一个独立作用域，这个作用域里面的变量，外部访问不到，避免变量污染。</span>        <span class="token comment">// ③ 闭包和私有数据</span>        <span class="token comment">// 3.使用场景</span>        <span class="token comment">// ① 在页面加载完成后，需要立即执行的一些初始化设置，例如时间处理，创建对象等。</span>        <span class="token comment">// ② 一些只需要执行一次的代码，代码中的某些变量在执行结束后，再也不会被用到，我们就不适合用全局变量，可能会变量污染，此时更适合用立即执行函数。</span>        <span class="token comment">//##############写法Start################</span>        <span class="token comment">// 第一种：用括号把整个函数定义和括号调用包裹起来</span>        <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 函数体</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment">// 第二种：用括号把函数定义包裹起来，后面再加括号调用</span>            <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 函数体</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">// 注意：之所以要用圆括号包裹，是因为在浏览器的JS引擎规定，如果function出现在行首，一律解析成语句，</span>            <span class="token comment">// 而此时我们希望JS引擎将其理解为一个表达式，圆括号的包裹就是起这个作用的。</span>            <span class="token comment">//##############写法End################</span>            <span class="token comment">//###################参数传递Start###################</span>            <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">j</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 使用外部变量</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token comment">//###################参数传递End###################</span>        <span class="token comment">//###################返回值Start###############</span>        <span class="token comment">// 跟其他函数一样，可以返回任何类型的值</span>        <span class="token comment">// 可通过返回值实现闭包</span>        <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">666</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> num<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">// 由于返回值是一个函数 所以通过 () 进行调用</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">//###################返回值End###############</span>        <span class="token comment">//###################常见面试题Start###############</span>        <span class="token comment">// 1.普通流程</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token comment">// 输出结果为 3 3 3</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 2.立即执行函数</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">j</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token comment">// 输出结果为 0 1 2</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 3.let 块级作用域</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token comment">// 输出结果为 0 1 2</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//###################常见面试题end###############</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> 立即执行函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6箭头函数</title>
      <link href="/2021/11/17/note/js-gai-nian-j-jian-tou-han-shu/"/>
      <url>/2021/11/17/note/js-gai-nian-j-jian-tou-han-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h2><p>箭头函数指的是使用箭头&#x3D;&gt;语法声明的匿名函数。</p><h2 id="2-简写"><a href="#2-简写" class="headerlink" title="2. 简写"></a>2. 简写</h2><p>箭头函数诞生就是为了简写，有如下规则：</p><p>（1）当你的箭头函数仅有一个参数的时候，可以省略掉括号。</p><p>（2）当你的函数仅有一个表达式的时候，可以省略{}和return，注意省略return要先省略{}。</p><p>（3）但(2)如果返回值是object类型，则不能为x &#x3D;&gt; { name: ‘JT’ },，需要改为x &#x3D;&gt; ({ name: ‘JT’ })。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">who</span> <span class="token operator">=</span> <span class="token parameter">name</span> <span class="token operator">=></span> <span class="token string">'hello'</span> <span class="token operator">+</span> name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-区别"><a href="#3-区别" class="headerlink" title="3. 区别"></a>3. 区别</h2><p>与普通函数的区别：</p><p>（1） 语法不同，箭头函数使用箭头定义，写法简洁。 普通函数使用function定义。</p><p>（2） this指向不同，箭头函数是定义时绑定，普通函数是调用时绑定。</p><p>箭头函数没有this，在声明的时候，捕获上下文的this供自己使用，一旦确定不会再变化。在普通函数中，this指向调用自己的对象，如果用在构造函数，this指向创建的对象实例。普通函数可以使用call，apply，bind改变this的指向。</p><p>（3） 是否匿名，箭头函数都是匿名函数，而普通函数既可以是匿名函数，也可以是具名函数。</p><p>（4） 箭头函数没有arguments（实参列表，类数组对象），可以使用rest参数替代。每一个普通函数在调用后都有一个arguments对象，用来存储实际传递的参数。</p><p>（5） 箭头函数不能作为构造函数来使用，普通函数可以用作构造函数，以此来创建一个对象的实例。因为箭头函数没有自己的this，而且匿名函数无法使用new。</p><p>（6） 箭头函数没有原型，而普通函数有。因为它不需要作为构造函数，被这样设计。</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> es6 </tag>
            
            <tag> 箭头函数 </tag>
            
            <tag> 匿名函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webkit和blink是什么关系</title>
      <link href="/2021/11/13/note/qian-duan-bian-cheng-webkit-he-blink-shi-shi-me-guan-xi/"/>
      <url>/2021/11/13/note/qian-duan-bian-cheng-webkit-he-blink-shi-shi-me-guan-xi/</url>
      
        <content type="html"><![CDATA[<p>webkit和blink都是浏览器引擎。</p><p>webkit被我们所熟知，而blink是Chrome 重构了一下 webkit 然后管它叫 blink。但是大体架构还是和 webkit 一致的，所以我们前端写的google的css前缀是webkit也就不难理解了。</p><p>webkit的大致结构：</p><p><img src="https://img2018.cnblogs.com/blog/1107494/201909/1107494-20190901215111555-733603392.jpg"></p><p>实线框内模块是所有移植的共有部分，虚线框内不同的厂商可以自己实现。</p><p>就是说 JS 引擎(JS 虚拟机)，WebKit 是默认的是 JSCore，而 Google 则自己实现了一版吊炸天的 V8。</p><p>因此虽然同样是WebKit，Safari 用的是 JSCore, Chrome 用的是 V8。</p><p>参考：</p><p><a href="https://www.cnblogs.com/amiezhang/p/11443867.html">webkit vs v8</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webkit </tag>
            
            <tag> blink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事件传播机制</title>
      <link href="/2021/11/10/note/js-mian-shi-shi-jian-chuan-bo-ji-zhi/"/>
      <url>/2021/11/10/note/js-mian-shi-shi-jian-chuan-bo-ji-zhi/</url>
      
        <content type="html"><![CDATA[<p>html演示看“1-html-事件传播”</p><h2 id="1-概念："><a href="#1-概念：" class="headerlink" title="1. 概念："></a>1. 概念：</h2><p>所谓事件传播有两种，捕获和冒泡</p><p>捕获是从外到内</p><p>冒泡是从内到外（默认模式）</p><h2 id="2-事件传播的三个阶段："><a href="#2-事件传播的三个阶段：" class="headerlink" title="2. 事件传播的三个阶段："></a>2. 事件传播的三个阶段：</h2><p>dom标准事件流包括三个阶段：<br>事件捕获阶段、处于目标阶段、事件冒泡阶段</p><p>事件对象e.eventPhase属性有其三个阶段值<br>1(事件捕获阶段)<br>2(处于目标阶段)<br>3(冒泡阶段)</p><h2 id="3-事件监听和捕获、冒泡的关系"><a href="#3-事件监听和捕获、冒泡的关系" class="headerlink" title="3. 事件监听和捕获、冒泡的关系"></a>3. 事件监听和捕获、冒泡的关系</h2><p>监听只是监听而已</p><p>不管是冒泡事件的监听也好，捕获事件监听也好</p><p>冒泡捕获都会执行一个完整的顺序</p><p>这个循序是捕获的外到内&#x3D;》冒泡的内到外</p><p>所以目标对象不论设置什么样的监听毛都会触发一个完整的事件传播</p><p>监听只是监听而已</p><h2 id="4-阻止事件传播"><a href="#4-阻止事件传播" class="headerlink" title="4. 阻止事件传播"></a>4. 阻止事件传播</h2><p> e.stopPropagation()</p><p> 捕获、冒泡</p><h2 id="5-取消默认事件"><a href="#5-取消默认事件" class="headerlink" title="5. 取消默认事件"></a>5. 取消默认事件</h2><p> e.preventDefault()</p><p>a标签href会打开新页面等行为</p><h2 id="6-return-false"><a href="#6-return-false" class="headerlink" title="6. return false"></a>6. return false</h2><ul><li>这只在jQuery有用</li></ul><p>函数 return false 语句执行以下步骤：</p><p>首先，取消默认事件</p><p>阻止事件传播</p><h2 id="7-事件委托（event-delegation）"><a href="#7-事件委托（event-delegation）" class="headerlink" title="7. 事件委托（event delegation）"></a>7. 事件委托（event delegation）</h2><p>事件委托，也称为事件代理，是指将本要添加在自身的事件，添加到别人身上.</p><p>通过事件传播（冒泡，捕获）的原理，将事件添加到父级，以事件对象target操作目标节点。</p><p>从而达到减少事件绑定，节约性能开支的目的</p><p>还有一个比较实用的应用就是，对后续JS动态添加的节点进行操作</p><p>当然jQuery的写法比较方便，参考 ‘JS-原生JS怎么获取动态dom.md’</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emoji<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>😁<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>😂<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token comment">//捕获</span>  emoji<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'div1事件捕获'</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-在Vue中如何操作事件传播"><a href="#8-在Vue中如何操作事件传播" class="headerlink" title="8. 在Vue中如何操作事件传播"></a>8. 在Vue中如何操作事件传播</h2><p>(1) Vue提供了元素的事件绑定<br>(2) Vue提供了了修饰符，可以事件为捕获，阻止传播等，如stop停止传播事件，capture监听捕获</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>（1）并非所有的事件都会传播，像 focus，blur 事件就不传播，mouseenter 和 mouseleave 事件也不会传播；<br>（2）为避免内存泄漏问题，请记住在不再使用处理程序时将其删除。</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue的生命周期</title>
      <link href="/2021/11/09/note/vue-mian-shi-sheng-ming-zhou-qi/"/>
      <url>/2021/11/09/note/vue-mian-shi-sheng-ming-zhou-qi/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Vue2-生命周期函数一览"><a href="#1-Vue2-生命周期函数一览" class="headerlink" title="1. Vue2 生命周期函数一览"></a>1. Vue2 生命周期函数一览</h2><table><thead><tr><th>生命周期</th><th>描述</th></tr></thead><tbody><tr><td>beforeCreate</td><td>组件实例被创建之初，data 和 methods 中的数据还没有初始化</td></tr><tr><td>created</td><td>组件实例已经完全创建，data 和 methods 都已经初始化好了</td></tr><tr><td>beforeMount</td><td>模板渲染，相关的 render 函数首次被调用，模板已经在内存中编译好了，但是尚未挂载到页面中去</td></tr><tr><td>mounted</td><td>el 被新创建的 vm.e l 替 换 ， 真 实 d o m 已 经 生 成 ，el 可用，组件脱离创建阶段，进入运行阶段</td></tr><tr><td>beforeUpdate</td><td>组件数据更新之前调用， 此时页面中显示的数据还是旧的，但 data 是最新的，页面尚未和最新的数据保持同步</td></tr><tr><td>update</td><td>组件数据更新之后，页面和 data 数据已经保持同步，都是最新的</td></tr><tr><td>beforeDestory</td><td>组件销毁前调用，vue 实例从运行阶段进入到销毁阶段，这时 vue 实例身上所有都可用，还没有真正执行销毁</td></tr><tr><td>destoryed</td><td>组件销毁后调用，vue 实例上的所有都不可以用了</td></tr><tr><td>activited</td><td>keep-alive 专属，组件被激活时调用</td></tr><tr><td>deactivated</td><td>keep-alive 专属，组件被销毁时调用</td></tr></tbody></table><h2 id="2-created和mounted做了什么，网络请求应该放在哪里？"><a href="#2-created和mounted做了什么，网络请求应该放在哪里？" class="headerlink" title="2. created和mounted做了什么，网络请求应该放在哪里？"></a>2. created和mounted做了什么，网络请求应该放在哪里？</h2><p>created 实现了 data ，mounted 实现了虚拟dom 并数据渲染在界面上。</p><p>网络请求放在哪个都可以，但是操作虚拟dom一定要放在mounted，或者要使用nextTick();</p><h2 id="3-使用了keep-alive组件，生命周期如何经历？"><a href="#3-使用了keep-alive组件，生命周期如何经历？" class="headerlink" title="3. 使用了keep-alive组件，生命周期如何经历？"></a>3. 使用了keep-alive组件，生命周期如何经历？</h2><p>（1）进入</p><p>beforeCreated</p><p>created</p><p>beforeMounted</p><p>mounted</p><p>activated</p><p>（2）离开</p><p>deactivated</p><p>（3）再进入 (类似uniapp或微信小程序的onShow)</p><p>activated</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中刷新页面的方式</title>
      <link href="/2021/11/09/note/vue-mian-shi-shua-xin-ye-mian-de-fang-shi/"/>
      <url>/2021/11/09/note/vue-mian-shi-shua-xin-ye-mian-de-fang-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="1-常规方法"><a href="#1-常规方法" class="headerlink" title="1. 常规方法"></a>1. 常规方法</h2><p>location.reload()、this.$router.go(0) (会短暂出现空白)</p><h2 id="2-更新视图和数据"><a href="#2-更新视图和数据" class="headerlink" title="2. 更新视图和数据"></a>2. 更新视图和数据</h2><p>调用强制更新方法this.$forceUpdate()会更新视图和数据，强制触发vue的update方法。</p><h2 id="3-provide-x2F-inject-配合-v-if（推荐）"><a href="#3-provide-x2F-inject-配合-v-if（推荐）" class="headerlink" title="3. provide&#x2F;inject 配合 v-if（推荐）"></a>3. provide&#x2F;inject 配合 v-if（推荐）</h2><p>看如下provide&#x2F;inject实例：</p><p>App.vue</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isRouterAlive<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>  <span class="token function">provide</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">reload</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reload    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">isRouterAlive</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">reload</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>isRouterAlive <span class="token operator">=</span> <span class="token boolean">false</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>isRouterAlive <span class="token operator">=</span> <span class="token boolean">true</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>页面中引用</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">inject</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'reload'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>     <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token comment">// 在需要用到的事件中调用this.reload()；函数即可</span>           <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span> </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>原理：允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在起上下游关系成立的时间里始终生效。在App.vue,声明reload方法，控制router-view的显示或隐藏，从而控制页面的再次加载。</p></blockquote><p><strong>那么单独的组件呢？如何刷新</strong></p><p>开发过程中会遇到一个页面多个组件，特定条件下，我只想刷新单个组件，不要整个页面重载怎么办。</p><p>同理使用v-if指令：如果是刷新某个子组件，则可以通过v-if指令实现。我们知道，当v-if的值发生变化时，组件都会被重新渲染一遍。因此，利用v-if指令的特性，可以达到强制刷新组件的目的。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Icon</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>md-refresh<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>refreshPage<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OrderInfo</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isShow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>OrderInfo</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token literal-property property">isShow</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token literal-property property">method</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token function">refreshPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 单独刷新页面</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"刷新”"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>isShow <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>isShow <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> vue </tag>
            
            <tag> 刷新 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>App主流开发形式</title>
      <link href="/2021/11/08/note/qian-duan-bian-cheng-app-zhu-liu-kai-fa-xing-shi/"/>
      <url>/2021/11/08/note/qian-duan-bian-cheng-app-zhu-liu-kai-fa-xing-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="1-App分为Web-App（H5）、Native-App（原生）、Hybrid-APP（混合）"><a href="#1-App分为Web-App（H5）、Native-App（原生）、Hybrid-APP（混合）" class="headerlink" title="1. App分为Web App（H5）、Native App（原生）、Hybrid APP（混合）"></a>1. App分为Web App（H5）、Native App（原生）、Hybrid APP（混合）</h2><p><br>Web：手机H5，运行环境为浏览器。<br><br>Native：原生App，运行环境为操作系统(IOS、Android)。<br><br>Hybrid：也就是半原生半Web的开发模式，由原生提供统一的API给JS调用，实际的主要逻辑有Html和JS来完成，最终是放在webview中显示的，所以只需要写一套代码即可达到跨平台效果<br><br>React-Native<br><br>Vue-Native</p><p><img src="https://img-blog.csdnimg.cn/20190709113305845.png" alt="weex"></p><h2 id="2-主流开发框架"><a href="#2-主流开发框架" class="headerlink" title="2. 主流开发框架"></a>2. 主流开发框架</h2><p>   uniapp是在市场上颇受中小企业青睐的一款应用框架，支持weex渲染和webview渲染</p><p>   <a href="https://uniapp.dcloud.net.cn/tutorial/nvue-outline.html">nvue</a>是uniapp中的一种文件格式，它提供了基于weex改进的原生渲染。vue使用<a href="https://blog.csdn.net/weixin_46932303/article/details/122768612">webview</a>渲染</p><p>而vue和weex是一家人，react和react native是一家人。一家人的特点差不多，语法逻辑是一样的。</p><p><a href="https://img-blog.csdnimg.cn/20190709113305845.png">https://img-blog.csdnimg.cn/20190709113305845.png</a></p><h2 id="3-总结："><a href="#3-总结：" class="headerlink" title="3. 总结："></a>3. 总结：</h2><p>无论是Hybrid 还是 React Native、Weex，又或者uniapp，本质上都是在研发成本、灵活性、性能体验三者间做取舍。取决于应用要求，我们会有不同的决策结果。</p><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="https://juejin.cn/post/6844903496379006990#heading-4">https://juejin.cn/post/6844903496379006990#heading-4</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> App </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>父组件给子组件传值，子组件不更新的原因</title>
      <link href="/2021/11/07/note/vue-fu-zu-jian-gei-zi-zu-jian-chuan-zhi-zi-zu-jian-bu-geng-xin-de-yuan-yin/"/>
      <url>/2021/11/07/note/vue-fu-zu-jian-gei-zi-zu-jian-chuan-zhi-zi-zu-jian-bu-geng-xin-de-yuan-yin/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>子组件接收显示：<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> msg <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>parendData<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"parendData"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们有时候需要对传过来的prop进行再处理。当子组件不直接使用prop而是将prop赋值给data的时候，prop更新时，视图无法更新。</p><p>原因：父子组件遵循单向数据流。出现这种原因是 你的子组件里用了n变量去接收与父组件通信的t，只会在第一次初始化子组件的时候拿到值。</p><p>解决:用computed计算属性、watch监听就行了，或者直接用props传过来的。</p><p><a href="https://codesandbox.io/s/funny-sammet-2nejtt?file=/src/components/Chrild.vue">例子:设置watch监听prop</a></p><p><img src="https://qiniu.guet.link/asset/202212030126310.gif"></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事件传播及事件代理实例</title>
      <link href="/2021/11/06/note/html-css-shi-jian-chuan-bo-ji-shi-jian-dai-li-shi-li/"/>
      <url>/2021/11/06/note/html-css-shi-jian-chuan-bo-ji-shi-jian-dai-li-shi-li/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://code.jquery.com/jquery-2.1.1.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">div</span> <span class="token punctuation">&#123;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.div1</span> <span class="token punctuation">&#123;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> violet<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.div2</span> <span class="token punctuation">&#123;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.div3</span> <span class="token punctuation">&#123;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>div1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>div2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>div3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emoji<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emo1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.baidu.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>😁<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>😂<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>🤣<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>😃<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>😄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">let</span> div1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.div1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> div2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.div2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> div3 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.div3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    div1<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'div1事件捕获'</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>eventPhase<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    div2<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'div2事件捕获'</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>eventPhase<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    div3<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'div3事件捕获'</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>eventPhase<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//会阻止div3的时间冒泡</span>        <span class="token comment">// e.stopPropagation()</span>        e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    div1<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'div1事件冒泡'</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>eventPhase<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    div2<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'div2事件冒泡'</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>eventPhase<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    div3<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'div3事件冒泡'</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>eventPhase<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//阻止后续冒泡</span>        <span class="token comment">// e.stopPropagation()</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">//事件代理（冒泡）</span>    emoji<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">事件代理</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>event<span class="token punctuation">.</span>eventPhase<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//阻止默认行为</span>        event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token comment">//JQuery可以使用return false</span>    <span class="token comment">// $('#emo1').on('click', function (e) &#123;</span>    <span class="token comment">//     //jq可以阻止行为和冒泡</span>    <span class="token comment">//     return false;</span>    <span class="token comment">// &#125;)</span>    <span class="token comment">// console.log(liNodes);</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> html&amp;css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> html </tag>
            
            <tag> 事件传播 </tag>
            
            <tag> 事件代理 </tag>
            
            <tag> 冒泡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经过url安全的base64</title>
      <link href="/2021/11/02/note/qian-duan-wang-luo-jing-guo-url-an-quan-de-base64/"/>
      <url>/2021/11/02/note/qian-duan-wang-luo-jing-guo-url-an-quan-de-base64/</url>
      
        <content type="html"><![CDATA[<p>因为浏览器会对url进行编码，所以base64生成的一些字符不适用URL地址，需要进行处理。</p><p>这种处理，我们把它称之为经过url安全的base64</p><p>以下是php的代码示例，js同理（当然你使用uri的api处理也行）</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">urlsafe_b64encode</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'+'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'/'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'='</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'-'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'_'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token variable">$data</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">urlsafe_b64decode</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'-'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'_'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'+'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token variable">$mod4</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$mod4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token variable">$data</span> <span class="token operator">.=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'===='</span><span class="token punctuation">,</span> <span class="token variable">$mod4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> base64 </tag>
            
            <tag> url </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图片和图片间有间隙-基线与幽灵空白</title>
      <link href="/2021/10/28/note/html-css-bug-tu-pian-he-tu-pian-jian-you-jian-xi-ji-xian-yu-you-ling-kong-bai/"/>
      <url>/2021/10/28/note/html-css-bug-tu-pian-he-tu-pian-jian-you-jian-xi-ji-xian-yu-you-ling-kong-bai/</url>
      
        <content type="html"><![CDATA[<h2 id="1-左右图片有间隔"><a href="#1-左右图片有间隔" class="headerlink" title="1. 左右图片有间隔"></a>1. 左右图片有间隔</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background-color</span><span class="token punctuation">:</span>blue</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://ss0.baidu.com/7Po3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/c995d143ad4bd113fceedf775bafa40f4bfb0557.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://ss0.baidu.com/7Po3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/c995d143ad4bd113fceedf775bafa40f4bfb0557.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://qiniu.guet.link/asset/202210081625387.png"></p><p>原因：这是上面代码inline-block元素和空格结合的结果，父级元素把空格当做一个字符处理。</p><p>解决：要把空格去掉，如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background-color</span><span class="token punctuation">:</span>blue</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://ss0.baidu.com/7Po3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/c995d143ad4bd113fceedf775bafa40f4bfb0557.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://ss0.baidu.com/7Po3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/c995d143ad4bd113fceedf775bafa40f4bfb0557.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://qiniu.guet.link/asset/202210081904151.png"></p><h2 id="2-上下图片有空格"><a href="#2-上下图片有空格" class="headerlink" title="2. 上下图片有空格"></a>2. 上下图片有空格</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background-color</span><span class="token punctuation">:</span>blue</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span>            <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://ss0.baidu.com/7Po3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/c995d143ad4bd113fceedf775bafa40f4bfb0557.jpg<span class="token punctuation">"</span></span>            <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span>        <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://ss0.baidu.com/7Po3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/c995d143ad4bd113fceedf775bafa40f4bfb0557.jpg<span class="token punctuation">"</span></span>        <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://qiniu.guet.link/asset/202210081907464.png"></p><p>原因：图片默认的基线对齐会在底部留有一定空隙（我们称其为幽灵空白）。</p><p>解决：</p><ol><li><p>div设置 font-size：0；</p></li><li><p>img设置 display：block；</p></li><li><p>div设置 display：flex；</p></li><li><p>img设置 vertical-align: middle&#x2F;top&#x2F;bottom;</p></li></ol><p><img src="https://qiniu.guet.link/asset/202210081912351.png"></p>]]></content>
      
      
      <categories>
          
          <category> html&amp;css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 重绘回流 </tag>
            
            <tag> 性能优化 </tag>
            
            <tag> 卷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>forEach、map、filter、find</title>
      <link href="/2021/10/27/note/js-gai-nian-shu-zu-chang-yong-de-bian-li-yu-cha-zhao-apiforeach-map-filter-find/"/>
      <url>/2021/10/27/note/js-gai-nian-shu-zu-chang-yong-de-bian-li-yu-cha-zhao-apiforeach-map-filter-find/</url>
      
        <content type="html"><![CDATA[<p>forEach、map、filter、find这几个都是数组的遍历方法，现在总结一下</p><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h2><h3 id="（1）forEach-仅仅是一个遍历。"><a href="#（1）forEach-仅仅是一个遍历。" class="headerlink" title="（1）forEach 仅仅是一个遍历。"></a>（1）forEach 仅仅是一个遍历。</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token comment">//apple orange</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（2）map-遍历并return的每一项生成一个新数组。"><a href="#（2）map-遍历并return的每一项生成一个新数组。" class="headerlink" title="（2）map 遍历并return的每一项生成一个新数组。"></a>（2）map 遍历并return的每一项生成一个新数组。</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">]</span><span class="token keyword">let</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> item<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment">//['apple', 'orange']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在遍历角度看map性能较低，但是在生成新对象的时候，map有返回值，它就可以进行链式操作，可读性和书写性更好。</p><h3 id="（3）filter-方法创建一个新数组，其包含通过所提供函数实现的验证的包含所有元素的数组，都未满足验证则是空数组-。"><a href="#（3）filter-方法创建一个新数组，其包含通过所提供函数实现的验证的包含所有元素的数组，都未满足验证则是空数组-。" class="headerlink" title="（3）filter 方法创建一个新数组，其包含通过所提供函数实现的验证的包含所有元素的数组，都未满足验证则是空数组[]。"></a>（3）filter 方法创建一个新数组，其包含通过所提供函数实现的验证的包含所有元素的数组，都未满足验证则是空数组[]。</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">]</span><span class="token keyword">let</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> item <span class="token operator">===</span> <span class="token string">"orange"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment">//['orange']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：map不能使用if判断来替代filter。因为map使用if判断来return，那不return的时候值就是undefined了，而map是只对满足条件的元素进行添加。</p><h3 id="（4）find-方法返回第一个满足验证的元素，其值是各种类型，都未满足验证则是undefined。"><a href="#（4）find-方法返回第一个满足验证的元素，其值是各种类型，都未满足验证则是undefined。" class="headerlink" title="（4）find 方法返回第一个满足验证的元素，其值是各种类型，都未满足验证则是undefined。"></a>（4）find 方法返回第一个满足验证的元素，其值是各种类型，都未满足验证则是undefined。</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token number">12</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span>        <span class="token keyword">let</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">typeof</span> item <span class="token operator">===</span> <span class="token string">"object"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-总结"><a href="#2-总结" class="headerlink" title="2. 总结"></a>2. 总结</h2><h3 id="（1）foreach和map的区别"><a href="#（1）foreach和map的区别" class="headerlink" title="（1）foreach和map的区别"></a>（1）foreach和map的区别</h3><p>foreach仅仅是个遍历，它没有返回值，而map会遍历每一项逐项返回成新数组。</p><p>map有返回值，可以进行链式操作，在生成新数组时操作更方便。foreach性能更好，如果你不打算生成新数组就使用foreach吧。</p><p>链式操作：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> rs <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=></span> n <span class="token operator">></span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=></span> n <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token operator">=></span> prev <span class="token operator">+</span> val<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce">reduce</a></p><h3 id="（2）find和filter的区别"><a href="#（2）find和filter的区别" class="headerlink" title="（2）find和filter的区别"></a>（2）find和filter的区别</h3><p>find和filter都是查找后返回，但是filter是多项形成的是一个数组，find是第一项单个元素。</p><p>所以filter验证不成功是[],find验证不成功是undefined。</p><h3 id="（3）foreach和map与普通循环遍历还有哪些差别"><a href="#（3）foreach和map与普通循环遍历还有哪些差别" class="headerlink" title="（3）foreach和map与普通循环遍历还有哪些差别"></a>（3）foreach和map与普通循环遍历还有哪些差别</h3><p>foreach 和 map 不可使使用break和continue，在函数中都不能使用return来进行打断<br>&#96;&#96;&#96;</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> 常用api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>map-以下输出什么?</title>
      <link href="/2021/10/24/note/js-mian-shi-map-mian-shi-ti-yi-xia-shu-chu-shi-me/"/>
      <url>/2021/10/24/note/js-mian-shi-map-mian-shi-ti-yi-xia-shu-chu-shi-me/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//以下输出结果是什么?</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>parseInt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//[1,NaN,NaN]</span><span class="token comment">//解析：</span><span class="token comment">//map的语法是这样</span>a<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//那么搭配parseInt就变成</span>a<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>parseInt<span class="token punctuation">)</span><span class="token comment">//不断遍历执行</span><span class="token comment">//return parseInt(1,0);</span><span class="token comment">//return parseInt(2,1);</span><span class="token comment">//...</span><span class="token comment">//最终得到 [1,NaN,NaN]</span><span class="token comment">//函数定义：</span><span class="token comment">//1、map 会遍历返回每一项</span><span class="token comment">//2、parseInt(string, radix) 解析一个字符串并返回指定基数的十进制整数，radix 是 2-36 之间的整数，表示被解析字符串的基数。假如radix没有设置默认为10（一般情况）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt</a></p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sprite（雪碧图、精灵图）</title>
      <link href="/2021/10/23/note/html-css-mian-shi-sprite-xue-bi-tu-jing-ling-tu/"/>
      <url>/2021/10/23/note/html-css-mian-shi-sprite-xue-bi-tu-jing-ling-tu/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    概念：把多张图片合并成一张<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    使用：    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>1.为盒子设置成精灵图单个小图标的宽度和高度    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>2.设置盒子背景为精灵图background:url('xx/xxx.png');    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>3.background-position: -xpx -ypx;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    优点和缺点：减少了http请求的次数，提升性能    缺点：维护比较差（例如图片位置进行修改，内容匡高修改，添加新图标）    <span class="token comment">&lt;!--     &lt;div style="height: 100px;background:url('./image/picture.webp') no-repeat center/100%">    &lt;/div> --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> html&amp;css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> html </tag>
            
            <tag> 精灵图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>position的几种属性</title>
      <link href="/2021/10/23/note/html-css-mian-shi-ding-wei-position-you-na-xie-sticky/"/>
      <url>/2021/10/23/note/html-css-mian-shi-ding-wei-position-you-na-xie-sticky/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">position</span><span class="token punctuation">:</span> static<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span> <span class="token comment">/* 脱离文档流，是根据窗口定位  */</span><span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token comment">/* 不脱离文档流，是根据自身定位  */</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span> <span class="token comment">/* 根据非static的父元素来定位，否则根据浏览器进行定位，在滚动时不会发生偏移*/</span><span class="token property">position</span><span class="token punctuation">:</span> sticky<span class="token punctuation">;</span> <span class="token comment">/*当视口滚动到sticky元素设置的top位置时将脱离文档流变成fixed定位 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例子</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">*</span> <span class="token punctuation">&#123;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 24px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">main</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 1200px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 3000px<span class="token punctuation">;</span>            <span class="token comment">/* height:500px; */</span>            <span class="token comment">/* overflow:auto; */</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">main .tips</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> sticky<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> violet<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.content</span> <span class="token punctuation">&#123;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tips<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background-color</span><span class="token punctuation">:</span>red</span><span class="token punctuation">"</span></span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tips<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> html&amp;css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> html </tag>
            
            <tag> position </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>禁止web页面缩放解决方案</title>
      <link href="/2021/10/22/note/html-css-jin-zhi-web-ye-mian-suo-fang-jie-jue-fang-an/"/>
      <url>/2021/10/22/note/html-css-jin-zhi-web-ye-mian-suo-fang-jie-jue-fang-an/</url>
      
        <content type="html"><![CDATA[<p>pc端web页面开发时,发现windows系统经常推荐用户使用125%、150%比例的缩放窗口，这样导致web页面被进行缩放，除此之外还有人为的按钮缩放。</p><p>故此，在页面devicePixelRatio（设备像素比例）变化后，通过计算页面body标签zoom修改其大小，来抵消devicePixelRatio带来的变化。</p><p>例如：window.devicePixelRatio为1.5 那么设置盒子zoom</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @author trsoliu * @date  2019-12-05 * @description 校正windows页面在系统进行缩放后导致页面被放大的问题，通常放大比例是125%、150% * **/</span><span class="token keyword">class</span> <span class="token class-name">DevicePixelRatio</span> <span class="token punctuation">&#123;</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//this.flag = false;</span><span class="token punctuation">&#125;</span><span class="token comment">//获取系统类型</span><span class="token function">_getSystem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">var</span> agent <span class="token operator">=</span> navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//var isMac = /macintosh|mac os x/i.test(navigator.userAgent);</span><span class="token comment">//if(isMac) &#123;</span><span class="token comment">//return false;</span><span class="token comment">//&#125;</span><span class="token comment">//现只针对windows处理，其它系统暂无该情况，如有，继续在此添加</span><span class="token keyword">if</span><span class="token punctuation">(</span>agent<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"windows"</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//获取页面缩放比例</span><span class="token comment">//_getDevicePixelRatio() &#123;</span><span class="token comment">//let t = this;</span><span class="token comment">//&#125;</span><span class="token comment">//监听方法兼容写法</span><span class="token function">_addHandler</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> type<span class="token punctuation">,</span> handler</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>attachEvent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>element<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">"on"</span> <span class="token operator">+</span> type<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>element<span class="token punctuation">[</span><span class="token string">"on"</span> <span class="token operator">+</span> type<span class="token punctuation">]</span> <span class="token operator">=</span> handler<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//校正浏览器缩放比例</span><span class="token function">_correct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token comment">//页面devicePixelRatio（设备像素比例）变化后，计算页面body标签zoom修改其大小，来抵消devicePixelRatio带来的变化。</span>document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>zoom <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> window<span class="token punctuation">.</span>devicePixelRatio<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//监听页面缩放</span><span class="token function">_watch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>t<span class="token punctuation">.</span><span class="token function">_addHandler</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token string">'resize'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//注意这个方法是解决全局有两个window.resize</span><span class="token comment">//重新校正</span>t<span class="token punctuation">.</span><span class="token function">_correct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//初始化页面比例</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">_getSystem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//判断设备，目前只在windows系统下校正浏览器缩放比例</span><span class="token comment">//初始化页面校正浏览器缩放比例</span>t<span class="token punctuation">.</span><span class="token function">_correct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开启监听页面缩放</span>t<span class="token punctuation">.</span><span class="token function">_watch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> DevicePixelRatio<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//vue使用</span><span class="token comment">//在app.vue或者其它全局的文件中引入函数</span><span class="token keyword">import</span> DevicePixelRatio <span class="token keyword">from</span> <span class="token string">'./XX/assets/js/libs/devicePixelRatio.js'</span><span class="token punctuation">;</span><span class="token comment">//在vue生命周期created中添加</span><span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">new</span> <span class="token class-name">DevicePixelRatio</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//其它使用</span><span class="token comment">//全局引入devicePixelRatio.js</span><span class="token comment">//在页面加载之时，调用此方法初始化页面比例</span><span class="token keyword">new</span> <span class="token class-name">DevicePixelRatio</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://juejin.cn/post/6844904014958739470">https://juejin.cn/post/6844904014958739470</a></p>]]></content>
      
      
      <categories>
          
          <category> html&amp;css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> html </tag>
            
            <tag> 缩放 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原生JS怎么获取动态dom</title>
      <link href="/2021/10/20/note/js-yuan-sheng-js-zen-me-huo-qu-dong-tai-dom/"/>
      <url>/2021/10/20/note/js-yuan-sheng-js-zen-me-huo-qu-dong-tai-dom/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        JS动态内容    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在处理原生html项目的时候，我们可能会使用js appendChild添加元素</p><p>这个时候之前设置的监听就对就是动态元素无效</p><p>有以下几种方法，可以使用：</p><h2 id="1-使用HTML的事件属性-如onclick"><a href="#1-使用HTML的事件属性-如onclick" class="headerlink" title="1. 使用HTML的事件属性 如onclick"></a>1. 使用HTML的事件属性 如onclick</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;span onclick="callback" class="content">    JS动态内容&lt;/span></span><span class="token template-punctuation string">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2-使用事件代理-事件传播机制，冒泡、捕获"><a href="#2-使用事件代理-事件传播机制，冒泡、捕获" class="headerlink" title="2. 使用事件代理(事件传播机制，冒泡、捕获)"></a>2. 使用事件代理(事件传播机制，冒泡、捕获)</h2><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">&#x2F;&#x2F;原生JSlet containerNode &#x3D; document.getElementByClassName(&#39;.container&#39;)[0];containerNode.addEventListener(&#39;click&#39;,function(e)&#123;    if(e.target.className &#x3D;&#x3D;&#x3D; &#39;content&#39;)&#123;            &#x2F;&#x2F;...callback code    &#125;&#125;);&#x2F;&#x2F;Jquey$(&#39;.container&#39;).on(&#39;click&#39;,&#39;.content&#39;,function(e)&#123;&#x2F;&#x2F;...callback code&#125;);&#x2F;&#x2F;Jquey 1.7以下使用$(&#39;.container&#39;).delegate(&#39;.content&#39;,&#39;click&#39;,function(e)&#123; &#x2F;&#x2F;...callback code&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-newVue、Vueuse、prototype</title>
      <link href="/2021/10/20/note/vue-newvue-vueuse-prototype/"/>
      <url>/2021/10/20/note/vue-newvue-vueuse-prototype/</url>
      
        <content type="html"><![CDATA[<p>区别：</p><p>1、Vue.use()有自己独特的加载方式，要求参数是一个对象或是一个Function，如果是对象还要求其有install方法。</p><p>2、new Vue()中的插件需要Vue实例来配合</p><p>3、每一个vue组件都是Vue的实例，所以组件内this可以拿到Vue.prototype上添加的属性和方法。</p><p><a href="https://www.jianshu.com/p/0b8b6f2e5a82">https://www.jianshu.com/p/0b8b6f2e5a82</a></p><p><a href="https://blog.csdn.net/zhangank/article/details/116742961">https://blog.csdn.net/zhangank/article/details/116742961</a></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>清除浮动的方式</title>
      <link href="/2021/10/18/note/html-css-mian-shi-qing-chu-fu-dong-de-fang-shi/"/>
      <url>/2021/10/18/note/html-css-mian-shi-qing-chu-fu-dong-de-fang-shi/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">.float,        .normal</span> <span class="token punctuation">&#123;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>            <span class="token property">margin-right</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.float</span> <span class="token punctuation">&#123;</span>            <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>            <span class="token comment">/* 浮动会脱离文档流  使其它元素重新排列*/</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.normal</span> <span class="token punctuation">&#123;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> violet<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.bfc</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/* display: flex; */</span>            <span class="token comment">/* position: absolute; */</span>            <span class="token comment">/* float: left; */</span>            <span class="token comment">/* overflow: auto; */</span>            <span class="token property">border</span><span class="token punctuation">:</span> 10px solid orange<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.bfc::after</span> <span class="token punctuation">&#123;</span>            <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>            <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/* .clear &#123;            clear: both;        &#125; */</span>        <span class="token comment">/* 清楚浮动的方式：        1、设置bfc、        2、在浮动元素后加一个盒子，盒子设置clear；both、        3、给父元素加::after伪元素，原理和第二种方法一样，优点是少了多余的元素 clear::both 清除浮动 */</span>        <span class="token comment">/* 伪元素没有dom节点 */</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bfc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>float<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- &lt;div class="clear">&lt;/div> --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>normal clear<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> html&amp;css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> float </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>session和token的使用</title>
      <link href="/2021/09/18/note/qian-duan-bian-cheng-token-de-shi-yong/"/>
      <url>/2021/09/18/note/qian-duan-bian-cheng-token-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>cookie在移动端兼容性不好，跨域也存在问题</p><h2 id="session的使用"><a href="#session的使用" class="headerlink" title="session的使用"></a>session的使用</h2><p>session存在于服务端内存，需要前端的cookie，也就是session-id配合获取信息</p><h3 id="1-session的生成"><a href="#1-session的生成" class="headerlink" title="1. session的生成"></a>1. session的生成</h3><p>session由后端生成，并会设置响应头Set-Cookie发送到浏览器或者其他客户端的一些信息,一般用于登陆成功的情况下返回给客户端的凭证信息,然后下次请求时会带上这个cookie,这样就能完成鉴权</p><h3 id="2-如何判断session有效期"><a href="#2-如何判断session有效期" class="headerlink" title="2. 如何判断session有效期"></a>2. 如何判断session有效期</h3><p>1.后端可以设置session有效期，当然也能设置cookie的</p><h2 id="token的使用"><a href="#token的使用" class="headerlink" title="token的使用"></a>token的使用</h2><p>token是用于鉴权的标识符</p><h3 id="1-token的生成"><a href="#1-token的生成" class="headerlink" title="1. token的生成"></a>1. token的生成</h3><p>token由后端生成</p><h3 id="2-如何判断token有效期"><a href="#2-如何判断token有效期" class="headerlink" title="2. 如何判断token有效期"></a>2. 如何判断token有效期</h3><p>1.如果存在cookie，可以设置cookie有效期，让cookie过期<br>2.如果是localStorage，交给后端判断</p><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><p>token往往更有优势，session在移动端兼容性不好，跨域也存在问题。</p><p>例如，微信小程序就没有cookie，那它怎么可能会依据响应头来设置呢？</p><p>例如，我们请求<a href="https://www.google.com/">https://www.google.com/</a>时，浏览器会自动把google.com的Cookie带过去给google的服务器，而不会把<a href="https://www.baidu.com/">https://www.baidu.com/</a>的Cookie带过去给google的服务器。<br>这就意味着，由于域名不同，用户向系统A登录后，系统A返回给浏览器的Cookie，用户再请求系统B的时候不会将系统A的Cookie带过去。<br>针对Cookie存在跨域问题，有几种解决方案：</p><ul><li><p>服务端将Cookie写到客户端后，客户端对Cookie进行解析，将Token解析出来，此后请求都把这个Token带上就行了</p></li><li><p>后端配置CORS时允许其跨域域名携带cookie</p></li><li><p>将token保存在SessionStroage中，不依赖Cookie就没有跨域的问题了。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> session </tag>
            
            <tag> 概念 </tag>
            
            <tag> token </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>让chrome浏览器支持小12px的像素</title>
      <link href="/2021/09/16/note/html-css-mian-shi-rang-chrome-liu-lan-qi-zhi-chi-xiao-12px-de-xiang-su/"/>
      <url>/2021/09/16/note/html-css-mian-shi-rang-chrome-liu-lan-qi-zhi-chi-xiao-12px-de-xiang-su/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta http-equiv="X-UA-Compatible" content="IE=edge">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>Document</title>    <style>        span {            font-size: 10px;        }<pre><code>    /* 单独设置无效 */    span.transform &#123;        display: inline-block;        /* 这样才能应用缩放 */        transform: scale(0.1);        /* -webkit-transform: scale(1); */    &#125;&lt;/style&gt;</code></pre></head><body>    <span class="transform">        普通浏览器的默认字体是16px 最小字体是12px        若要更小的字体可以使用tansform:scale    </span></body></html>]]></content>
      
      
      <categories>
          
          <category> html&amp;css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 卷 </tag>
            
            <tag> transform </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>各页面间的生命周期函数顺序</title>
      <link href="/2021/09/15/note/vue-ge-ye-mian-jian-de-sheng-ming-zhou-qi-han-shu-shun-xu/"/>
      <url>/2021/09/15/note/vue-ge-ye-mian-jian-de-sheng-ming-zhou-qi-han-shu-shun-xu/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-none"><code class="language-none">APP是主页面HOME LIST 是路由页面 HOME是父组件 LIST是子组件以下是他们的加载顺序:APP beforeCreate APP created APP mounted APP before updateHome beforeCreate  Home created  LIST beforeCreate LIST created LIST mounted Home mounted  APP updated1.主页面比路由先创建、挂载2.父组件比子组件先创建，但子组件比父组件先挂载完。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">不要放在methods处  beforeCreate() &#123;    console.log(&quot;Home beforeCreate&quot;, this);  &#125;,  created() &#123;    console.log(&quot;Home created&quot;, this);  &#125;,  beforeMouted() &#123;    console.log(&quot;Home beforeMouted&quot;, this);  &#125;,  mounted() &#123;    console.log(&quot;Home mounted&quot;, this);  &#125;,  beforeUpdate() &#123;    console.log(&quot;Home before update&quot;);  &#125;,  updated() &#123;    console.log(&quot;Home updated&quot;);  &#125;,  beforeDestroy() &#123;    &#x2F;&#x2F; 及时销毁，否则可能造成内存泄露    console.log(&quot;Home beforeDestroy&quot;);  &#125;,  destroyed() &#123;    console.log(&quot;Home Destroy&quot;);  &#125;,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> vue </tag>
            
            <tag> 生命周期 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是语法糖</title>
      <link href="/2021/09/13/note/qian-duan-bian-cheng-shi-me-shi-yu-fa-tang/"/>
      <url>/2021/09/13/note/qian-duan-bian-cheng-shi-me-shi-yu-fa-tang/</url>
      
        <content type="html"><![CDATA[<p>语法糖 ：是指在不影响功能的情况下，添加某种方法实现同样的效果，从而方便程序开发，简化代码是书写。</p><p>Vue.js的v-bind和v-on指令都提供了语法糖，也可以说是缩写。</p><p>1.v-bind可以省略，直接写一个冒号“:”：</p><p><a v-bind:href="url">链接</a><br><img v-bind:src="imgUrl"></p><!--缩写为：--><p><a :href="url">链接</a><br><img :src="imgUrl" /></p><p>2.v-on：缩写为“@”：<br><button v-on:click="handleClose">点击隐藏</button></p><!--缩写为：--><p>&lt;button @click&#x3D;”handleClose”&gt;点击隐藏</button></p>]]></content>
      
      
      <categories>
          
          <category> 前端编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概念 </tag>
            
            <tag> 语法糖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rem与em的区别</title>
      <link href="/2021/09/12/note/html-css-mian-shi-rem-yu-em-de-qu-bie/"/>
      <url>/2021/09/12/note/html-css-mian-shi-rem-yu-em-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">html</span> <span class="token punctuation">&#123;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">body</span> <span class="token punctuation">&#123;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 12px        <span class="token punctuation">&#125;</span>        <span class="token selector">span</span> <span class="token punctuation">&#123;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 2rem<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>        em是根据父元素的font-size大小来计算<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        rem是根据html元素的font-size大小来计算<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        需要注意的是em和rem不仅可以应用于字体还可以用来应用宽        %和em差不多 不过是把1变成100%    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> html&amp;css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 卷 </tag>
            
            <tag> rem </tag>
            
            <tag> em </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>valueOf转换</title>
      <link href="/2021/09/11/note/js-gai-nian-valueof-zhuan-huan/"/>
      <url>/2021/09/11/note/js-gai-nian-valueof-zhuan-huan/</url>
      
        <content type="html"><![CDATA[<p>valueOf返回对象的原始值：</p><p>Array 返回数组对象本身。<br>Boolean 布尔值。<br>Date 存储的时间是从 1970 年 1 月 1 日午夜开始计的毫秒数 UTC。<br>Function 函数本身。<br>Number 数字值。<br>Object 对象本身。这是默认情况。<br>String 字符串值。</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>暂时性死区</title>
      <link href="/2021/08/29/note/js-gai-nian-zan-shi-xing-si-qu/"/>
      <url>/2021/08/29/note/js-gai-nian-zan-shi-xing-si-qu/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">&#x2F;&#x2F;暂时性死区，let和const没有变量提升（使用&quot;use strict&quot;;发现实际上编译器已经定义b，但不给予使用）e &#x3D; 2;const e;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意，这与块级作用域无关，块级作用域只有变量生效。</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS伪类hover选择器 与 其它选择器的结合使用</title>
      <link href="/2021/08/27/note/html-css-zong-jie-css-wei-lei-hover-xuan-ze-qi/"/>
      <url>/2021/08/27/note/html-css-zong-jie-css-wei-lei-hover-xuan-ze-qi/</url>
      
        <content type="html"><![CDATA[<p>hover可以说是最常用的选择器，本篇将对 CSS伪类hover选择器 与 其它选择器的结合使用做一个总结</p><h2 id="1-聚焦改变自己"><a href="#1-聚焦改变自己" class="headerlink" title="1. 聚焦改变自己"></a>1. 聚焦改变自己</h2><p>.style1:hover</p><p>:hover前面无空格，给最外层parentss设置hover样式（背景变为红色）</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parentss<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  床前明月光  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>childss1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>踏破铁鞋无觅处<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>childss2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>得来全不费工夫<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>childss3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>举头望明月<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>childss4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>低头思故乡<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">.parentss:hover</span> <span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> .style1 :hover</p><p> :hover前面有空格，给parentss的直接子元素设置hover样式（背景变为红色）</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parentss<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  床前明月光  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>childss1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>踏破铁鞋无觅处<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>childss2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>得来全不费工夫<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>childss3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>举头望明月<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>childss4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>低头思故乡<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">.parentss :hover</span> <span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-聚焦我，改变我的子元素（后代）"><a href="#2-聚焦我，改变我的子元素（后代）" class="headerlink" title="2. 聚焦我，改变我的子元素（后代）"></a>2. 聚焦我，改变我的子元素（后代）</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parentss<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  床前明月光  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>childss<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>踏破铁鞋无觅处<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">.parentss</span><span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.parentss:hover .childss</span><span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> rebeccapurple<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-聚焦我，改变我的子元素（父对子）"><a href="#3-聚焦我，改变我的子元素（父对子）" class="headerlink" title="3. 聚焦我，改变我的子元素（父对子）"></a>3. 聚焦我，改变我的子元素（父对子）</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parentss<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  床前明月光  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>childss<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>踏破铁鞋无觅处<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">.parentss</span><span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.parentss:hover > .childss</span><span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> rebeccapurple<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-聚焦我，改变我相邻的兄弟元素（聚焦childss1，改变childss2）"><a href="#4-聚焦我，改变我相邻的兄弟元素（聚焦childss1，改变childss2）" class="headerlink" title="4. 聚焦我，改变我相邻的兄弟元素（聚焦childss1，改变childss2）"></a>4. 聚焦我，改变我相邻的兄弟元素（聚焦childss1，改变childss2）</h2><p>注意：childss1 和 childss2 必须是同级相邻元素</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parentss<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  床前明月光  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>childss1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>踏破铁鞋无觅处<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>childss2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>得来全不费工夫<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">.childss1:hover + .childss2</span><span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-聚焦我，改变不相邻的兄弟元素（聚焦childss1，改变childss3或者childss4）"><a href="#5-聚焦我，改变不相邻的兄弟元素（聚焦childss1，改变childss3或者childss4）" class="headerlink" title="5. 聚焦我，改变不相邻的兄弟元素（聚焦childss1，改变childss3或者childss4）"></a>5. 聚焦我，改变不相邻的兄弟元素（聚焦childss1，改变childss3或者childss4）</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parentss<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  床前明月光  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>childss1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>踏破铁鞋无觅处<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>childss2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>得来全不费工夫<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>childss3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>举头望明月<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>childss4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>低头思故乡<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">.childss1:hover ~ .childss3</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.childss1:hover ~ .childss4</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> html&amp;css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> html </tag>
            
            <tag> hover </tag>
            
            <tag> 伪类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>就地复用是什么</title>
      <link href="/2021/08/27/note/vue-jiu-di-fu-yong-shi-shi-me/"/>
      <url>/2021/08/27/note/vue-jiu-di-fu-yong-shi-shi-me/</url>
      
        <content type="html"><![CDATA[<p>官方的解释 :</p><blockquote><p>如果数据项的顺序被改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序， 而是简单复用此处每个元素。</p></blockquote><p>这也好理解，毕竟只是数据data变了，dom肯定不会发生改变，而且也没有办法去区分dom属于哪项数据。</p><p>如果设置key就不一样了。key是一个唯一的标识符，可以让diff算法对数据项的dom进行区分，这时就会移动dom元素。</p><p>需要注意的是如果设置key为index那么实际上效果和默认情况是一样的，因为index会让vue认为数据项没有发生位置改变。</p><p><a href="https://jsbin.com/xotegaj/40/edit?html,output">点击查看代码演示</a></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>JS Bin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/vue/2.5.17-beta.0/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>采用就地复用策略(vuejs默认情况)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>  <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>(p, i) in persons<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>      &#123;&#123;p.name&#125;&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>down(i)<span class="token punctuation">'</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>i != persons.length - 1<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>下移<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>不采用就地复用策略(设置key)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>  <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>(p, i) in persons<span class="token punctuation">'</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>p.id<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>      &#123;&#123;p.name&#125;&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>down(i)<span class="token punctuation">'</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>i != persons.length - 1<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>下移<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">persons</span><span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'AJ'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Dandan'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Yoko'</span> <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token function-variable function">down</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>persons<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>                    <span class="token comment">//拷贝一个</span>          <span class="token keyword">var</span> listClone <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>persons<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//前后交换</span>          <span class="token keyword">var</span> one <span class="token operator">=</span> listClone<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>          listClone<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> listClone<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          listClone<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> one<span class="token punctuation">;</span>          <span class="token comment">//重新赋值响应式数据</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>persons <span class="token operator">=</span> listClone<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://qiniu.guet.link/asset/202210150138367.gif"></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哪种判断对象为空方式最好</title>
      <link href="/2021/08/26/note/js-mian-shi-p-pan-duan-dui-xiang-wei-kong-fang-shi-he-na-chong-zui-hao-yong/"/>
      <url>/2021/08/26/note/js-mian-shi-p-pan-duan-dui-xiang-wei-kong-fang-shi-he-na-chong-zui-hao-yong/</url>
      
        <content type="html"><![CDATA[<p>先说结论，第二种 Object.keys 方式最好，因为它能获取到非Symbol和可枚举属性，在一般需求下最好用。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="1-JSON-stringify"><a href="#1-JSON-stringify" class="headerlink" title="1. JSON.stringify"></a>1. JSON.stringify</h2><p>序列化后判断 &#x3D;&#x3D; “{}”</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'&#123;&#125;'</span><span class="token punctuation">;</span> <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>限制：<br>值为函数无法准确判断;属性为Symbol时无法准确判断;属性不可枚举时无法准确判断;</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token function-variable function">aa</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'&#123;&#125;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-Object-keys"><a href="#2-Object-keys" class="headerlink" title="2. Object.keys"></a>2. Object.keys</h2><p>Object.keys返回数组后判断数组长度</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>限制：属性为Symbol时无法准确判断;属性不可枚举时无法准确判断;</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">'zhou但是不可枚举'</span><span class="token punctuation">,</span>    <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>obj<span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"符号值"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[] 都无法获取</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-for…in"><a href="#3-for…in" class="headerlink" title="3. for…in"></a>3. for…in</h2><p>构建一个函数，for…in遍历，如果有遍历一次马上return false，否则return true</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">isEmptyObj</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>key <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">isEmptyObj</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//true</span><span class="token function">isEmptyObj</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"zhou"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>限制：属性为Symbol时无法准确判断;属性不可枚举时无法准确判断;</p><h2 id="4-Reflect-ownKeys"><a href="#4-Reflect-ownKeys" class="headerlink" title="4. Reflect.ownKeys"></a>4. Reflect.ownKeys</h2><p>终极方法。Reflect.ownKeys 会获取所有自身属性，也就是包括Symbol和不可枚举。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">'zhou但是不可枚举'</span><span class="token punctuation">,</span>    <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>obj<span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"符号值"</span><span class="token punctuation">;</span>obj<span class="token punctuation">[</span><span class="token string">'fn'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//['name', 'fn', Symbol()]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> 对象判断 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack-VUE-cli-node的关系</title>
      <link href="/2021/08/22/note/qian-duan-gong-cheng-hua-webpack-vue-cli-node-de-guan-xi/"/>
      <url>/2021/08/22/note/qian-duan-gong-cheng-hua-webpack-vue-cli-node-de-guan-xi/</url>
      
        <content type="html"><![CDATA[<p>Vue-cli集成了webpack进行vue打包，而webpack依赖node。Vue中的main.js是webpack的入口文件。vue-cli 的 webpack 配置，是在项目根目录，添加 vue.config.js 进行配置，大部分写法类似。</p>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递归、循环、迭代、遍历和枚举区别</title>
      <link href="/2021/08/22/note/js-gai-nian-di-gui-xun-huan-die-dai-bian-li-he-mei-ju-qu-bie/"/>
      <url>/2021/08/22/note/js-gai-nian-di-gui-xun-huan-die-dai-bian-li-he-mei-ju-qu-bie/</url>
      
        <content type="html"><![CDATA[<p>递归：一个函数不断调用自身的行为</p><p>循环：指的是在满足条件的情况下，重复执行同一段代码。一般语言都会有三种类型的循环语句:for语句、while语句和do While语句</p><p>迭代：反复调用同一个过程最终达成目的，这个过程如果是一个函数，那就是递归，如果是一个循环体，那就是狭义上的迭代。</p><p>遍历：树形结构的一种重要运算，指的是按照一定的规则访问树形结构中的每个节点，而且每个节点都只访问一次。</p><p>枚举：在数学和计算机科学理论中，一个集的枚举是列出某些有穷序列集的所有成员的程序，或者是一种特定类型对象的计数。</p><p>抠字眼的时候请多用英文</p><p>遍历 ~ Traverse 访问一个集合(广义)的每个元素</p><p>迭代 ~ Iterate 反复调用同一个过程最终达成目的，这个过程如果是一个函数，那就是递归，如果是一个循环体，那就是狭义上的迭代。</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">&#x2F;&#x2F;迭代器        let arr &#x3D; [1, 2, 3, 4]        const fn &#x3D; arr[Symbol.iterator]();        fn.next();        fn.next()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总之遍历是目的，迭代是手段</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 循环 </tag>
            
            <tag> 遍历 </tag>
            
            <tag> 枚举 </tag>
            
            <tag> 递归 </tag>
            
            <tag> 迭代 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>垃圾回收机制</title>
      <link href="/2021/08/19/note/js-gai-nian-l-la-ji-hui-shou-ji-zhi/"/>
      <url>/2021/08/19/note/js-gai-nian-l-la-ji-hui-shou-ji-zhi/</url>
      
        <content type="html"><![CDATA[<p>GC是垃圾收集的意思(Garbage Collection)</p><h2 id="1-标记清除法"><a href="#1-标记清除法" class="headerlink" title="1. 标记清除法"></a>1. 标记清除法</h2><p>js中最常用的垃圾回收方式就是标记清除。当变量进入环境时，例如，在函数中声明一个变量，就将这个变量标记为“进入环境”。从逻辑上讲，永远不能释放进入环境的变量所占用的内存，因为只要执行流进入相应的环境，就可能会用到它们。而当变量离开环境时，则将其标记为“离开环境”。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span> <span class="token punctuation">;</span>       <span class="token comment">// 被标记 ，进入环境 </span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">20</span> <span class="token punctuation">;</span>       <span class="token comment">// 被标记 ，进入环境</span><span class="token punctuation">&#125;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 执行完毕 之后 a、b又被标离开环境，被回收。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>标记的方式有很多种，这是最常见的：</p><p>垃圾回收器在运行的时候会给存储在内存中的所有变量都加上标记（当然，可以使用任何标记方式）。然后，它会<strong>去掉环境中的变量以及被环境中的变量引用的变量的标记（闭包）</strong>。而<strong>在此之后再被加上标记的变量将被视为准备删除的变量</strong>，原因是环境中的变量已经无法访问到这些变量了。最后，垃圾回收器完成内存清除工作，销毁那些带标记的值并回收它们所占用的内存空间。</p><p>我们更多的是关注其策略：</p><p>引擎在执行 GC（使用标记清除算法）时，需要从出发点去遍历内存中所有的对象去打标记，而这个出发点有很多，我们称之为一组 根 对象，而所谓的根对象，其实在浏览器环境中包括又不止于 全局Window对象、文档DOM树 等</p><p>整个标记清除算法大致过程就像下面这样：</p><p>（1）垃圾收集器在运行时会给内存中的所有变量都加上一个标记，假设内存中所有对象都是垃圾，全标记为0</p><p>（2）然后从各个根对象开始遍历，把不是垃圾的节点改成1</p><p>（3）清理所有标记为0的垃圾，销毁并回收它们所占用的内存空间</p><p>（4）最后，把所有内存中对象标记修改为0，等待下一轮垃圾回收</p><p>优点</p><p>标记清除算法的优点只有一个，那就是实现比较简单，打标记也无非打与不打两种情况，这使得一位二进制位（0和1）就可以为其标记，非常简单</p><p>缺点</p><p>标记清除算法有一个很大的缺点，就是在清除之后，剩余的对象内存位置是不变的，也会导致空闲内存空间是不连续的，出现了 内存碎片（如下图），并且由于剩余空闲内存不是一整块，它是由不同大小内存组成的内存列表，这就牵扯出了内存分配的问题</p><h2 id="2-引用计数"><a href="#2-引用计数" class="headerlink" title="2. 引用计数"></a>2. 引用计数</h2><p>记录引用的次数 为0是垃圾</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> o1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">o2</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//创建2个对象o2和o1，其中o2被o1对象引用作为其属性，此时没有垃圾可收集</span><span class="token keyword">var</span> o3 <span class="token operator">=</span> o1<span class="token punctuation">;</span> <span class="token comment">//创建变量o3，引用由o1指向的对象的变量</span>o1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//现在将o1重新赋值为1，最初的o1中的对象由o3变量表示</span><span class="token keyword">var</span> o4 <span class="token operator">=</span> o3<span class="token punctuation">.</span>o2<span class="token punctuation">;</span> <span class="token comment">//创建变量o4，引用对象o2，此时o2被两个地方引用：一个是作为o3变量的属性，一个是作为o4变量</span>o3 <span class="token operator">=</span> <span class="token string">'666'</span><span class="token punctuation">;</span> <span class="token comment">// 此时最初o1对象应没有再被引用了，可以被垃圾收集了，但是最初的o2还在被o4引用，因此还不能被垃圾收集</span>o4 <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span> <span class="token comment">//此时 o2也可以说再见了...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优点</p><p>引用计数算法的优点我们对比标记清除来看就会清晰很多，首先引用计数在引用值为 0 时，也就是在变成垃圾的那一刻就会被回收，所以它可以立即回收垃圾<br>而标记清除算法需要每隔一段时间进行一次，那在应用程序（JS脚本）运行过程中线程就必须要暂停去执行一段时间的 GC，另外，标记清除算法需要遍历堆里的活动以及非活动对象来清除，而引用计数则只需要在引用时计数就可以了</p><p>缺点：</p><p>（1）它需要一个计数器，而此计数器需要占很大的位置，因为我们也不知道被引用数量的上限</p><p>（2）还有就是无法解决循环引用无法回收的问题，这也是最严重的</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">b</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>a<span class="token punctuation">.</span>b <span class="token operator">=</span> a<span class="token comment">//这时 a=null 对于引用计次法无效 因为b一直引用a</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://qiniu.guet.link/asset/202210242348658.png" alt="循环引用"></p><p><a href="https://zh.wikipedia.org/wiki/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6_(%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8)#%E6%A0%87%E8%AE%B0%EF%BC%8D%E6%B8%85%E9%99%A4">垃圾回收</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management#garbage_collection">mdn内存管理</a></p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> GC </tag>
            
            <tag> 垃圾回收 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>介绍一下路由懒加载</title>
      <link href="/2021/08/19/note/vue-mian-shi-jie-shao-yi-xia-lu-you-lan-jia-zai/"/>
      <url>/2021/08/19/note/vue-mian-shi-jie-shao-yi-xia-lu-you-lan-jia-zai/</url>
      
        <content type="html"><![CDATA[<h2 id="使用原因："><a href="#使用原因：" class="headerlink" title="使用原因："></a>使用原因：</h2><p>Vue是单页面 JS包很大  首页加载长 白屏时间多  </p><p>需要路由懒加载 按需加载 分担首页加载压力  &#x3D;》页面出现白屏的时间长是为什么？ JS包大是一种原因。懒加载是其中一种方案</p><p>三种</p><p>Vue resolve 异步组件 会把每个异步组件单独打成一个JS文件 chunk</p><p>ES6中的import方法 可以不指定块名称 也会单独打包成一个块名称 当然也可以指定 相同块名称 打包在一起</p><p>webpack的 require.ensure方法 只要我们指定相同块名称的路由 相同的合并 打包成一个JS</p><h2 id="实际使用"><a href="#实际使用" class="headerlink" title="实际使用"></a>实际使用</h2><p>异步组件接受一个返回promise的工厂函数</p><p>那么我们可以使用import()</p><p>（官网唯一描述的写法）ES6+webpack import动态加载</p><p><img src="https://qiniu.guet.link/asset/202209081802773.png" alt="路由懒加载"></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> vue </tag>
            
            <tag> vue-router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端请求接口有时返回json字符串是怎么回事？</title>
      <link href="/2021/08/15/note/js-qian-duan-qing-qiu-jie-kou-you-shi-fan-hui-json-zi-fu-chuan-shi-zen-me-hui-shi-content-type-json/"/>
      <url>/2021/08/15/note/js-qian-duan-qing-qiu-jie-kou-you-shi-fan-hui-json-zi-fu-chuan-shi-zen-me-hui-shi-content-type-json/</url>
      
        <content type="html"><![CDATA[<p>前端ajax请求接口时，有时请求回来一个json对象，有时请求回来一个json字符串是怎么回事？</p><h2 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h2><p>这与响应头有关。后端response不设置返回类型，则默认会以普通文本处理，js中需要手动使用JSON.parse(str)等方法将返回的字符串转换为json对象使用。</p><h2 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h2><p>(1) 设置响应头:</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Content-type:application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//以JSON格式输出</span><span class="token comment">// Content-type:application/json;charset=utf-8</span><span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">"status"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"ok"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"text"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"成功"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//echo json($data) 如果是thinkPHP框架还可以借助助手函数</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(2) 框架配置:</p><p>例如jquery设置dataType</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"post"</span><span class="token punctuation">,</span>    <span class="token literal-property property">dataType</span><span class="token operator">:</span> <span class="token string">"json"</span><span class="token punctuation">,</span><span class="token comment">//默认解析成json对象</span>    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>url<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"ajax返回的类型是："</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>这里和请求头的content-type没有关系。请求头的content-type只会影响后端以怎样的方式解析请求体。</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ajax </tag>
            
            <tag> content-type </tag>
            
            <tag> json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-在data中引入图片的正确路径(转)-模块化-import-require</title>
      <link href="/2021/08/14/note/vue-zai-data-zhong-yin-ru-tu-pian-de-zheng-que-lu-jing-zhuan-mo-kuai-hua-import-require/"/>
      <url>/2021/08/14/note/vue-zai-data-zhong-yin-ru-tu-pian-de-zheng-que-lu-jing-zhuan-mo-kuai-hua-import-require/</url>
      
        <content type="html"><![CDATA[<p>使用require “xx”,不要使用import “xx”</p><p>因为import xx from xx 是<strong>静态引入</strong>的，语法规定它<strong>只能在顶层使用</strong>。</p><p>就像你在函数中调用它的话，意味着这是<strong>运行时</strong>才能得到的结果了。</p><p><a href="https://www.easck.com/cos/2022/0605/963278.shtml">https://www.easck.com/cos/2022/0605/963278.shtml</a></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>apply、call、bind的使用和区别</title>
      <link href="/2021/08/11/note/js-mian-shi-apply-call-bind-de-shi-yong-he-qu-bie/"/>
      <url>/2021/08/11/note/js-mian-shi-apply-call-bind-de-shi-yong-he-qu-bie/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>查看文本内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">let</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> text <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'text'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//一般情况下用call</span>        <span class="token comment">//apply第二个参数接收数组 像Math.max方法这个只能接收多个参数的方法 我们可以利用apply传参</span>        <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> maxVal <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>maxVal<span class="token punctuation">)</span>        <span class="token comment">//bind会返回一个函数 对于有给定函数要求的 要使用bind 例如onclick只接收函数</span>        <span class="token comment">//一般回调函数用bind()</span>        btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">123</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> this </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Yarn的基本使用</title>
      <link href="/2021/08/08/note/qian-duan-gong-cheng-hua-yarn-de-ji-ben-shi-yong/"/>
      <url>/2021/08/08/note/qian-duan-gong-cheng-hua-yarn-de-ji-ben-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Yarn的优点"><a href="#1-Yarn的优点" class="headerlink" title="1. Yarn的优点"></a>1. Yarn的优点</h2><p>1.速度快<br>2.版本统一，有lock文件<br>3.更间接的输出，安装时没有npm大量的信息输出<br>4.更好的语义化</p><h2 id="2-yarn和npm命令对比"><a href="#2-yarn和npm命令对比" class="headerlink" title="2. yarn和npm命令对比"></a>2. yarn和npm命令对比</h2><table><thead><tr><th>yarn</th><th>npm</th></tr></thead><tbody><tr><td>npm install</td><td>yarn</td></tr><tr><td>npm install react –save</td><td>yarn add react</td></tr><tr><td>npm uninstall react –save</td><td>yarn remove react</td></tr><tr><td>npm install react –save-dev</td><td>yarn add react -dev</td></tr><tr><td>npm update –save</td><td>yarn upgrade</td></tr></tbody></table><h2 id="3-安装"><a href="#3-安装" class="headerlink" title="3. 安装"></a>3. 安装</h2><p>cnpm i -g yarn<br><br>在安装之后使用vue create命令 后选中 use yarn 后非常的快</p>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> yarn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组去重</title>
      <link href="/2021/08/02/note/js-mian-shi-s-shu-zu-qu-chong/"/>
      <url>/2021/08/02/note/js-mian-shi-s-shu-zu-qu-chong/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//1.使用 new set 和Array.from</span>        <span class="token keyword">function</span> <span class="token function">removeRe</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回对象</span>                        <span class="token comment">//return [...new Set(numbers)]; //es6写法</span>            <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置成数组</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//2.使用indexOf判断新数组是否存在这个元素</span>        <span class="token keyword">function</span> <span class="token function">removeRe2</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> value <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//判断数组是否有这元素</span>                    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//3.排序两两两对比</span>        <span class="token keyword">function</span> <span class="token function">removeRe3</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            arr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> arr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//和前面的元素比较是否一样 当然和后面比较也一样</span>                    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// let res = removeRe(arr);</span>        <span class="token comment">// let res = removeRe2(arr);</span>        <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">removeRe3</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> 数组 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 去重 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序自定义头部底部</title>
      <link href="/2021/07/28/note/wei-xin-xiao-cheng-xu-zi-ding-yi-tou-bu-di-bu/"/>
      <url>/2021/07/28/note/wei-xin-xiao-cheng-xu-zi-ding-yi-tou-bu-di-bu/</url>
      
        <content type="html"><![CDATA[<p>1.自定义顶部</p><p>“navigationStyle”:”custom”</p><p>2.自定义底部</p><p>不设置tabbar</p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> 生命周期 </tag>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序的生命周期</title>
      <link href="/2021/07/28/note/wei-xin-xiao-cheng-xu-sheng-ming-zhou-qi/"/>
      <url>/2021/07/28/note/wei-xin-xiao-cheng-xu-sheng-ming-zhou-qi/</url>
      
        <content type="html"><![CDATA[<p><strong>APP生命周期：</strong></p><p>onLaunch: 初始化小程序时触发，全局只触发一次</p><p>onShow: 小程序初始化完成或用户从后台切换到前台显示时触发</p><p>onHide: 用户从前台切换到后台隐藏时触发</p><p>onError: 小程序发生脚本错误，或者 api 调用失败时，会触发 onError 并带上错误信息</p><p><strong>页面生命周期（页面中调用函数）：</strong></p><p>onLoad：首次进入页面加载时触发，可以在 onLoad 的参数中获取打开当前页面路径中的参数。</p><p>onShow：加载完成后、后台切到前台或重新进入页面时触发</p><p>onReady：页面首次渲染完成时触发</p><p>onHide：从前台切到后台或进入其他页面触发</p><p>onUnload：页面卸载时触发</p><p><strong>组件生命周期（组件中调用函数）：</strong></p><p>created：在组件实例刚刚被创建时执行</p><p>attached：在组件实例进入页面节点树时执行</p><p>ready：在组件在视图层布局完成后执行</p><p>moved：在组件实例被移动到节点树另一个位置时执行</p><p>detached：在组件实例被从页面节点树移除时执行</p><p>error：每当组件方法抛出错误时执行</p><p><strong>组件所在页面生命周期（组件监听页面）：</strong><br>show ：组件所在的页面被展示时执行</p><p>hide ：组件所在的页面被隐藏时执行</p><p>resize ：组件所在的页面尺寸变化时执行</p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> 生命周期 </tag>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序网络请求异常问题</title>
      <link href="/2021/07/25/note/wei-xin-xiao-cheng-xu-bu-xiao-yan-url/"/>
      <url>/2021/07/25/note/wei-xin-xiao-cheng-xu-bu-xiao-yan-url/</url>
      
        <content type="html"><![CDATA[<pre><code>微信小程序的请求是需要在小程序账号后台配置request合法域名的开发阶段可以不配置，在微信小程序编辑器=》右边详情=》本地设置处有个“不校验域名”的按钮，勾选后就可以正常请求了但是上线阶段还是需要配置</code></pre>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> uniapp </tag>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改placeholder</title>
      <link href="/2021/07/19/note/html-css-mian-shi-xiu-gai-placeholder/"/>
      <url>/2021/07/19/note/html-css-mian-shi-xiu-gai-placeholder/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reset.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">#myinput::placeholder,        #myinput::-webkit-input-placeholder</span> <span class="token punctuation">&#123;</span>            <span class="token property">color</span><span class="token punctuation">:</span> darkred<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myinput<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myinput<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> html&amp;css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Symbol数据类型的使用</title>
      <link href="/2021/07/17/note/js-gai-nian-symbol-shu-ju-lei-xing-de-shi-yong/"/>
      <url>/2021/07/17/note/js-gai-nian-symbol-shu-ju-lei-xing-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Symbol会生成唯一值"><a href="#1-Symbol会生成唯一值" class="headerlink" title="1. Symbol会生成唯一值;"></a>1. Symbol会生成唯一值;</h2><p>把symbol想象成唯一值的字符串</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">let s1 &#x3D; Symbol();let s2 &#x3D; Symbol();s1 &#x3D;&#x3D; s2 &#x2F;&#x2F;false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2-描述"><a href="#2-描述" class="headerlink" title="2. 描述"></a>2. 描述</h2><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">&#x2F;&#x2F;定义描述let s1 &#x3D; Symbol(&quot;吃了吗&quot;);&#x2F;&#x2F;有描述&#x2F;&#x2F;获取描述s1.description &#x2F;&#x2F;吃了吗<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-Symbol全局注册"><a href="#3-Symbol全局注册" class="headerlink" title="3. Symbol全局注册"></a>3. Symbol全局注册</h2><blockquote><p>Symbol.for(key) 方法会根据给定的键 key，来从运行时的 symbol 注册表中找到对应的 symbol，如果找到了，则返回它，否则，新建一个与该键关联的 symbol，并放入全局 symbol 注册表中。——MDN</p></blockquote><h3 id="3-1-复用"><a href="#3-1-复用" class="headerlink" title="3.1 复用"></a>3.1 复用</h3><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">let s1 &#x3D; Symbol.for(&quot;name&quot;);&#x2F;&#x2F;有描述let s2 &#x3D; Symbol.for(&quot;name&quot;);&#x2F;&#x2F;有描述s1 &#x3D;&#x3D; s2 &#x2F;&#x2F;true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-获取描述"><a href="#3-2-获取描述" class="headerlink" title="3.2 获取描述"></a>3.2 获取描述</h3><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">let s1 &#x3D; Symbol.for(&quot;name&quot;);&#x2F;&#x2F;获取描述Symbol.keyFor(s1);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="4-使用场景"><a href="#4-使用场景" class="headerlink" title="4. 使用场景"></a>4. 使用场景</h2><p>（1）解决对象属性的耦合问题</p><p>成绩重名问题</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">let user1 &#x3D; &#123;name:&quot;李四&quot;,key:Symbol()&#125;let user2 &#x3D; &#123;name:&quot;李四&quot;,key:Symbol()&#125;let grade &#x3D; &#123;    [user1.key]:&#123;js:100,css:80&#125;,    [user1.key]:&#123;js:80,css:60&#125;&#125;console.log(grade[user1.key]);&#x2F;&#x2F;这样就可以根据key的Symbol值获取成绩<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）Symbol在缓存容器中的使用</p><p>缓存</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">class Cache()&#123;    static data &#x3D; &#123;&#125;;    static set(name,value)&#123;        return (this.data[name] &#x3D; value);    &#125;;    static get(name)&#123;        return this.data[name];    &#125;&#125;let user &#x3D;&#123;    name : &quot;apple&quot;,    desc : &quot;用户资料&quot;,    key:Symbol(&quot;用户资料数据&quot;)&#125;let cart &#x3D;&#123;    name : &quot;apple&quot;,    desc : &quot;购物车&quot;，    key:Symbol(&quot;购物车数据&quot;)&#125;Cache.set(user.key,user);Cache.set(cart.key,cart);console.log(Cache.get(cart.key))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-Symbol特性与对象属性保护"><a href="#4-Symbol特性与对象属性保护" class="headerlink" title="4. Symbol特性与对象属性保护"></a>4. Symbol特性与对象属性保护</h2><p>（1） 无法直接遍历</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">&#x2F;&#x2F;for...in 和 for...of都不行&#x2F;&#x2F;理解成Symbol是私有属性let symbol &#x3D; Symbol(&quot;这是一个Symbol类型&quot;)let obj &#x3D; &#123;    name:&quot;周贵&quot;,    [symbol]:&quot;24是学生&quot;&#125;&#x2F;&#x2F;这里只能遍历到namefor(let key in obj)&#123;    console.log(key)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(2) 如何非直接的，遍历？</p><p>Object.getOwnPropertySymbols()</p><p>这样只能遍历对象中的symbol属性</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">let symbol &#x3D; Symbol(&quot;这是一个Symbol类型&quot;)let obj &#x3D; &#123;    name:&quot;周贵&quot;,    [symbol]:&quot;24是学生&quot;&#125;let symbols &#x3D; Object.getOwnPropertySymbols(obj)for(let key of symbols)&#123;    console.log(obj[key])&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(3) Reflect.ownKeys 遍历全部属性</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">let symbol &#x3D; Symbol(&quot;这是一个Symbol类型&quot;)let obj &#x3D; &#123;    name:&quot;周贵&quot;,    [symbol]:&quot;24是学生&quot;&#125;for(let key of Reflect.ownKeys(obj))&#123;    console.log(key)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目打包出现空白页</title>
      <link href="/2021/07/09/note/vue-mian-shi-xiang-mu-da-bao-chu-xian-kong-bai-ye/"/>
      <url>/2021/07/09/note/vue-mian-shi-xiang-mu-da-bao-chu-xian-kong-bai-ye/</url>
      
        <content type="html"><![CDATA[<h2 id="问题发生："><a href="#问题发生：" class="headerlink" title="问题发生："></a>问题发生：</h2><p>路由模式为history（原来是hash）&#x3D;》打包&#x3D;》打开后发现是空白页 &#x2F;Users&#x2F;each&#x2F;desktop&#x2F;demo&#x2F;dist&#x2F;index.html</p><h2 id="空白原因："><a href="#空白原因：" class="headerlink" title="空白原因："></a>空白原因：</h2><p>（1）资源路径不对</p><p>f12检查资源是&#x2F;xx.js，表示根目录，如果项目不在根目录，那就是错误的。</p><p>需要修改为相对路径 .&#x2F;xx.js。</p><p>（2）history请求不到访问</p><p>hash的路径是通过#来模拟完整路径的，并不会重新加载页面，所以自然不会有问题。</p><p>而history模式充分利用 history.pushState API 来完成 URL 跳转而无须重新加载页面，但是直接进入url，比如<a href="http://oursite.com/user/id%EF%BC%8Cnginx%E5%B0%B1%E4%BC%9A%E6%A0%B9%E6%8D%AE%E4%BD%A0%E7%9A%84%E8%B7%AF%E7%94%B1%E5%AF%BB%E6%89%BE%E9%A1%B5%E9%9D%A2%EF%BC%8C%E8%BF%99%E6%97%B6%E5%80%99%E9%9C%80%E8%A6%81%E6%B2%A1%E6%9C%89%E5%93%8D%E5%BA%94%E7%9A%84%E9%85%8D%E7%BD%AE%E5%B0%B1%E4%BC%9A404">http://oursite.com/user/id，nginx就会根据你的路由寻找页面，这时候需要没有响应的配置就会404</a>.</p><h2 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h2><p>（1）配置vue.config.js</p><blockquote><p>默认情况下，Vue CLI 会假设你的应用是被部署在一个域名的根路径上，例如 <a href="https://www.my-app.com/">https://www.my-app.com/</a> 。如果应用被部署在一个子路径上，你就需要用这个选项指定这个子路径。例如，如果你的应用被部署在 <a href="https://www.my-app.com/my-app/">https://www.my-app.com/my-app/</a> ，则设置 publicPath 为 &#x2F;my-app&#x2F;</p></blockquote><p><a href="https://cli.vuejs.org/zh/config/#publicpath">https://cli.vuejs.org/zh/config/#publicpath</a></p><p>（2）配置nginx</p><p><a href="https://v3.router.vuejs.org/zh/guide/essentials/history-mode.html#%E5%90%8E%E7%AB%AF%E9%85%8D%E7%BD%AE%E4%BE%8B%E5%AD%90">https://v3.router.vuejs.org/zh/guide/essentials/history-mode.html#%E5%90%8E%E7%AB%AF%E9%85%8D%E7%BD%AE%E4%BE%8B%E5%AD%90</a></p><h2 id="开发流程："><a href="#开发流程：" class="headerlink" title="开发流程："></a>开发流程：</h2><p>在开发时，前端测试使用hash模式，这样内容是可以正常显示的</p><p>在上线时，为了路径好看使用history模式</p><p>需要注意路径问题，如果项目不部署在根目录就需要配置Nginx或其它服务器文件。如果根目录访问的是后端服务的话，让后端重定向到前端页面路径。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本质上就是路径不对</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-组件是一个Vue实例吗</title>
      <link href="/2021/07/03/note/vue-zu-jian-shi-yi-ge-vue-shi-li-ma/"/>
      <url>/2021/07/03/note/vue-zu-jian-shi-yi-ge-vue-shi-li-ma/</url>
      
        <content type="html"><![CDATA[<p>是Vue实例，但是是继承自根组件，验证方法是：</p><p>在main.js中设置一个</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$echarts <span class="token operator">=</span> Echarts<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那么所有组件都能从原型上访问得到,组件中打印this，翻上两层__proto__可以看到$echarts</p><p><img src="https://qiniu.guet.link/asset/202211250206354.png"></p><p><a href="https://v2.cn.vuejs.org/v2/guide/instance.html">https://v2.cn.vuejs.org/v2/guide/instance.html</a></p><p><a href="https://segmentfault.com/q/1010000012918351?utm_source=sf-similar-question">https://segmentfault.com/q/1010000012918351?utm_source=sf-similar-question</a></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vuecli的简单使用</title>
      <link href="/2021/06/30/note/vue-vuecli-de-jian-dan-shi-yong/"/>
      <url>/2021/06/30/note/vue-vuecli-de-jian-dan-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="1-vue安装"><a href="#1-vue安装" class="headerlink" title="1. vue安装"></a>1. vue安装</h2><p>vue2项目我们一般使用vetur，<br>vue3项目官方建议使用volar，<br>所以使用vue2的时候禁止volar，<br>使用vue3禁止volar<br>注意：vue-cli版本和vue版本无关</p><h3 id="1-1-npm安装"><a href="#1-1-npm安装" class="headerlink" title="1.1 npm安装"></a>1.1 npm安装</h3><p>指定版本：<br><br>3.0以下:npm install -g vue-cli@版本号<br><br>3.0以上:npm install -g @vue&#x2F;cli@版本号<br><br>不想指定就去掉@版本号</p><pre class="line-numbers language-none"><code class="language-none">npm install -g @vue&#x2F;cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>\</p><h3 id="1-2-验证安装"><a href="#1-2-验证安装" class="headerlink" title="1.2 验证安装"></a>1.2 验证安装</h3><p>vue -V</p><h3 id="1-3-创建项目"><a href="#1-3-创建项目" class="headerlink" title="1.3 创建项目"></a>1.3 创建项目</h3><p>1.命令</p><pre class="line-numbers language-none"><code class="language-none">vue create vue-manage<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.有选择yarn的选项就选yarn ，没有先安装yarn\</p><h2 id="2-element-ui的使用"><a href="#2-element-ui的使用" class="headerlink" title="2. element-ui的使用"></a>2. element-ui的使用</h2><h3 id="2-1-npm引入element-ui"><a href="#2-1-npm引入element-ui" class="headerlink" title="2.1 npm引入element-ui"></a>2.1 npm引入element-ui</h3><p>cnpm i element-ui -D</p><h3 id="2-2-element-ui引入和使用"><a href="#2-2-element-ui引入和使用" class="headerlink" title="2.2 element-ui引入和使用"></a>2.2 element-ui引入和使用</h3><p><a href="https://element.eleme.io/#/zh-CN/component/quickstart">https://element.eleme.io/#/zh-CN/component/quickstart</a></p><h4 id="2-2-1-全局引入"><a href="#2-2-1-全局引入" class="headerlink" title="2.2.1 全局引入"></a>2.2.1 全局引入</h4><pre class="line-numbers language-none"><code class="language-none">import Vue from &#39;vue&#39;import App from &#39;.&#x2F;App.vue&#39;&#x2F;&#x2F;引入import ElementUI from &#39;element-ui&#39;;Vue.config.productionTip &#x3D; falseVue.use(ElementUI);&#x2F;&#x2F;使用new Vue(&#123;  render: h &#x3D;&gt; h(App),&#125;).$mount(&#39;#app&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后再vue页面 使用element-ui的代码就可以了</p><h4 id="2-2-2-按需引入"><a href="#2-2-2-按需引入" class="headerlink" title="2.2.2 按需引入"></a>2.2.2 按需引入</h4><p>全局引入在构建打包的时候会包含很多不需要的文件，因此有了按需引入<br>可以打包查看dist体积\</p><pre class="line-numbers language-none"><code class="language-none">npm run build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><p>babel-plugin-component<br>借助 babel-plugin-component，我们可以只引入需要的组件，以达到减小项目体积的目的。</p><pre class="line-numbers language-none"><code class="language-none">npm install babel-plugin-component -D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>复制element文档中的配置到babel.config.js</p><pre class="line-numbers language-none"><code class="language-none">   &quot;plugins&quot;: [  [    &quot;component&quot;,    &#123;      &quot;libraryName&quot;: &quot;element-ui&quot;,      &quot;styleLibraryName&quot;: &quot;theme-chalk&quot;    &#125;  ]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>解构组件</p><pre class="line-numbers language-none"><code class="language-none">import Vue from &#39;vue&#39;import App from &#39;.&#x2F;App.vue&#39;import &#123; Button &#125; from &#39;element-ui&#39;;import &#39;element-ui&#x2F;lib&#x2F;theme-chalk&#x2F;index.css&#39;;import &#39;.&#x2F;assets&#x2F;css&#x2F;reset.css&#39;; &#x2F;&#x2F;添加重置样式Vue.config.productionTip &#x3D; false &#x2F;&#x2F;是否开启生产模式 非生产模式会存在一定输出提示Vue.use(Button);new Vue(&#123;  render: h &#x3D;&gt; h(App),&#125;).$mount(&#39;#app&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="2-3-启动服务"><a href="#2-3-启动服务" class="headerlink" title="2.3 启动服务"></a>2.3 启动服务</h3><pre class="line-numbers language-none"><code class="language-none">npm run serve<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-Vue路由"><a href="#3-Vue路由" class="headerlink" title="3. Vue路由"></a>3. Vue路由</h2><p>单页应用比如 vue、react、angular 等框架都是单页应用的思想，也能实现页面跳转，只不过方式不同，比如有a,b两个页面，访问时是 xxx&#x2F;#&#x2F;a , xxx&#x2F;#&#x2F;b (hash方式) ，通过#后的路径参数表示页面，然后由 vue路由监测并做出响应，没有真正进行跳转，这种方式使得在切换页面时流畅无卡顿(除去网络因素)。<br>单页应用的优缺点:<br><a href="https://juejin.cn/post/6950100237985775623">https://juejin.cn/post/6950100237985775623</a><br><br>当然Vue也是可以做多页应用的，所谓多页应用就是多个页面。<br>多页一般情况下会和服务端渲染联系在一起，适合场景：<br>1、seo要求高<br>2、首屏时间要求高</p><h3 id="3-1-安装"><a href="#3-1-安装" class="headerlink" title="3.1 安装"></a>3.1 安装</h3><p>在项目中安装指定版本，因为vue2只能用router3版本，直接安装会报错</p><pre class="line-numbers language-none"><code class="language-none">cnpm i vue-router@3.2.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果自定义安装项目时安装了vue-router可不用</p><h3 id="3-2-创建路由页面文件夹与文件"><a href="#3-2-创建路由页面文件夹与文件" class="headerlink" title="3.2 创建路由页面文件夹与文件"></a>3.2 创建路由页面文件夹与文件</h3><p>vue-manage\src\views\Home.vue</p><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div&gt;这是vue路由页面&lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;  name: &quot;IndexHome&quot;, &#x2F;&#x2F;eslint代码规范检查  data() &#123;    return &#123;&#125;;  &#125;,&#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-创建路由文件夹与文件"><a href="#3-3-创建路由文件夹与文件" class="headerlink" title="3.3 创建路由文件夹与文件"></a>3.3 创建路由文件夹与文件</h3><p>vue-manage\src\router\index.js<br><br>配置路由:</p><pre class="line-numbers language-none"><code class="language-none">import Vue from &quot;vue&quot;;import VueRouter from &quot;vue-router&quot;;Vue.use(VueRouter);&#x2F;&#x2F;路由配置const routes &#x3D; [    &#123;        path: &#39;&#x2F;&#39;,        name: &#39;Home&#39;,&#x2F;&#x2F;方便函数式编程使用，可以不要        component: () &#x3D;&gt; import(&#39;..&#x2F;views&#x2F;Home.vue&#39;) &#x2F;&#x2F; 这个动态导入会返回一个 &#96;Promise&#96; 对象。    &#125;]const router &#x3D; new VueRouter(&#123;    mode: &#39;history&#39;,    routes &#x2F;&#x2F;这里是需要routes属性的，所以如果是其它名字请写成routes ：xxx&#125;)export default router; &#x2F;&#x2F;对外暴露<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里使用局部注册 <a href="https://cn.vuejs.org/v2/guide/components-dynamic-async.html#%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6">https://cn.vuejs.org/v2/guide/components-dynamic-async.html#%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6</a></p><h3 id="3-3-main-js-引入"><a href="#3-3-main-js-引入" class="headerlink" title="3.3 main.js 引入"></a>3.3 main.js 引入</h3><pre class="line-numbers language-none"><code class="language-none">import Vue from &#39;vue&#39;import App from &#39;.&#x2F;App.vue&#39;import &#123; Button, Checkbox &#125; from &#39;element-ui&#39;;import &#39;element-ui&#x2F;lib&#x2F;theme-chalk&#x2F;index.css&#39;;import router from &quot;.&#x2F;router&quot;;&#x2F;&#x2F;这里会直接引入index.jsVue.config.productionTip &#x3D; false &#x2F;&#x2F;是否开启生产模式 非生产模式会存在一定输出提示Vue.use(Button);Vue.use(Checkbox);new Vue(&#123;  router,  render: h &#x3D;&gt; h(App),&#125;).$mount(&#39;#app&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为什么可以直接引入文件夹：<br><a href="http://t.zoukankan.com/goloving-p-8889585.html(%E5%AD%98%E7%96%91)">http://t.zoukankan.com/goloving-p-8889585.html(存疑)</a></p><h3 id="3-4-使用-router-link跳转"><a href="#3-4-使用-router-link跳转" class="headerlink" title="3.4 使用 router-link跳转"></a>3.4 使用 router-link跳转</h3><p>vue-manage\src\components\HelloWorld.vue</p><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div class&#x3D;&quot;hello&quot;&gt;    &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;h1&gt;    &lt;router-link to&#x3D;&quot;&#x2F;user&quot;&gt;      &lt;el-button @click&#x3D;&quot;showMessage&quot; type&#x3D;&quot;primary&quot;&gt;主要按钮&lt;&#x2F;el-button&gt;    &lt;&#x2F;router-link&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加模板 &#x2F;views&#x2F;User.vue 模板</p><p><br>和上面一下，在router&#x2F;index.js中配置&#x2F;user的路由</p><pre class="line-numbers language-none"><code class="language-none">&#123;    path: &#39;&#x2F;user&#39;,    name: &#39;User&#39;,&#x2F;&#x2F;方便函数式编程使用，可以不要    component: () &#x3D;&gt; import(&#39;..&#x2F;views&#x2F;User.vue&#39;) &#x2F;&#x2F; 这个动态导入会返回一个 &#96;Promise&#96; 对象。&#125;,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>跳转后App.vue中的router-view会自动切换component</p><h2 id="4-使用elementUI进行首页布局"><a href="#4-使用elementUI进行首页布局" class="headerlink" title="4. 使用elementUI进行首页布局"></a>4. 使用elementUI进行首页布局</h2><p>安装less-loader</p><pre class="line-numbers language-none"><code class="language-none">cnpm i less-loader@6.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-1-使用布局容器"><a href="#4-1-使用布局容器" class="headerlink" title="4.1 使用布局容器"></a>4.1 使用布局容器</h2><pre class="line-numbers language-none"><code class="language-none">&lt;el-container&gt;  &lt;el-aside width&#x3D;&quot;auto&quot;&gt;Aside&lt;&#x2F;el-aside&gt;  &lt;el-container&gt;    &lt;el-header&gt;Header&lt;&#x2F;el-header&gt;    &lt;el-main&gt;Main&lt;&#x2F;el-main&gt;  &lt;&#x2F;el-container&gt;&lt;&#x2F;el-container&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-封装侧边栏布局-Aside部分"><a href="#4-2-封装侧边栏布局-Aside部分" class="headerlink" title="4.2 封装侧边栏布局(Aside部分)"></a>4.2 封装侧边栏布局(Aside部分)</h3><ol><li>复制element上的代码，封装到components<pre class="line-numbers language-none"><code class="language-none">&lt;el-menu default-active&#x3D;&quot;1-4-1&quot; class&#x3D;&quot;el-menu-vertical-demo&quot; @open&#x3D;&quot;handleOpen&quot; @close&#x3D;&quot;handleClose&quot; :collapse&#x3D;&quot;isCollapse&quot;&gt;  &lt;el-submenu index&#x3D;&quot;1&quot;&gt;    &lt;template slot&#x3D;&quot;title&quot;&gt;      &lt;i class&#x3D;&quot;el-icon-location&quot;&gt;&lt;&#x2F;i&gt;      &lt;span slot&#x3D;&quot;title&quot;&gt;导航一&lt;&#x2F;span&gt;    &lt;&#x2F;template&gt;    &lt;el-menu-item-group&gt;      &lt;span slot&#x3D;&quot;title&quot;&gt;分组一&lt;&#x2F;span&gt;      &lt;el-menu-item index&#x3D;&quot;1-1&quot;&gt;选项1&lt;&#x2F;el-menu-item&gt;      &lt;el-menu-item index&#x3D;&quot;1-2&quot;&gt;选项2&lt;&#x2F;el-menu-item&gt;    &lt;&#x2F;el-menu-item-group&gt;    &lt;el-menu-item-group title&#x3D;&quot;分组2&quot;&gt;      &lt;el-menu-item index&#x3D;&quot;1-3&quot;&gt;选项3&lt;&#x2F;el-menu-item&gt;    &lt;&#x2F;el-menu-item-group&gt;    &lt;el-submenu index&#x3D;&quot;1-4&quot;&gt;      &lt;span slot&#x3D;&quot;title&quot;&gt;选项4&lt;&#x2F;span&gt;      &lt;el-menu-item index&#x3D;&quot;1-4-1&quot;&gt;选项1&lt;&#x2F;el-menu-item&gt;    &lt;&#x2F;el-submenu&gt;  &lt;&#x2F;el-submenu&gt;  &lt;el-menu-item index&#x3D;&quot;2&quot;&gt;    &lt;i class&#x3D;&quot;el-icon-menu&quot;&gt;&lt;&#x2F;i&gt;    &lt;span slot&#x3D;&quot;title&quot;&gt;导航二&lt;&#x2F;span&gt;  &lt;&#x2F;el-menu-item&gt;  &lt;el-menu-item index&#x3D;&quot;3&quot; disabled&gt;    &lt;i class&#x3D;&quot;el-icon-document&quot;&gt;&lt;&#x2F;i&gt;    &lt;span slot&#x3D;&quot;title&quot;&gt;导航三&lt;&#x2F;span&gt;  &lt;&#x2F;el-menu-item&gt;  &lt;el-menu-item index&#x3D;&quot;4&quot;&gt;    &lt;i class&#x3D;&quot;el-icon-setting&quot;&gt;&lt;&#x2F;i&gt;    &lt;span slot&#x3D;&quot;title&quot;&gt;导航四&lt;&#x2F;span&gt;  &lt;&#x2F;el-menu-item&gt;&lt;&#x2F;el-menu&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>样式也要<pre class="line-numbers language-none"><code class="language-none">&lt;style&gt;  .el-menu-vertical-demo:not(.el-menu--collapse) &#123;    width: 200px;    min-height: 400px;  &#125;&lt;&#x2F;style&gt;&lt;script&gt;  export default &#123;    data() &#123;      return &#123;        isCollapse: true      &#125;;    &#125;,    methods: &#123;      handleOpen(key, keyPath) &#123;        console.log(key, keyPath);      &#125;,      handleClose(key, keyPath) &#123;        console.log(key, keyPath);      &#125;    &#125;  &#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>在home中调用<pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;el-container&gt;    &lt;el-aside width&#x3D;&quot;auto&quot;&gt;      &lt;common-aside&gt;&lt;&#x2F;common-aside&gt;      &lt;!-- 小写-写法遵循vue规范 --&gt;    &lt;&#x2F;el-aside&gt;    &lt;el-container&gt;      &lt;el-header&gt;Header&lt;&#x2F;el-header&gt;      &lt;el-main&gt;Main&lt;&#x2F;el-main&gt;    &lt;&#x2F;el-container&gt;  &lt;&#x2F;el-container&gt;&lt;&#x2F;template&gt;&lt;script&gt;import CommonAside from &quot;..&#x2F;components&#x2F;CommonAside.vue&quot;;export default &#123;  name: &quot;IndexHome&quot;, &#x2F;&#x2F;eslint代码规范检查  components: &#123;    CommonAside,  &#125;,  data() &#123;    return &#123;&#125;;  &#125;,&#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>4.还需要在main.js对每个组件进行引入<pre class="line-numbers language-none"><code class="language-none">import &#123; Button, Checkbox, Container, Header, Main, Menu, Submenu, MenuItem, MenuItemGroup &#125; from &#39;element-ui&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>同时Vue.use它们</li></ol><h3 id="4-3-侧边栏数据完善1"><a href="#4-3-侧边栏数据完善1" class="headerlink" title="4.3 侧边栏数据完善1"></a>4.3 侧边栏数据完善1</h3><p>按照UI图对原有element组件机型调整，主要有以下步骤：</p><ol><li><p>设置侧边栏常展开</p></li><li><p>根据UI的实际应用，删除导航三和四 保留导航一和二 ，并且顺序变为导航二、一</p></li><li><p>data定义导航栏数据menu</p></li><li><p>进行渲染准备 使用computed</p></li><li><p>computed  filter出noChildren() hasChildren</p></li><li><p>渲染noChildren()</p></li></ol><h3 id="4-4-侧边栏数据完善2"><a href="#4-4-侧边栏数据完善2" class="headerlink" title="4.4 侧边栏数据完善2"></a>4.4 侧边栏数据完善2</h3><ol><li><p>在导航栏顶部添加标题<h3></p></li><li><p>渲染hasChildren的一级和二级</p></li></ol><h3 id="4-5-侧边栏样式完善"><a href="#4-5-侧边栏样式完善" class="headerlink" title="4.5 侧边栏样式完善"></a>4.5 侧边栏样式完善</h3><p>对于组件的样式,组件有属性方法使用属性方法，没有属性方法的自定义。</p><h3 id="4-6-配置路由"><a href="#4-6-配置路由" class="headerlink" title="4.6 配置路由"></a>4.6 配置路由</h3><ol><li>在侧边栏组件页面下使用this.$router.push({name:’’})跳转路由（之前在index.js为路由配置了name属性，函数式编程）</li><li>在没有配置路由的在index.js补充,new routes({})children属性可以配置子路由，这样子路由path无需写前缀<pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;el-menu    background-color&#x3D;&quot;#545c64&quot;    text-color&#x3D;&quot;#fff&quot;    active-text-color&#x3D;&quot;#FDCC4B&quot;    default-active&#x3D;&quot;&#x2F;page1&quot;    class&#x3D;&quot;el-menu-vertical-demo&quot;    @open&#x3D;&quot;handleOpen&quot;    @close&#x3D;&quot;handleClose&quot;    :collapse&#x3D;&quot;isCollapse&quot;    :default-openeds&#x3D;&quot;[&#39;&#x2F;other&#39;]&quot;  &gt;    &lt;h3&gt;通用后台管理系统&lt;&#x2F;h3&gt;    &lt;el-menu-item      v-for&#x3D;&quot;value in noChildren&quot;      :key&#x3D;&quot;value.name&quot;      :index&#x3D;&quot;value.path&quot;      @click&#x3D;&quot;clickMenu(value)&quot;    &gt;      &lt;i :class&#x3D;&quot;&#96;el-icon-$&#123;value.icon&#125;&#96;&quot;&gt;&lt;&#x2F;i&gt;      &lt;span slot&#x3D;&quot;title&quot;&gt;&#123;&#123; value.label &#125;&#125;&lt;&#x2F;span&gt;    &lt;&#x2F;el-menu-item&gt;    &lt;el-submenu      v-for&#x3D;&quot;value in hasChildren&quot;      :key&#x3D;&quot;value.path&quot;      :index&#x3D;&quot;value.path&quot;    &gt;      &lt;template slot&#x3D;&quot;title&quot;&gt;        &lt;i :class&#x3D;&quot;&#96;el-icon-$&#123;value.icon&#125;&#96;&quot;&gt;&lt;&#x2F;i&gt;        &lt;span slot&#x3D;&quot;title&quot;&gt;&#123;&#123; value.label &#125;&#125;&lt;&#x2F;span&gt;      &lt;&#x2F;template&gt;      &lt;el-menu-item-group        v-for&#x3D;&quot;item in value.children&quot;        :key&#x3D;&quot;item.path&quot;        :index&#x3D;&quot;item.path&quot;        @click&#x3D;&quot;clickMenu(value)&quot;      &gt;        &lt;el-menu-item :index&#x3D;&quot;item.path&quot;&gt;&#123;&#123; item.label &#125;&#125;&lt;&#x2F;el-menu-item&gt;      &lt;&#x2F;el-menu-item-group&gt;    &lt;&#x2F;el-submenu&gt;  &lt;&#x2F;el-menu&gt;&lt;&#x2F;template&gt;&lt;style  lang&#x3D;&quot;less&quot; scope&gt;.el-menu-vertical-demo:not(.el-menu--collapse) &#123;  width: 200px;  height: 100vh;&#125;.el-menu &#123;  border: none;  h3 &#123;    font-weight: bold;    color: #fff;    text-align: center;    line-height: 48px;  &#125;&#125;&lt;&#x2F;style&gt;&lt;script&gt;export default &#123;  data() &#123;    return &#123;      isCollapse: false,      menu: [        &#123;          path: &quot;&#x2F;&quot;,          name: &quot;home&quot;,          label: &quot;首页&quot;,          icon: &quot;s-home&quot;,          url: &quot;Home&#x2F;Home&quot;,        &#125;,        &#123;          path: &quot;&#x2F;mall&quot;,          name: &quot;mal1&quot;,          label: &quot;商品管理&quot;,          icon: &quot;video-play&quot;,          url: &quot;MallManage&#x2F;MallManage&quot;,        &#125;,        &#123;          path: &quot;&#x2F;user&quot;,          name: &quot;user&quot;,          label: &quot;用户管理&quot;,          icon: &quot;user&quot;,          url: &quot;UserManage&#x2F;UserManage&quot;,        &#125;,        &#123;          label: &quot;其他&quot;,          icon: &quot;location&quot;,          path: &quot;&#x2F;other&quot;,          children: [            &#123;              path: &quot;&#x2F;page1&quot;,              name: &quot;page1&quot;,              label: &quot;页面1&quot;,              icon: &quot;setting&quot;,              url: &quot;Other&#x2F;Pageone&quot;,            &#125;,            &#123;              path: &quot;&#x2F;page2&quot;,              name: &quot;page2 &quot;,              label: &quot;页面2&quot;,              icon: &quot;setting&quot;,              url: &quot;Other&#x2F;PageTwo&quot;,            &#125;,          ],        &#125;,      ],    &#125;;  &#125;,  computed: &#123;    noChildren() &#123;      return this.menu.filter((item) &#x3D;&gt; !item.children);    &#125;,    hasChildren() &#123;      return this.menu.filter((item) &#x3D;&gt; item.children);    &#125;,  &#125;,  methods: &#123;    clickMenu(item) &#123;      console.log(this);      &#x2F;&#x2F;函数式编程      this.$router.push(&#123;        name: item.name,      &#125;);    &#125;,    handleOpen(key, keyPath) &#123;      console.log(key, keyPath);    &#125;,    handleClose(key, keyPath) &#123;      console.log(key, keyPath);    &#125;,  &#125;,&#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="4-3-编写header样式"><a href="#4-3-编写header样式" class="headerlink" title="4.3 编写header样式"></a>4.3 编写header样式</h2><h2 id="4-4-兄弟组件通讯"><a href="#4-4-兄弟组件通讯" class="headerlink" title="4.4 兄弟组件通讯"></a>4.4 兄弟组件通讯</h2><p>commonheader 操作 commonaside</p><h3 id="4-4-1-使用vuex"><a href="#4-4-1-使用vuex" class="headerlink" title="4.4.1 使用vuex"></a>4.4.1 使用vuex</h3><p>vue2指定vuex3版本</p><pre class="line-numbers language-none"><code class="language-none">cnpm i vuex@3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1.安装好后创建store文件夹<br>2.store创建index.js和tab.js<br>3.在tab.js定义状态和状态的监视，export default 暴露<br>4.index.js引入tab.js和vue、vuex，export default 暴露<br>5.main.js引入<br>6.computed 调用状态 this.$store.state.tab.isCollapse;<br>7.改变状态 this.$store.commit(“collapseMenu”);</p><h2 id="4-5-axios的使用"><a href="#4-5-axios的使用" class="headerlink" title="4.5 axios的使用"></a>4.5 axios的使用</h2><pre class="line-numbers language-none"><code class="language-none">cnpm i axios<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可自定义封装<br>引入axios，由于不是插件不能use只能挂载到原型<br>Vue.prototype.$axios &#x3D; axios;</p><p>方法写在mouted，是已挂载，使用阶段的生命周期函数</p><h2 id="4-6-Echarts的使用"><a href="#4-6-Echarts的使用" class="headerlink" title="4.6 Echarts的使用"></a>4.6 Echarts的使用</h2><ol><li>cnpm下载<pre class="line-numbers language-none"><code class="language-none">cnpm i echarts@5.1.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>导入<br>可以在main.js导入后挂载在vue原型上，也可以在vue页面的script标签内进入单页导入</li></ol><p>[具体配置]<a href="https://echarts.apache.org/zh/api.html#echarts">https://echarts.apache.org/zh/api.html#echarts</a></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运算符与运算符优先级</title>
      <link href="/2021/06/27/note/js-gai-nian-yun-suan-fu-yu-yun-suan-fu-you-xian-ji/"/>
      <url>/2021/06/27/note/js-gai-nian-yun-suan-fu-yu-yun-suan-fu-you-xian-ji/</url>
      
        <content type="html"><![CDATA[<p>javascript中的运算符有：<br>赋值运算符（Assignment operators）:&#x3D;、+&#x3D; 等<br>比较运算符（Comparison operators）：&#x3D;&#x3D;&#x3D;、&gt;、&lt;等<br>算数运算符（Arithmetic operators）：+、-、++、–等<br>位运算符（Bitwise operators）：a &amp; b、a &lt;&lt; b<br>逻辑运算符（Logical operators）：&amp;&amp;、||<br>字符串运算符（String operators）：+ <br>条件（三元）运算符（Conditional operator）：“? ：”<br>逗号运算符（Comma operator）：,<br>一元运算符（Unary operators）:delete、void、typeof 和关系的差别就是 只需要一个操作数<br>关系运算符（Relational operator）：in、instanceof。</p><p>经测试,“+” 字符串运算符和算术运算符的优先级是一样的。字符串运算符 大于 比较运算符。</p><p><img src="https://qiniu.guet.link/asset/202209150039273.png"></p><h2 id="1-总体优先级"><a href="#1-总体优先级" class="headerlink" title="1. 总体优先级"></a>1. 总体优先级</h2><p>首先和日常算术一样*&#x2F;大于+-，其次由于运算符过多并且<strong>不能以运算符的类别区分</strong>（如 逻辑! 高于 算术+-）优先级，很多时候复杂的表达式往往无法确定优先级，要使用(),()的优先级是最高的。</p><h3 id="总体优先级如下："><a href="#总体优先级如下：" class="headerlink" title="总体优先级如下："></a>总体优先级如下：</h3><p>一元运算符    delete void typeof</p><p><strong>&gt;</strong> </p><p>算数运算符     + - ++ –</p><p><strong>&gt;</strong> </p><p>位运算符      a &amp; b   a &lt;&lt; b</p><p><strong>&gt;</strong></p><p>比较运算符    &#x3D;&#x3D;&#x3D; &gt; &lt;</p><p><strong>&#x3D;&#x3D;</strong> </p><p>关系运算符    in instanceof</p><p><strong>&gt;</strong> </p><p>逻辑运算符    (&amp;&amp; &gt; ||) </p><p><strong>&gt;</strong> </p><p>条件（三元）运算符    ?:</p><p><strong>&gt;</strong> </p><p>赋值运算符         &#x3D; +&#x3D;</p><p><strong>&gt;</strong> </p><p>逗号运算符            ,</p><p><img src="https://qiniu.guet.link/asset/202209142030533.png" alt="细分"></p><h2 id="2-运算符的优先级（全）"><a href="#2-运算符的优先级（全）" class="headerlink" title="2. 运算符的优先级（全）"></a>2. 运算符的优先级（全）</h2><p>对于运算符的优先级有下表汇总。</p><p><img src="https://qiniu.guet.link/asset/202209141856408.png" alt="汇总"></p><p><img src="https://qiniu.guet.link/asset/202209141856530.png" alt="汇总"></p><p><img src="https://qiniu.guet.link/asset/202209141859825.png" alt="汇总"></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Expressions_and_Operators">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Expressions_and_Operators</a></p><p>0000 1000<br>1111 0111</p><p>1111 1000</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 运算符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>span元素设置padding上下高度不一</title>
      <link href="/2021/06/24/note/html-css-bug-span-yuan-su-she-zhi-padding-shang-xia-gao-du-bu-yi/"/>
      <url>/2021/06/24/note/html-css-bug-span-yuan-su-she-zhi-padding-shang-xia-gao-du-bu-yi/</url>
      
        <content type="html"><![CDATA[<p>问题描述:想使用padding 设置上下留一定空白 得到一个标签样式 结果中文看起来下边的空白要比上班短</p><p>解决：因为inline元素（不带inline的文字也有）本身就有content area 和加上的padding无关 所以本来就没有绝对居中 解决办法是设置成行内块元素 height 和line-height 并且行高要适当调整 </p><p>而且不推荐直接在inline元素设置padding元素，因为inline元素没有宽高属性，padding会挤占别人的宽高 </p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">a</span> <span class="token punctuation">&#123;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 2px 8px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>            <span class="token property">text-decoration</span><span class="token punctuation">:</span> none        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>123gY<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="https-juejin-cn-post-6844903561780789255-heading-4"><a href="#https-juejin-cn-post-6844903561780789255-heading-4" class="headerlink" title="https://juejin.cn/post/6844903561780789255#heading-4"></a><a href="https://juejin.cn/post/6844903561780789255#heading-4">https://juejin.cn/post/6844903561780789255#heading-4</a></h2>]]></content>
      
      
      <categories>
          
          <category> html&amp;css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>props和data的优先级</title>
      <link href="/2021/06/17/note/vue-mian-shi-props-he-data-de-you-xian-ji/"/>
      <url>/2021/06/17/note/vue-mian-shi-props-he-data-de-you-xian-ji/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/vuejs/vue/blob/dev/dist/vue.js">https://github.com/vuejs/vue/blob/dev/dist/vue.js</a> &#x3D;&gt; function initState (vm)</p><p> if (opts.props) { initProps(vm, opts.props); }<br>    if (opts.methods) { initMethods(vm, opts.methods); }<br>    if (opts.data) {</p><pre><code>    props &gt; methods &gt; data &gt; computed &gt; watch</code></pre>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>div和p标签的区别</title>
      <link href="/2021/06/10/note/html-css-div-he-p-biao-qian-de-qu-bie/"/>
      <url>/2021/06/10/note/html-css-div-he-p-biao-qian-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<p>1.mairgin</p><p>p自带有一定margin-top和margin-bottom属性值，<br>div两个属性值为0，也便是两个p之间有不一定间距，而div没有。<br>（因为p代表一个段落）</p><ol start="2"><li>语义不同<br>p代表段落</li></ol>]]></content>
      
      
      <categories>
          
          <category> html&amp;css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端开发方案的选择</title>
      <link href="/2021/06/08/note/html-css-mian-shi-qian-duan-kai-fa-fang-an-de-xuan-ze/"/>
      <url>/2021/06/08/note/html-css-mian-shi-qian-duan-kai-fa-fang-an-de-xuan-ze/</url>
      
        <content type="html"><![CDATA[<h2 id="1-PC的UI设计图"><a href="#1-PC的UI设计图" class="headerlink" title="1. PC的UI设计图"></a>1. PC的UI设计图</h2><p>PC的设计图一般宽为1920px，如果设计图和你的电脑像素不一样，要么切分辨率1920，要么买新电脑，要么讨论设计图的合理性（例如主要内容的宽度一般为1200-1300左右，如果高于这个宽度，那么适配效果不会太好）</p><h2 id="2-移动端的设计图"><a href="#2-移动端的设计图" class="headerlink" title="2. 移动端的设计图"></a>2. 移动端的设计图</h2><p>（1）移动端的UI设计图宽度750px</p><p>（2）750是375的二倍稿，而375是iPhone678的像素宽度，一般情况下的开发以iPhone678为开发基准</p><h2 id="3-手机端使用自适应（PC-移动UI）还是响应式（单个UI）"><a href="#3-手机端使用自适应（PC-移动UI）还是响应式（单个UI）" class="headerlink" title="3. 手机端使用自适应（PC+移动UI）还是响应式（单个UI）"></a>3. 手机端使用自适应（PC+移动UI）还是响应式（单个UI）</h2><p>（1）采用响应式页面结构比较复杂，比较难维护，开发周期不一定有自适应低</p><p>（2）响应式采用@media性能不好</p>]]></content>
      
      
      <categories>
          
          <category> html&amp;css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路由导航守卫有哪些</title>
      <link href="/2021/06/07/note/vue-lu-you-dao-hang-shou-wei-you-na-xie/"/>
      <url>/2021/06/07/note/vue-lu-you-dao-hang-shou-wei-you-na-xie/</url>
      
        <content type="html"><![CDATA[<h2 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h2><p>路由的导航守卫 又叫做路由的钩子函数(生命周期函数) </p><p>其它其它的八个生命周期是Vue实例的生命周期，还有两个是缓存的生命周期</p><h2 id="作用（场景）："><a href="#作用（场景）：" class="headerlink" title="作用（场景）："></a>作用（场景）：</h2><p>在跳转之前页面之处做相应的处理，例如鉴权，登录才能进去</p><h2 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h2><p>有 <strong>全局、单个路由独享、组件级</strong> 三种使用方式</p><p>组件级的导航守卫很少用，不好维护</p><h3 id="1-全局"><a href="#1-全局" class="headerlink" title="1. 全局"></a>1. 全局</h3><h4 id="（1）路由前置守卫"><a href="#（1）路由前置守卫" class="headerlink" title="（1）路由前置守卫"></a>（1）路由前置守卫</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span>from<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//继续执行</span>        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token comment">//跳转到其它页面</span>        router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 或者这么写next('/login')</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://v3.router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%85%A8%E5%B1%80%E5%89%8D%E7%BD%AE%E5%AE%88%E5%8D%AB">点击查看更多《全局前置守卫》</a></p><p>看个实例：</p><p>有这么一个界面</p><p><img src="https://qiniu.guet.link/asset/202211230202595.png"></p><p>我们想控制他们进入界面前的行为，可以这么做：</p><p><img src="https://qiniu.guet.link/asset/202211230210771.png"></p><p>将next设置为了false，代表不允许进到to路由，就会发现原来的内容已经进不去。</p><p><img src="https://qiniu.guet.link/asset/202211230204027.png"></p><h4 id="（2）全局解析守卫"><a href="#（2）全局解析守卫" class="headerlink" title="（2）全局解析守卫"></a>（2）全局解析守卫</h4><p>你可以用 router.beforeResolve 注册一个全局守卫。这和 router.beforeEach 类似，区别是在导航被确认之前，<strong>同时在所有组件内守卫和异步路由组件被解析之后，解析守卫就被调用</strong>。</p><p><a href="https://v3.router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%85%A8%E5%B1%80%E5%89%8D%E7%BD%AE%E5%AE%88%E5%8D%AB">点击查看更多《全局解析守卫》</a></p><h4 id="（3）全局后置钩子"><a href="#（3）全局后置钩子" class="headerlink" title="（3）全局后置钩子"></a>（3）全局后置钩子</h4><p>你也可以注册全局后置钩子，然而和守卫不同的是，这些钩子不会接受 next 函数也不会改变导航本身：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-路由独享"><a href="#2-路由独享" class="headerlink" title="2. 路由独享"></a>2. 路由独享</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/foo'</span><span class="token punctuation">,</span>      <span class="token literal-property property">component</span><span class="token operator">:</span> Foo<span class="token punctuation">,</span>      <span class="token function-variable function">beforeEnter</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// ...</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实例</p><p>有user路由显示的界面如下</p><p><img src="https://qiniu.guet.link/asset/202211230214049.png"></p><p>我们想要单独控制某个路由可以，可以使用组件路由，有如下代码</p><p><img src="https://qiniu.guet.link/asset/202211230217011.png"></p><p>如下发现页面看不到了（这里url已经输入了&#x2F;user，是自己回退到home页面）</p><p><img src="https://qiniu.guet.link/asset/202211230215800.png"></p><h3 id="3-组件内"><a href="#3-组件内" class="headerlink" title="3. 组件内"></a>3. 组件内</h3><p>最后，你可以在路由组件内直接定义以下路由导航守卫：</p><ul><li>beforeRouteEnter</li><li>beforeRouteUpdate (2.2 新增)</li><li>beforeRouteLeave</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> Foo <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">...</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>  <span class="token function">beforeRouteEnter</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 在渲染该组件的对应路由被 confirm 前调用</span>    <span class="token comment">// 不！能！获取组件实例 `this`</span>    <span class="token comment">// 因为当守卫执行前，组件实例还没被创建</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">beforeRouteUpdate</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 在当前路由改变，但是该组件被复用时调用</span>    <span class="token comment">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span>    <span class="token comment">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span>    <span class="token comment">// 可以访问组件实例 `this`</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">beforeRouteLeave</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 导航离开该组件的对应路由时调用</span>    <span class="token comment">// 可以访问组件实例 `this`</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面看两个实例对组件内的路由导航守卫有更清晰的认识：</p><ul><li>beforeRouteEnter实例</li></ul><p>这个直接写代码</p><p><img src="https://qiniu.guet.link/asset/202211230248928.png"></p><p>有如下界面，会发现一样失败，会打回到home （但是呢，这个推荐使用路由级的导航守卫）</p><p><img src="https://qiniu.guet.link/asset/202211230246780.png"></p><ul><li>beforeRouteLeave 实例</li></ul><p>页面如下</p><p><img src="https://qiniu.guet.link/asset/202211230238427.png"></p><p>代码如下</p><p>意思是当data中的属性为true才能马上离开，否则会有一个弹窗确认之后才能离开，cancel不能离开。</p><p><img src="https://qiniu.guet.link/asset/202211230232934.png"></p><p>直接看data属性不为true的情况，发现有弹窗</p><p><img src="https://qiniu.guet.link/asset/202211230240460.png"></p><p>点击cancel回到当前页面</p><p><img src="https://qiniu.guet.link/asset/202211230238427.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>vue一共为我们提供了三种路由守卫</p><p>（1）全局守卫</p><ul><li>beforeEach 路由进入之前</li><li>beforeResolve （即在 beforeEach 和 组件内beforeRouteEnter 之后，afterEach之前调用。）这个几乎不用</li><li>afterEach 路由进入之后</li></ul><p>（2）组件内置守卫</p><ul><li>beforeRouteEnter 路由进入之前</li><li>beforeRouteUpdate 路由更新之前</li><li>beforeRouteLeave 路由离开之前</li></ul><p>（3）路由独享守卫</p><ul><li>beforeEnter 路由进入之前</li></ul><h2 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h2><p>（1） beforEach 和 beforeResolve 的区别</p><p>都是在路由跳转之前执行 但是 beforeEach 是在解析路由规则之前 执行 beforeResolve 是解析之后 路由跳转之前执行 beforeEach 比 beforeResolve 执行的时机更早</p><p>（2） 路由守卫的执行顺序</p><p>全局前置 独享守卫 组件守卫（beforeRouteEnter） 解析守卫 后置守卫</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> vue </tag>
            
            <tag> vue-router </tag>
            
            <tag> 路由导航守卫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6模块化</title>
      <link href="/2021/06/06/note/js-mo-kuai-hua-yuan-sheng-html-dui-mo-kuai-hua-de-shi-yong/"/>
      <url>/2021/06/06/note/js-mo-kuai-hua-yuan-sheng-html-dui-mo-kuai-hua-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> cocktailSort <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./cocktailSort.js'</span><span class="token punctuation">;</span>        <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> bubbleSort <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./bubbleSort.js'</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">'bubbleSort'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">'bubbleSort'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">'cocktailSort'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">cocktailSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">'cocktailSort'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> es6 </tag>
            
            <tag> 模块化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变量定义let、consot、var的示例</title>
      <link href="/2021/06/04/note/js-gai-nian-b-bian-liang-ding-yi-let-consot-var/"/>
      <url>/2021/06/04/note/js-gai-nian-b-bian-liang-ding-yi-let-consot-var/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">.father</span> <span class="token punctuation">&#123;</span>        <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.father .item</span> <span class="token punctuation">&#123;</span>        <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token comment">// //对于没有声明的变量报错</span>        <span class="token comment">// console.log(asdas);//报错</span>        <span class="token comment">//const定义一定要赋值</span>        <span class="token comment">// var a;</span>        <span class="token comment">// let b;</span>        <span class="token comment">// const c = [1, 2, 3];</span>        <span class="token comment">////全局变量</span>        <span class="token comment">//// 例子1 直接定义a='hello';</span>        <span class="token comment">// (function () &#123;</span>        <span class="token comment">//     (function () &#123;</span>        <span class="token comment">//         a = 'hello';</span>        <span class="token comment">//     &#125;)()</span>        <span class="token comment">//     console.log(a);//hello</span>        <span class="token comment">// &#125;)();</span>        <span class="token comment">//     console.log(a);//hello</span>        <span class="token comment">// //如果外面定义了var变量 那么函数内的变量应该是赋值而不是定义 不存在函数内的a变为全局函数</span>        <span class="token comment">// //用严格模式验证</span>        <span class="token comment">// "use strict";</span>        <span class="token comment">// var a = 'hehe';</span>        <span class="token comment">// (function () &#123;</span>        <span class="token comment">//     a = 'hello';</span>        <span class="token comment">//     console.log(a);//不报错</span>        <span class="token comment">// &#125;)();</span>        <span class="token comment">// console.log(a);//不报错</span>        <span class="token comment">// //例子2 在函数外使用var,会变成全局变量,当然你也可以使用window.a</span>        <span class="token comment">// var a = &#123;&#125;;</span>        <span class="token comment">// console.log(a === window.a)//true</span>        <span class="token comment">// //const不能被重新赋值，但是引用对象类型的属性可以</span>        <span class="token comment">// // c = null;报错</span>        <span class="token comment">// c.a = 12;</span>        <span class="token comment">// console.log(c);//[1, 2, 3, a: 12]</span>        <span class="token comment">// // let和const不能重复定义变量</span>        <span class="token comment">// let c = 1;</span>        <span class="token comment">// if (true) &#123;</span>        <span class="token comment">//     c = 2;</span>        <span class="token comment">// &#125;</span>        <span class="token comment">// console.log(c);//1</span>        <span class="token comment">// (function () &#123;</span>        <span class="token comment">//     c = 3;</span>        <span class="token comment">// &#125;)()</span>        <span class="token comment">// console.log(c);//3 这里能访问是作用域链的关系</span>        <span class="token comment">// // let c = 3; //报错</span>        <span class="token comment">// //var存在变量提生,所谓变量提升就是将定义往顶部提，但是没有赋值，值为undefined</span>        <span class="token comment">// console.log(d)//undefined</span>        <span class="token comment">// d = 2;</span>        <span class="token comment">// console.log(d)//2</span>        <span class="token comment">// var d = 1;</span>        <span class="token comment">// console.log(d)//1</span>        <span class="token comment">// //暂时性死区，let和const没有变量提升（使用"use strict";发现实际上编译器已经定义b，但不给予使用）</span>        <span class="token comment">// e = 2;</span>        <span class="token comment">// const e;</span>        <span class="token comment">//特殊定义</span>        <span class="token comment">// var f = 2</span>        <span class="token comment">// var g = f = 88</span>        <span class="token comment">// console.log(f)//88</span>        <span class="token comment">// console.log(g)//88</span>        <span class="token comment">// var f =2;</span>        <span class="token comment">// var g;</span>        <span class="token comment">// g=88;</span>        <span class="token comment">// f=88;</span>        <span class="token comment">// console.log(f)//88</span>        <span class="token comment">// console.log(g)//88</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Blob实现二进制图片下载</title>
      <link href="/2021/06/01/note/qian-duan-shi-li-blob-shi-xian-er-jin-zhi-tu-pian-xia-zai/"/>
      <url>/2021/06/01/note/qian-duan-shi-li-blob-shi-xian-er-jin-zhi-tu-pian-xia-zai/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./js/jquery-1.10.2.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://bpic.588ku.com/element_origin_min_pic/21/03/21/c7ef9d4385008b5bf860567675e0abf5.jpg<span class="token punctuation">"</span></span>        <span class="token attr-name">download</span><span class="token punctuation">></span></span>直接下载<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://qiniu.guet.link/img/c7477a56b9f0b5f294a77013734f1d0c.jpeg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token comment">// 背景：</span>        <span class="token comment">// 我看了一下报文，后端同样要配置响应头access-control-allow-origin: *</span>        <span class="token comment">// 也就是说a标签的download属性不管你后端允许不允许跨域请求，只要你跨域了就会跳转到图片站点</span>        <span class="token comment">// 而xhr需要后端允许跨域访问，拿到二进制数组，在前端映射url，通过download属性声明 完成下载</span>        <span class="token keyword">function</span> <span class="token function">Download</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> <span class="token constant">XHR</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token constant">XHR</span><span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token string">'blob'</span><span class="token punctuation">;</span>            <span class="token comment">//参数说明 https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/responseType</span>            <span class="token constant">XHR</span><span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token constant">XHR</span><span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token keyword">const</span> fileBlob <span class="token operator">=</span> <span class="token constant">XHR</span><span class="token punctuation">.</span>response<span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fileBlob<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//创建url映射内存中的二进制图片</span>                <span class="token keyword">const</span> fileUrl <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>fileBlob<span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fileUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">let</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                element<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">,</span> fileUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>                element<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'download'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                element<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'下载'</span><span class="token punctuation">;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">let</span> elementImg <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                elementImg<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">,</span> fileUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>elementImg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token constant">XHR</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//Download('https://bpic.588ku.com/element_origin_min_pic/21/03/21/c7ef9d4385008b5bf860567675e0abf5.jpg');</span>        <span class="token function">Download</span><span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:5500/sample.pdf'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端实例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> 二进制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判断数组的方法</title>
      <link href="/2021/06/01/note/js-mian-shi-p-pan-duan-shu-zu-de-fang-fa/"/>
      <url>/2021/06/01/note/js-mian-shi-p-pan-duan-shu-zu-de-fang-fa/</url>
      
        <content type="html"><![CDATA[<p>判断数组在工作中十分常见，一般掌握前三种写法足以。</p><h2 id="1-Array-prototype-isArray"><a href="#1-Array-prototype-isArray" class="headerlink" title="1. Array.prototype.isArray"></a>1. Array.prototype.isArray</h2><p>使用原型方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-Object-prototype-toString-call"><a href="#2-Object-prototype-toString-call" class="headerlink" title="2. Object.prototype.toString.call"></a>2. Object.prototype.toString.call</h2><p>使用对象原型toString方法，这个方法可以检验所有的类型</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Array]'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'Array'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//同理</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3-instanceof"><a href="#3-instanceof" class="headerlink" title="3. instanceof"></a>3. instanceof</h2><p>instanceof 运算符用于检测某个 实例对象 的原型链上是否出现 某个构造函数prototype原型属性，以此来判断实例。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-isPrototypeOf"><a href="#4-isPrototypeOf" class="headerlink" title="4. isPrototypeOf"></a>4. isPrototypeOf</h2><p>理解为 instanceof 的繁琐版</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//检测Array.prototype是否出现在arr的原型链上</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-constructor"><a href="#5-constructor" class="headerlink" title="5. constructor"></a>5. constructor</h2><p>通过原型链调用构造函数并转为字符串判断是否是数组对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'Array'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-hash路由和history路由的区别</title>
      <link href="/2021/05/30/note/vue-hash-lu-you-he-history-lu-you-de-qu-bie/"/>
      <url>/2021/05/30/note/vue-hash-lu-you-he-history-lu-you-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<p>单页应用是在移动互联时代诞生的，它的目标是不刷新整体页面，通过地址栏中的变化来决定内容区域显示什么内容。</p><p>要达成这个目标，我们要用到前端路由技术，具体来说有两种方式来实现：hash模式和history模式。</p><p>hash模式是通过监听hashChange事件来实现的，history模式是通过pushState方法加popstate事件来实现的。</p><p><a href="https://blog.csdn.net/weixin_62930485/article/details/123491635">https://blog.csdn.net/weixin_62930485/article/details/123491635</a></p><p><a href="https://juejin.cn/post/7086275132842311687">https://juejin.cn/post/7086275132842311687</a></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> vue </tag>
            
            <tag> vue-router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>url和uri的区别于联系</title>
      <link href="/2021/05/26/note/qian-duan-wang-luo-url-he-uri-de-qu-bie-yu-lian-xi/"/>
      <url>/2021/05/26/note/qian-duan-wang-luo-url-he-uri-de-qu-bie-yu-lian-xi/</url>
      
        <content type="html"><![CDATA[<p>URL 和 URI 的区别</p><p>URL:Uniform Resource Locator 统一资源定位符；<br>URI: Uniform Resource Identifier 统一资源标识符；</p><p>其实一直有个误解，很多人以为URI是URL的子集，其实应该反过来。URL是URI的子集才对。简单解释下。假设”小白”(URI)是一种资源，而”在迪丽亦巴的怀里”表明了一个位置。如果你想要找到（locate）小白，那么你可以到”在迪丽亦巴怀里”找到小白，而”在迪丽亦巴怀里的&#x2F;小白”才是我们常说的URL。而”在迪丽亦巴怀里的&#x2F;小白”（URL）显然是”小白”（URI）的子集，毕竟，”小白”还可能是”在牛亦菲怀里的&#x2F;小白”（其他URL）。</p>]]></content>
      
      
      <categories>
          
          <category> 前端网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> url </tag>
            
            <tag> uri </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-CDN复用组件</title>
      <link href="/2021/05/24/note/vue-cdn-fu-yong-zu-jian/"/>
      <url>/2021/05/24/note/vue-cdn-fu-yong-zu-jian/</url>
      
        <content type="html"><![CDATA[<p>a.js</p><p>function Test() {<br>return {<br>template: ‘&lt;div @click&#x3D;”handle”&gt;</div>‘,<br>data: function () {<br>return {<br>data: 1<br>};<br>},<br>methods: {<br>handle(){<br>this.data+&#x3D;5;<br>}<br>}<br>}<br>}</p><p>index.html</p><div id="app"><Child></Child></div><script>// 注册var Child = Test();Vue.component('course-sort', Test())// 创建根实例new Vue({el: '#app',components: {Child}})</script>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this、apply、call、bind关键字</title>
      <link href="/2021/05/20/note/js-gai-nian-this-apply-call-bind-guan-jian-zi/"/>
      <url>/2021/05/20/note/js-gai-nian-this-apply-call-bind-guan-jian-zi/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">a</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token function-variable function">b</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">function</span> <span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>            <span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>obj<span class="token punctuation">.</span>a<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// obj.a  obj.a  window</span>        <span class="token comment">//this指向</span>        <span class="token comment">//第一、this 永远指向最后调用它的那个对象</span>        <span class="token comment">// //函数</span>        <span class="token comment">// var name = "windowsName";</span>        <span class="token comment">// function a() &#123;</span>        <span class="token comment">//     var name = "Cherry";</span>        <span class="token comment">//     console.log(this.name);          // windowsName</span>        <span class="token comment">//     console.log("inner:" + this);    // inner: Window</span>        <span class="token comment">// &#125;</span>        <span class="token comment">// a();</span>        <span class="token comment">// console.log("outer:" + this)         // outer: Window</span>        <span class="token comment">// //对象1</span>        <span class="token comment">// var name = "windowsName";</span>        <span class="token comment">// var a = &#123;</span>        <span class="token comment">//     name: "Cherry",</span>        <span class="token comment">//     fn: function () &#123;</span>        <span class="token comment">//         console.log(this.name);      // Cherry</span>        <span class="token comment">//     &#125;</span>        <span class="token comment">// &#125;</span>        <span class="token comment">// a.fn();</span>        <span class="token comment">// //对象2</span>        <span class="token comment">// var name = "windowsName";</span>        <span class="token comment">// var a = &#123;</span>        <span class="token comment">//     name: null,</span>        <span class="token comment">//     fn: function () &#123;</span>        <span class="token comment">//         console.log(this.name);      // windowsName</span>        <span class="token comment">//     &#125;</span>        <span class="token comment">// &#125;</span>        <span class="token comment">////对象3</span>        <span class="token comment">// var name = "windowsName";</span>        <span class="token comment">// var a = &#123;</span>        <span class="token comment">//     // name: "Cherry",</span>        <span class="token comment">//     fn: function () &#123;</span>        <span class="token comment">//         console.log(this.name);      // undefined</span>        <span class="token comment">//     &#125;</span>        <span class="token comment">// &#125;</span>        <span class="token comment">// window.a.fn();</span>        <span class="token comment">// //对象函数赋值新变量</span>        <span class="token comment">// //虽然赋值了却没有被a变量调用，而是被f调用</span>        <span class="token comment">// var name = "windowsName";</span>        <span class="token comment">// var a = &#123;</span>        <span class="token comment">//     name: null,</span>        <span class="token comment">//     fn: function () &#123;</span>        <span class="token comment">//         console.log(this.name);      // windowsName</span>        <span class="token comment">//     &#125;</span>        <span class="token comment">// &#125;</span>        <span class="token comment">// var f = a.fn;</span>        <span class="token comment">// f();</span>        <span class="token comment">//嵌套函数</span>        <span class="token comment">// // 红宝书里有句原话：</span>        <span class="token comment">// // 每个函数在被调用时都会自动创建2个特殊变量：</span>        <span class="token comment">// // this和arguments。</span>        <span class="token comment">// // 内部函数永远不可能直接访问外部函数的这两个变量。</span>        <span class="token comment">// var name = "windowsName";</span>        <span class="token comment">// function fn() &#123;</span>        <span class="token comment">//     var name = 'Cherry';</span>        <span class="token comment">//     var innerFunction = function () &#123;</span>        <span class="token comment">//         console.log(this.name);//windowsName</span>        <span class="token comment">//     &#125;</span>        <span class="token comment">//     innerFunction();</span>        <span class="token comment">// &#125;</span>        <span class="token comment">// fn()</span>        <span class="token comment">// //调用是window.fn() 不是window.fn.innerFunction();</span>        <span class="token comment">// //这里才是被函数里的对象调用</span>        <span class="token comment">// function fn() &#123;</span>        <span class="token comment">//     var q = &#123;</span>        <span class="token comment">//         c: function () &#123;</span>        <span class="token comment">//             console.log(this);</span>        <span class="token comment">//         &#125;</span>        <span class="token comment">//     &#125;</span>        <span class="token comment">//     q.c();</span>        <span class="token comment">// &#125;</span>        <span class="token comment">// fn()</span>        <span class="token comment">/**         * 由以上五个例子我们可以看出，this 的指向并不是在创建的时候就可以确定的，在 es5 中，         * 永远是this 永远指向最后调用它的那个对象。         * */</span>        <span class="token comment">//第二、</span>        <span class="token comment">//使用 ES6 的箭头函数</span>        <span class="token comment">//在函数内部使用 _this = this</span>        <span class="token comment">//使用 apply、call、bind</span>        <span class="token comment">//new 实例化一个对象</span>        <span class="token comment">// //异步函数settimrout</span>        <span class="token comment">// //最后调用 setTimeout 的对象是 window，但是在 window 中并没有 func1 函数。</span>        <span class="token comment">// var name = "windowsName";</span>        <span class="token comment">// var a = &#123;</span>        <span class="token comment">//     name: "Cherry",</span>        <span class="token comment">//     func1: function () &#123;</span>        <span class="token comment">//         console.log(this.name)</span>        <span class="token comment">//     &#125;,</span>        <span class="token comment">//     func2: function () &#123;</span>        <span class="token comment">//         setTimeout(function () &#123;</span>        <span class="token comment">//             this.func1()</span>        <span class="token comment">//         &#125;, 100);</span>        <span class="token comment">//     &#125;</span>        <span class="token comment">// &#125;;</span>        <span class="token comment">// a.func2()     // this.func1 is not a function</span>        <span class="token comment">// 众所周知，ES6 的箭头函数是可以避免 ES5 中使用 this 的坑的。</span>        <span class="token comment">// 箭头函数的 this 始终指向函数定义时的 this，而非执行时。</span>        <span class="token comment">// 箭头函数需要记着这句话：“箭头函数中没有 this 绑定，必须通过查找作用域链来决定其值，</span>        <span class="token comment">// 如果箭头函数被非箭头函数包含，则 this 绑定的是最近一层非箭头函数的 this，否则，this 为 undefined”。</span>        <span class="token comment">// 箭头函数的应用</span>        <span class="token comment">// var name = "windowsName";</span>        <span class="token comment">// var a = &#123;</span>        <span class="token comment">//     name: "Cherry",</span>        <span class="token comment">//     func1: function () &#123;</span>        <span class="token comment">//         console.log(this.name)</span>        <span class="token comment">//     &#125;,</span>        <span class="token comment">//     func2: function () &#123;</span>        <span class="token comment">//         setTimeout(() => &#123;</span>        <span class="token comment">//             this.func1()</span>        <span class="token comment">//         &#125;, 100);</span>        <span class="token comment">//     &#125;</span>        <span class="token comment">// &#125;;</span>        <span class="token comment">// a.func2()     // Cherry</span>        <span class="token comment">// //第三、</span>        <span class="token comment">// //定义_this</span>        <span class="token comment">// var name = "windowsName";</span>        <span class="token comment">// var a = &#123;</span>        <span class="token comment">//     name: "Cherry",</span>        <span class="token comment">//     func1: function () &#123;</span>        <span class="token comment">//         console.log(this.name)</span>        <span class="token comment">//     &#125;,</span>        <span class="token comment">//     func2: function () &#123;</span>        <span class="token comment">//         let _this = this;</span>        <span class="token comment">//         setTimeout(function () &#123;</span>        <span class="token comment">//             _this.func1()</span>        <span class="token comment">//         &#125;, 100);</span>        <span class="token comment">//     &#125;</span>        <span class="token comment">// &#125;;</span>        <span class="token comment">// a.func2()       // Cherry</span>        <span class="token comment">// //第四、使用apply</span>        <span class="token comment">// var a = &#123;</span>        <span class="token comment">//     name: "Cherry",</span>        <span class="token comment">//     zhenshi: 'zxc',</span>        <span class="token comment">//     func1: function () &#123;</span>        <span class="token comment">//         console.log(this.name)</span>        <span class="token comment">//     &#125;,</span>        <span class="token comment">//     func2: function () &#123;</span>        <span class="token comment">//         //①基本使用</span>        <span class="token comment">//         setTimeout(function () &#123;</span>        <span class="token comment">//             console.log(this);//指向a</span>        <span class="token comment">//         &#125;.apply(a), 100);</span>        <span class="token comment">//         //②传参</span>        <span class="token comment">//         setTimeout(function (name, age) &#123;</span>        <span class="token comment">//             console.log(this);//指向a</span>        <span class="token comment">//             console.log(name);//周贵宏</span>        <span class="token comment">//             console.log(age)//18</span>        <span class="token comment">//         &#125;.apply(a, ['周贵宏', 18]), 100);</span>        <span class="token comment">//         // 原始值（数字，字符串，布尔值）的 this 会指向该原始值的自动包装对象</span>        <span class="token comment">//         setTimeout(function () &#123;</span>        <span class="token comment">//             console.log(this);//指向该原始值number自动包装对象</span>        <span class="token comment">//         &#125;.apply(numberc), 100);</span>        <span class="token comment">//         // null 或 undefined 时会自动指向全局对象window</span>        <span class="token comment">//         setTimeout(function () &#123;</span>        <span class="token comment">//             console.log(this);//指向该原始值number自动包装对象</span>        <span class="token comment">//         &#125;.apply(nulla), 100);</span>        <span class="token comment">//     &#125;</span>        <span class="token comment">// &#125;;</span>        <span class="token comment">// var numberc = 2;</span>        <span class="token comment">// var nulla = null;</span>        <span class="token comment">// a.func2();// Cherry</span>        <span class="token comment">// //第五、使用 call</span>        <span class="token comment">// var a = &#123;</span>        <span class="token comment">//     name: "Cherry",</span>        <span class="token comment">//     func1: function () &#123;</span>        <span class="token comment">//         console.log(this.name)</span>        <span class="token comment">//     &#125;,</span>        <span class="token comment">//     //基本使用</span>        <span class="token comment">//     func2: function () &#123;</span>        <span class="token comment">//         setTimeout(function () &#123;</span>        <span class="token comment">//             this.func1()</span>        <span class="token comment">//         &#125;.call(a), 100);</span>        <span class="token comment">//     &#125;</span>        <span class="token comment">//     //传参</span>        <span class="token comment">//     func2: function () &#123;</span>        <span class="token comment">//         setTimeout(function (name, age) &#123;</span>        <span class="token comment">//             this.func1()</span>        <span class="token comment">//             console.log(name)</span>        <span class="token comment">//             console.log(age)</span>        <span class="token comment">//         &#125;.call(a, '周先生', 18), 100);</span>        <span class="token comment">//     &#125;</span>        <span class="token comment">// &#125;;</span>        <span class="token comment">// a.func2();// Cherry</span>        <span class="token comment">//第六、使用 bind</span>        <span class="token comment">// bind() 方法创建一个新的函数，在 bind() 被调用时，</span>        <span class="token comment">// 这个新函数的 this 被指定为 bind() 的第一个参数，</span>        <span class="token comment">// 而其余参数将作为新函数的参数，供调用时使用。</span>        <span class="token comment">// var a = &#123;</span>        <span class="token comment">//     name: "Cherry",</span>        <span class="token comment">//     func1: function () &#123;</span>        <span class="token comment">//         return &#123;</span>        <span class="token comment">//             c: 22,</span>        <span class="token comment">//         &#125;</span>        <span class="token comment">//     &#125;,</span>        <span class="token comment">// //基本使用</span>        <span class="token comment">// func2: function () &#123;</span>        <span class="token comment">//     setTimeout(function () &#123;</span>        <span class="token comment">//         console.log(this.c)</span>        <span class="token comment">//     &#125;.bind(a.func1()), 100);</span>        <span class="token comment">// &#125;</span>        <span class="token comment">// //传参</span>        <span class="token comment">// func2: function () &#123;</span>        <span class="token comment">//     setTimeout(function (name, age) &#123;</span>        <span class="token comment">//         console.log(this.c)</span>        <span class="token comment">//         console.log(name);</span>        <span class="token comment">//         console.log(age);</span>        <span class="token comment">//     &#125;.bind(a.func1(), '周贵宏', 18), 100);</span>        <span class="token comment">// &#125;</span>        <span class="token comment">//正常情况bind要加()调用,现在存在settimeout可不用</span>        <span class="token comment">// &#125;.bind(a.func1())(), 100);</span>        <span class="token comment">// &#125;;</span>        <span class="token comment">// a.func2()            // Cherry</span>        <span class="token comment">// var a = &#123;</span>        <span class="token comment">//     name: "Cherry",</span>        <span class="token comment">//     fn: function (a, b) &#123;</span>        <span class="token comment">//         console.log(a + b)</span>        <span class="token comment">//     &#125;</span>        <span class="token comment">// &#125;</span>        <span class="token comment">// var b = a.fn;</span>        <span class="token comment">// //需要调用</span>        <span class="token comment">// b.bind(a, 1, 2)()         // 3</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://juejin.cn/post/6844903496253177863#heading-11">https://juejin.cn/post/6844903496253177863#heading-11</a></p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>防抖&amp;节流</title>
      <link href="/2021/05/20/note/js-mian-shi-f-fang-dou-jie-liu/"/>
      <url>/2021/05/20/note/js-mian-shi-f-fang-dou-jie-liu/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token comment">//https://www.jianshu.com/p/c8b86b09daf0</span>        <span class="token comment">// 目的：尽量在用户输入完之后，才发送一次http请求，减少服务器压力</span>        <span class="token comment">// 1.每次输入使用定时器延迟发送请求</span>        <span class="token comment">// 2.使用闭包保存定时器id，每次输入，如果旧定时器没有执行就清除旧定时器,设置新的定时器</span>        <span class="token comment">// 3.那么当用户不输入一段delay时间时就可以只发送一次请求。</span>        <span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token comment">//返回一个闭包函数 </span>            <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//e事件对象 之所可以接收e</span>                <span class="token comment">//判断当前输入是否有定时器</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//有计时器,那么阻止之前的计时器执行</span>                    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'清除之前的定时器'</span><span class="token punctuation">,</span> timer<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">//保存settimeout</span>                <span class="token comment">//使用箭头函数，将this指向由window对象变为input节点对象</span>                timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//因为在settimeout的函数体内所以使用call可以立刻执行，当然也可以用bind，但是要手动执行</span>                    <span class="token comment">//call和apply的传参不一样 这里e是一个对象，且fn只结束欧一个参数使用call。当然也可以使用argument类数组对象</span>                    <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//首先fn是由window调用的，如果不使用箭头函数的this是无法指向input节点对象，</span>                    <span class="token comment">//这里的this由闭包函数给予，同时闭包函数被input节点的事件监听调用</span>                    <span class="token comment">//正常执行了，清除保存的定时器ID</span>                    timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">let</span> inputNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#search'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        inputNode<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// console.log(this === inputNode);//判断是否已经指向了节点 true</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">发送</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">到请求</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//访问element的构造函数的原型属性value</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">用户最后输入的字符为</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>event<span class="token punctuation">.</span>data<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// console.log(event);</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> 闭包 </tag>
            
            <tag> 优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>new一个函数的过程</title>
      <link href="/2021/05/18/note/js-gai-nian-h-han-shu-new-yi-ge-han-shu-de-guo-cheng/"/>
      <url>/2021/05/18/note/js-gai-nian-h-han-shu-new-yi-ge-han-shu-de-guo-cheng/</url>
      
        <content type="html"><![CDATA[<p>new一个函数主要分为四步，如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//注意点：</span><span class="token comment">//构造函数一般不需要return。</span><span class="token comment">//如果return了，并且是引用类型，那么将使用其return值，这时不会存在原型链继承。 </span><span class="token comment">/** * @description: person构造函数 * @return &#123;*&#125; */</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//设置原型方法</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">说我今年</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">岁了</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//模拟new定义</span><span class="token keyword">function</span> <span class="token function">newFn</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> newObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//1. 设置新对象</span>    newObj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> fn<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span><span class="token comment">//2. 设置原型链 让新对象继承构造函数</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>newObj<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3. 将this绑定新对象并执行构造函数，保存其结果（构造函数一般没有结果）</span>    <span class="token keyword">return</span> <span class="token keyword">typeof</span> result <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">?</span> result <span class="token operator">:</span> newObj<span class="token punctuation">;</span><span class="token comment">//4. 判断执行结果是否为 object，为object返回执行结果，不为返回新对象</span><span class="token punctuation">&#125;</span><span class="token comment">//new调用</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token function">newFn</span><span class="token punctuation">(</span>Person<span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> 构造函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-中的$属性</title>
      <link href="/2021/05/12/note/vue-zhong-de/"/>
      <url>/2021/05/12/note/vue-zhong-de/</url>
      
        <content type="html"><![CDATA[<p>this.$data &#x2F;&#x2F;存放响应式数据</p><p> this.$watch watch监听的实例方法，是不一样的监听写法</p><p> this.$emit   &#x2F;&#x2F;触发事件</p><p> this.$on   &#x2F;&#x2F;监听事件</p><p> this.$el    &#x2F;&#x2F;与document.getElementById(‘ID名’)是严格等于的。其他属性以此类推</p><p> this.$set  &#x2F;&#x2F;vue2 设置响应式数据 和Vue.set 除了是挂载在原型链上都一致</p><p> this.$options &#x2F;&#x2F;记录设置初始化的属性</p><p> this.$nextTick(()&#x3D;&gt;{</p><p> })</p><p> this.$refs </p><p> &#x2F;&#x2F;ref 被用来给元素或子组件注册引用信息。引用信息将会注册在父组件的 $refs 对象上。如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例：</p><p> <a href="https://blog.csdn.net/weixin_44774062/article/details/120513426">https://blog.csdn.net/weixin_44774062/article/details/120513426</a></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack基本使用.md</title>
      <link href="/2021/05/10/note/qian-duan-gong-cheng-hua-webpack-ji-ben-shi-yong/"/>
      <url>/2021/05/10/note/qian-duan-gong-cheng-hua-webpack-ji-ben-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="1-webpack的简单使用"><a href="#1-webpack的简单使用" class="headerlink" title="1. webpack的简单使用"></a>1. webpack的简单使用</h1><p>一般vue自带webpack，不用手动配置，该文档目的是认识webpack\</p><p>配套实例文件见同名文件夹</p><h2 id="1-1-是什么"><a href="#1-1-是什么" class="headerlink" title="1.1 是什么"></a>1.1 是什么</h2><p>是一个模块化打包工具</p><h2 id="1-2-作用"><a href="#1-2-作用" class="headerlink" title="1.2 作用"></a>1.2 作用</h2><h3 id="1-2-1-打包"><a href="#1-2-1-打包" class="headerlink" title="1.2.1 打包"></a>1.2.1 打包</h3><p>开发中：如jquery.js，空格，回车，注释… <br>使用上线：jquery.min.，js空格，回车，注释 webpack&#x3D;&#x3D;&gt;没有</p><h3 id="1-2-2-模块化"><a href="#1-2-2-模块化" class="headerlink" title="1.2.2 模块化"></a>1.2.2 模块化</h3><p>swiper.js jquery.js zepto.js ajax.js event.js 合并模块</p><h2 id="1-3-整体流程"><a href="#1-3-整体流程" class="headerlink" title="1.3 整体流程"></a>1.3 整体流程</h2><p>开发 &#x3D;&#x3D;》 打包:webpack &#x3D;&#x3D;》上线</p><h2 id="1-4-安装"><a href="#1-4-安装" class="headerlink" title="1.4 安装"></a>1.4 安装</h2><p>cnpm install webpack -g <br>cnpm install webpack-cli -g <br><br>注：cli就是脚手架的意思，建房子时用竹子搭建好架子就是脚手架。自己创建项目时要创建各种目录和环境，脚手架就是做这种东西。</p><h2 id="1-5-简单使用webpack"><a href="#1-5-简单使用webpack" class="headerlink" title="1.5 简单使用webpack"></a>1.5 简单使用webpack</h2><p>webpack本身只能打包js，如果要打包:html、css…需要借助一些东西。使用如下：<br><br>1.进入项目目录，随便创建一个js文件 src&#x2F;index.js<br><br>2.在该目录中下载webpack cnpm install webpack -S<br><br>3.在项目执行webpack命令</p><h2 id="1-6-webpack的web服务"><a href="#1-6-webpack的web服务" class="headerlink" title="1.6 webpack的web服务"></a>1.6 webpack的web服务</h2><p>因为有时候项目不是在根目录，所以不用liveServer<br>下载</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cnpm webpack-dev-server@3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置webpack.config.js</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">module.exports &#x3D; &#123;    entry: &#123;        index: &#39;.&#x2F;src&#x2F;index.js&#39;    &#125;,    output: &#123;        path: __dirname + &quot;&#x2F;public&quot;,        filename: &quot;.&#x2F;js&#x2F;[name].js&quot;    &#125;,    devServer: &#123;        contentBase: &quot;.&#x2F;public&quot;,        inline: true    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>package.json</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"snabbdom"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"webpack-dev-server --open"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"keywords"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span><span class="token punctuation">,</span>  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"snabbdom"</span><span class="token operator">:</span> <span class="token string">"^3.5.1"</span><span class="token punctuation">,</span>    <span class="token property">"webpack"</span><span class="token operator">:</span> <span class="token string">"^5.74.0"</span><span class="token punctuation">,</span>    <span class="token property">"webpack-cli"</span><span class="token operator">:</span> <span class="token string">"^3.3.12"</span><span class="token punctuation">,</span>    <span class="token property">"webpack-dev-server"</span><span class="token operator">:</span> <span class="token string">"^3.11.3"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后就可以使用命令 npm run start启动了</p><h2 id="1-6-webpac-server"><a href="#1-6-webpac-server" class="headerlink" title="1.6 webpac-server"></a>1.6 webpac-server</h2><h1 id="2-webpack的入口和输出"><a href="#2-webpack的入口和输出" class="headerlink" title="2. webpack的入口和输出"></a>2. webpack的入口和输出</h1><h2 id="2-1-安装脚手架webpack-cli"><a href="#2-1-安装脚手架webpack-cli" class="headerlink" title="2.1 安装脚手架webpack-cli"></a>2.1 安装脚手架webpack-cli</h2><p>这里需要webpack和webpack-cli配合<br>cnpm install webpack-cli -S<br><br>这样才能使用一些模块如require(‘path’);</p><h2 id="2-2-创建配置文件"><a href="#2-2-创建配置文件" class="headerlink" title="2.2 创建配置文件"></a>2.2 创建配置文件</h2><p>手动创建webpack.config.js</p><h2 id="2-3-配置入口出口"><a href="#2-3-配置入口出口" class="headerlink" title="2.3 配置入口出口"></a>2.3 配置入口出口</h2><p>官网说明<br><a href="https://webpack.docschina.org/concepts/#output">https://webpack.docschina.org/concepts/#output</a><br><br>模板字符串<br><a href="https://webpack.docschina.org/configuration/output/#template-strings">https://webpack.docschina.org/configuration/output/#template-strings</a></p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">const path &#x3D; require(&#39;path&#39;);module.exports &#x3D; &#123;  entry: &#39;.&#x2F;path&#x2F;to&#x2F;my&#x2F;entry&#x2F;file.js&#39;,  output: &#123;    path: path.resolve(__dirname, &#39;dist&#39;),    filename: &#39;[name].js&#39;,  &#125;,&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-入口的多种配置"><a href="#3-入口的多种配置" class="headerlink" title="3. 入口的多种配置"></a>3. 入口的多种配置</h1><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&#x2F;&#x2F; 1. String ：单入口， 打包成一个chunk,输出一个bundle文件，chunk的名称为默认。        entry:&#39;.&#x2F;src&#x2F;index.js&#39;, &#x2F;&#x2F; 2. Array ： 多入口， 写多个入口，所有入口文件形成一个chunk(名称默认), 输出只有一个bundle, chunk名称默认        entry: [&quot;.&#x2F;src&#x2F;two.js&quot;,&#39;.&#x2F;src&#x2F;index.js&#39;],&#x2F;&#x2F; 3. Object: 多入口， 有几个入口文件就生成几个chunk， 并输出几个bundle文件， chunk的名称是key        entry: &#123;           two: &quot;.&#x2F;src&#x2F;two.js&quot;,            index:&#39;.&#x2F;src&#x2F;index.js&#39;        &#125;,output:&#123;filename: “[name].js”,path: resolve(__dirname, “build”)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-1-多文件打包成一个文件"><a href="#3-1-多文件打包成一个文件" class="headerlink" title="3.1 多文件打包成一个文件"></a>3.1 多文件打包成一个文件</h2><p>问题：多个入口文件 &#x3D;&#x3D;》 单文件出口<br><br>解决：entry改成数组形式</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">const path &#x3D; require(&#39;path&#39;);module.exports &#x3D; &#123;    entry: [&#39;.&#x2F;src&#x2F;main.js&#39;, &#39;.&#x2F;src&#x2F;main.js&#39;],    output: &#123;        path: path.resolve(__dirname, &#39;dist&#39;),        filename: &#39;[hash].js&#39;,    &#125;,&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-2-多文件打包成多文件"><a href="#3-2-多文件打包成多文件" class="headerlink" title="3.2 多文件打包成多文件"></a>3.2 多文件打包成多文件</h2><p>问题：多个入口文件 &#x3D;&#x3D;》 多文件出口<br><br>解决：将filename属性删去，entry改为属性</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">const path &#x3D; require(&#39;path&#39;);module.exports &#x3D; &#123;    entry: &#123; a: &#39;.&#x2F;src&#x2F;main1.js&#39;, b: &#39;.&#x2F;src&#x2F;main.js&#39; &#125;,    output: &#123;        path: path.resolve(__dirname, &#39;dist&#39;),    &#125;,&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-loader"><a href="#4-loader" class="headerlink" title="4. loader"></a>4. loader</h1><h2 id="4-1-loader概念"><a href="#4-1-loader概念" class="headerlink" title="4.1 loader概念"></a>4.1 loader概念</h2><p>webpack 只能理解 JavaScript 和 JSON 文件，这是 webpack 开箱可用的自带能力。<br><br>loader 让 webpack 能够去处理其他类型的文件，并将它们转换为有效 模块，以供应用程序使用，以及被添加到依赖图中。</p><h2 id="4-2-loader的使用"><a href="#4-2-loader的使用" class="headerlink" title="4.2 loader的使用"></a>4.2 loader的使用</h2><h3 id="4-2-1-安装webpack-cli、webpack"><a href="#4-2-1-安装webpack-cli、webpack" class="headerlink" title="4.2.1 安装webpack-cli、webpack"></a>4.2.1 安装webpack-cli、webpack</h3><p>cnpm i -S webpack webpack-cli</p><h3 id="4-2-2-安装loader"><a href="#4-2-2-安装loader" class="headerlink" title="4.2.2 安装loader"></a>4.2.2 安装loader</h3><p>cnpm i -S style-loader css-loader</p><h3 id="4-2-3-将css文件import-到-js"><a href="#4-2-3-将css文件import-到-js" class="headerlink" title="4.2.3 将css文件import 到 js"></a>4.2.3 将css文件import 到 js</h3><p>在js文件里import css 文件，当然实际项目的时候css和js是分开，且不需要自己下载和配置loader，</p><p>main1.js</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">import &#39;.&#x2F;style.css&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><br>像vue、react都有loader</p><h3 id="4-2-4-配置webpack-config-js"><a href="#4-2-4-配置webpack-config-js" class="headerlink" title="4.2.4 配置webpack.config.js"></a>4.2.4 配置webpack.config.js</h3><p>在更高层面，在 webpack 的配置中，loader 有两个属性：<br><br>test 属性，识别出哪些文件会被转换。<br><br>use 属性，定义出在进行转换时，应该使用哪个 loader。</p><p>webpack.config.js</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">const path &#x3D; require(&#39;path&#39;);module.exports &#x3D; &#123;    mode: &#39;production&#39;,    entry: &#123; a: &#39;.&#x2F;src&#x2F;main1.js&#39;, b: &#39;.&#x2F;src&#x2F;main.js&#39; &#125;,    module: &#123;        rules: [&#123; test: &#x2F;\.css$&#x2F;, use: [&#39;style-loader&#39;, &#39;css-loader&#39;] &#125;],    &#125;,&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-5-webpack命令打包"><a href="#4-2-5-webpack命令打包" class="headerlink" title="4.2.5 webpack命令打包"></a>4.2.5 webpack命令打包</h3><h3 id="4-2-6-常见loader"><a href="#4-2-6-常见loader" class="headerlink" title="4.2.6 常见loader"></a>4.2.6 常见loader</h3><p>包括不限于<br><br>1、file-loader：把⽂件输出到⼀个⽂件夹中，在代码中通过相对 URL 去引⽤输出的⽂件。<br>2、url-loader：和 file-loader 类似，但是能在⽂件很⼩的情况下以 base64 的⽅式把⽂件内容注⼊到代码中去。<br>3、source-map-loader：加载额外的 Source Map ⽂件，以⽅便断点调试。<br>4、image-loader：下载并且压缩图⽚⽂件。<br>5、babel-loader：将ES6转化为ES5。<br>6、css-loader：加载 CSS，⽀持模块化、压缩、⽂件导⼊等特性。<br>7、style-loader：把 CSS 代码注⼊到 JavaScript 中，通过 DOM 操作去加载 CSS。<br>8、eslint-loader:通过 ESLint 检查 JavaScript 代码。<br>9、ts-loader：ts转js<br>10、html-withimg-loader：让html支持图片的loader</p><h1 id="5-plugin"><a href="#5-plugin" class="headerlink" title="5 plugin"></a>5 plugin</h1><p>loader用于转换某些类型的模块，而插件（plugin）则可以用于执行范围更广的任务。包括：打包优化，资源管理，注入环境变量。</p><h2 id="5-1-html-webpack-plugin的使用"><a href="#5-1-html-webpack-plugin的使用" class="headerlink" title="5.1 html-webpack-plugin的使用"></a>5.1 html-webpack-plugin的使用</h2><p>plugin以html-webpack-plugin为例子<br><a href="https://www.cnblogs.com/wonyun/p/6030090.html">https://www.cnblogs.com/wonyun/p/6030090.html</a><br>\</p><h3 id="5-1-1-下载"><a href="#5-1-1-下载" class="headerlink" title="5.1.1 下载"></a>5.1.1 下载</h3><p><br>cnpm i html-webpack-plugin -S<br>\</p><h3 id="5-1-2-引入"><a href="#5-1-2-引入" class="headerlink" title="5.1.2 引入"></a>5.1.2 引入</h3><p><br>const HtmlWebpackPlugin &#x3D; require(‘html-webpack-plugin’);<br>\</p><h3 id="5-1-3-配置"><a href="#5-1-3-配置" class="headerlink" title="5.1.3 配置"></a>5.1.3 配置</h3><p>\</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">plugins: [ new HtmlWebpackPlugin(&#123;     template: &#39;.&#x2F;src&#x2F;index.html&#39;     &#125;) ],<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-1-4-参数说明"><a href="#5-1-4-参数说明" class="headerlink" title="5.1.4 参数说明"></a>5.1.4 参数说明</h3><ol><li><p>指定模板页面<br>(只有这样才会保留该文件的html结构)</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">template:&#39;.&#x2F;src&#x2F;index.html&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>修改默认输出文件名<br>(默认index.html，多文件时必须修改)</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">filename:&#39;xx.html&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>允许插入到模板的一些chunk(chunk是根据一个入口产生的module集合)</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">chunks：[&#39;jqeury&#39;,&#39;xx&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>配置不允许注入的chunk</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">excludeChunks:[&#39;xx&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>多页面打包</p></li></ol><p>需要创建多个new htm-webpack-plugin<br>或者循环</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">plugins: [    new HtmlWebpackPlugin(&#123;        template: &#39;.&#x2F;src&#x2F;index.html&#39;,        excludeChunks: [&#39;a&#39;]    &#125;),    new HtmlWebpackPlugin(&#123;        template: &#39;.&#x2F;src&#x2F;detail.html&#39;,        filename: &#39;detail.html&#39;,        excludeChunks: [&#39;b&#39;]    &#125;),],<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-1-4-配置一览"><a href="#5-1-4-配置一览" class="headerlink" title="5.1.4 配置一览"></a>5.1.4 配置一览</h3><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">const path &#x3D; require(&#39;path&#39;);const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);module.exports &#x3D; &#123;    mode: &#39;production&#39;,    entry: &#123; a: &#39;.&#x2F;src&#x2F;main.js&#39;, b: &#39;.&#x2F;src&#x2F;main.js&#39; &#125;,    module: &#123;        rules: [&#123; test: &#x2F;\.css$&#x2F;, use: [&#39;style-loader&#39;, &#39;css-loader&#39;] &#125;],    &#125;,    plugins: [        new HtmlWebpackPlugin(&#123;            template: &#39;.&#x2F;src&#x2F;index.html&#39;,            excludeChunks: [&#39;a&#39;]        &#125;),        new HtmlWebpackPlugin(&#123;            template: &#39;.&#x2F;src&#x2F;detail.html&#39;,            filename: &#39;detail.html&#39;,            excludeChunks: [&#39;b&#39;]        &#125;),    ],&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="6-webpack图片支持"><a href="#6-webpack图片支持" class="headerlink" title="6. webpack图片支持"></a>6. webpack图片支持</h1><p>先下载两个loader：<br><br>cnpm i file-loader html-withimg-loader</p><h2 id="6-1-使用file-loader"><a href="#6-1-使用file-loader" class="headerlink" title="6.1 使用file-loader"></a>6.1 使用file-loader</h2><p>配置文件</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&#123; test: &#x2F;\.(png|jpg|jpeg|gif)$&#x2F;, use: [&#123;    loader:&#39;file-loader&#39;,    options:&#123;        esModule:false,        outputPath:&#39;img&#x2F;&#39;    &#125;&#125;]&#125;,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-2-使用html-withimg-loader"><a href="#6-2-使用html-withimg-loader" class="headerlink" title="6.2 使用html-withimg-loader"></a>6.2 使用html-withimg-loader</h2><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&#123;    test: &#x2F;\.html$&#x2F;,    use: &#39;html-withimg-loader&#39;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-3-总体配置"><a href="#6-3-总体配置" class="headerlink" title="6.3 总体配置"></a>6.3 总体配置</h2><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">const path &#x3D; require(&#39;path&#39;);const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);module.exports &#x3D; &#123;    mode: &#39;production&#39;,    entry: &#123; a: &#39;.&#x2F;src&#x2F;main.js&#39;, b: &#39;.&#x2F;src&#x2F;main.js&#39; &#125;,    module: &#123;        rules: [            &#123; test: &#x2F;\.css$&#x2F;, use: [&#39;style-loader&#39;, &#39;css-loader&#39;] &#125;,            &#123;                test: &#x2F;\.(png|jpg|jpeg|gif)$&#x2F;,                use: [&#123;                    loader: &#39;file-loader&#39;,                    options: &#123;                        esModule: false,                        outputPath: &#39;img&#x2F;&#39;                    &#125;                &#125;]            &#125;,            &#123;                test: &#x2F;\.html$&#x2F;,                use: &#39;html-withimg-loader&#39;            &#125;        ],    &#125;,    plugins: [        new HtmlWebpackPlugin(&#123;            template: &#39;.&#x2F;src&#x2F;index.html&#39;,            excludeChunks: [&#39;a&#39;]        &#125;),        new HtmlWebpackPlugin(&#123;            template: &#39;.&#x2F;src&#x2F;detail.html&#39;,            filename: &#39;detail.html&#39;,            excludeChunks: [&#39;b&#39;]        &#125;),    ],&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="7-字体使用"><a href="#7-字体使用" class="headerlink" title="7. 字体使用"></a>7. 字体使用</h1><h2 id="7-1-发现iconfont不能使用在线链接了，将iconfont下载到本地"><a href="#7-1-发现iconfont不能使用在线链接了，将iconfont下载到本地" class="headerlink" title="7.1 发现iconfont不能使用在线链接了，将iconfont下载到本地"></a>7.1 发现iconfont不能使用在线链接了，将iconfont下载到本地</h2><h2 id="7-2-css里修改font图标的地址"><a href="#7-2-css里修改font图标的地址" class="headerlink" title="7.2 css里修改font图标的地址"></a>7.2 css里修改font图标的地址</h2><h2 id="7-3-用entry的js引用css"><a href="#7-3-用entry的js引用css" class="headerlink" title="7.3 用entry的js引用css"></a>7.3 用entry的js引用css</h2><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">import &#39;.&#x2F;css&#x2F;iconfont.css&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="7-4-在html插入Unicode方式的图标"><a href="#7-4-在html插入Unicode方式的图标" class="headerlink" title="7.4 在html插入Unicode方式的图标"></a>7.4 在html插入Unicode方式的图标</h2><p>实测不行，反而不用loader可以，这里仅做过程记录</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&#123;    test: &#x2F;\.(woff2|woff|ttf)$&#x2F;,    use: &#39;file-loader?name&#x3D;.&#x2F;fonts&#x2F;[name].[ext]&#39;,&#125;,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-5-webpack"><a href="#7-5-webpack" class="headerlink" title="7.5 webpack"></a>7.5 webpack</h2><h1 id="8-css的正确使用，分离-amp-压缩"><a href="#8-css的正确使用，分离-amp-压缩" class="headerlink" title="8. css的正确使用，分离&amp;压缩"></a>8. css的正确使用，分离&amp;压缩</h1><h2 id="8-1-分离css"><a href="#8-1-分离css" class="headerlink" title="8.1 分离css"></a>8.1 分离css</h2><p>将一个页面的css放到js中，并配置entry</p><h3 id="8-1-1-下载插件mini-css-extract-plugin"><a href="#8-1-1-下载插件mini-css-extract-plugin" class="headerlink" title="8.1.1 下载插件mini-css-extract-plugin"></a>8.1.1 下载插件mini-css-extract-plugin</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cnpm i mini-css-extract-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="8-1-2-引入plugin"><a href="#8-1-2-引入plugin" class="headerlink" title="8.1.2 引入plugin"></a>8.1.2 引入plugin</h3><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">const miniCssExtractPlugin &#x3D; require(&#39;mini-css-extract-plugin&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="8-1-3-配置mini-css-extract-plugin"><a href="#8-1-3-配置mini-css-extract-plugin" class="headerlink" title="8.1.3 配置mini-css-extract-plugin"></a>8.1.3 配置mini-css-extract-plugin</h3><p>module-&gt;rules-&gt;<br><br>要删除style-css</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&#123; test: &#x2F;\.css$&#x2F;, use: [miniCssExtractPlugin.loader, &#39;css-loader&#39;] &#125;,<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>plugin-&gt;</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">new miniCssExtractPlugin(&#123;        filename: &#39;.&#x2F;css&#x2F;[name].css&#39;    &#125;),<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="8-2-压缩css"><a href="#8-2-压缩css" class="headerlink" title="8.2 压缩css"></a>8.2 压缩css</h2><p>css需要单独下载插件，而js原本就被webpack支持</p><h3 id="8-2-1-下载optimize-css-assets-webpack-plugin"><a href="#8-2-1-下载optimize-css-assets-webpack-plugin" class="headerlink" title="8.2.1 下载optimize-css-assets-webpack-plugin"></a>8.2.1 下载optimize-css-assets-webpack-plugin</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cnpm i optimize-css-assets-webpack-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="8-2-2-引入插件"><a href="#8-2-2-引入插件" class="headerlink" title="8.2.2 引入插件"></a>8.2.2 引入插件</h3><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">const optimizeCss &#x3D; require(&#39;optimize-css-assets-webpack-plugin&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="8-2-3-配置使用"><a href="#8-2-3-配置使用" class="headerlink" title="8.2.3 配置使用"></a>8.2.3 配置使用</h3><p>plugin-&gt;</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">new optimizeCss(&#123;&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="8-3-webpack打包"><a href="#8-3-webpack打包" class="headerlink" title="8.3 webpack打包"></a>8.3 webpack打包</h3><h3 id="8-4-总体配置"><a href="#8-4-总体配置" class="headerlink" title="8.4 总体配置"></a>8.4 总体配置</h3><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">const path &#x3D; require(&#39;path&#39;);const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);const miniCssExtractPlugin &#x3D; require(&#39;mini-css-extract-plugin&#39;);const optimizeCss &#x3D; require(&#39;optimize-css-assets-webpack-plugin&#39;);module.exports &#x3D; &#123;    mode: &#39;production&#39;,    entry: &#123; a: &#39;.&#x2F;src&#x2F;main.js&#39;, b: &#39;.&#x2F;src&#x2F;main1.js&#39; &#125;,    module: &#123;        rules: [            &#123; test: &#x2F;\.css$&#x2F;, use: [miniCssExtractPlugin.loader, &#39;css-loader&#39;] &#125;,            &#123;                test: &#x2F;\.(png|jpg|jpeg|gif)$&#x2F;,                use: [&#123;                    loader: &#39;file-loader&#39;,                    options: &#123;                        esModule: false,                        outputPath: &#39;img&#x2F;&#39;                    &#125;                &#125;]            &#125;,            &#123;                test: &#x2F;\.html$&#x2F;,                use: &#39;html-withimg-loader&#39;            &#125;        ],    &#125;,    plugins: [        new HtmlWebpackPlugin(&#123;            template: &#39;.&#x2F;src&#x2F;index.html&#39;,            excludeChunks: [&#39;a&#39;]        &#125;),        new HtmlWebpackPlugin(&#123;            template: &#39;.&#x2F;src&#x2F;detail.html&#39;,            filename: &#39;detail.html&#39;,            excludeChunks: [&#39;b&#39;]        &#125;),        new miniCssExtractPlugin(&#123;            filename: &#39;.&#x2F;css&#x2F;[name].css&#39;        &#125;),        new optimizeCss()    ],&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="9-项目打包"><a href="#9-项目打包" class="headerlink" title="9. 项目打包"></a>9. 项目打包</h1><h2 id="9-1-引用配置"><a href="#9-1-引用配置" class="headerlink" title="9.1 引用配置"></a>9.1 引用配置</h2><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">const path &#x3D; require(&#39;path&#39;);const webpack &#x3D; require(&#39;webpack&#39;);const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);const miniCssExtractPlugin &#x3D; require(&#39;mini-css-extract-plugin&#39;);const optimizeCss &#x3D; require(&#39;optimize-css-assets-webpack-plugin&#39;);module.exports &#x3D; &#123;    &#x2F;&#x2F;对应生产模式    mode: &#39;production&#39;,    &#x2F;&#x2F;打包入口，索引是chunk名,为文件加载是左到右    entry: &#123; jquery: &#39;.&#x2F;src&#x2F;js&#x2F;jquery.js&#39;, common: &#39;.&#x2F;src&#x2F;js&#x2F;common.js&#39;, index: &#39;.&#x2F;src&#x2F;index.js&#39;, &#125;,    &#x2F;&#x2F;配置出口    output: &#123;        path: path.resolve(__dirname, &#39;dist&#x2F;&#39;)    &#125;,    &#x2F;&#x2F;module配置    module: &#123;        rules: [            &#123; test: &#x2F;\.css$&#x2F;, use: [miniCssExtractPlugin.loader, &#39;css-loader&#39;] &#125;,            &#x2F;&#x2F;配置图片打包loader            &#123;                test: &#x2F;\.(png|jpg|svg|gif|jpeg)$&#x2F;,                use: [&#123;                    loader: &#39;file-loader&#39;,                    options: &#123;                        esModule: false,                        outputPath: &#39;img&#x2F;&#39;                    &#125;                &#125;]            &#125;,            &#x2F;&#x2F;配置字体打包,需要webpack5+            &#123;                &#x2F;&#x2F;转换文件格式                test: &#x2F;\.(woff|woff2|eot|ttf|otf)$&#x2F;,                &#x2F;&#x2F;文件打包方式                type: &quot;asset&#x2F;resource&quot;,                generator: &#123;                    filename: &#96;.&#x2F;fonts&#x2F;[contenthash][ext]&#96;                &#125;            &#125;,            &#x2F;&#x2F;配置html文档的图片支持            &#123;                test: &#x2F;\.html$&#x2F;,                use: &#39;html-withimg-loader&#39;            &#125;        ],    &#125;,    plugins: [        new webpack.ProvidePlugin(&#123;            $: &#39;jquery&#39;,            jQuery: &#39;jquery&#39;,            &#39;window.jQuery&#39;: &#39;jquery&#39;,        &#125;),        &#x2F;&#x2F;配置插件对象        new HtmlWebpackPlugin(&#123;            template: &#39;.&#x2F;src&#x2F;index.html&#39;,            chunks: [&#39;jquery&#39;, &#39;common&#39;, &#39;index&#39;]        &#125;),        new HtmlWebpackPlugin(&#123;            template: &#39;.&#x2F;src&#x2F;detail.html&#39;,            filename: &#39;detail.html&#39;,            chunks: []        &#125;),        &#x2F;&#x2F;css抽离        new miniCssExtractPlugin(&#123;            filename: &#39;.&#x2F;css&#x2F;[name].css&#39;        &#125;),        &#x2F;&#x2F;压缩        new optimizeCss()    ],&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-2-配置jQuery"><a href="#9-2-配置jQuery" class="headerlink" title="9.2 配置jQuery"></a>9.2 配置jQuery</h2><p>jQuery打包后无法使用，jquery是自执行函数，再打包后就是模块又模块，自然全局就没$符号<br>\</p><ol><li><p>引入webpack</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">const webpack &#x3D; require(&#39;webpack&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装jquery</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cnpm i jquery <span class="token parameter variable">-S</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>配置</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">new webpack.providePlugin(&#123;    $:&#39;jquery&#39;,    jQuery:&#39;jquery&#39;,    &#39;window.jQuery&#39;:&#39;jquery&#39;,&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="9-3-打包页面css与内部js"><a href="#9-3-打包页面css与内部js" class="headerlink" title="9.3 打包页面css与内部js"></a>9.3 打包页面css与内部js</h2><ol><li>为每个页面创建一个js文件，将css文件与内部js添加到里面，并删除在页面删除css与js的引用<pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">import &#39;xxx.css&#39;;&#x2F;&#x2F;...javascript代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>将这个js文件添加到entry<pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">entry: &#123; &#39;js&#x2F;main&#39;: &#39;.&#x2F;src&#x2F;main.js&#39; &#125;,<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>为HtmlWebpackPlugin<br>对象的plugin配置这个chunk</li></ol><h2 id="9-4-打包js文件"><a href="#9-4-打包js文件" class="headerlink" title="9.4 打包js文件"></a>9.4 打包js文件</h2><ol><li>将所有外部js文件配置entry,页面加载顺序以entry左到右加载<pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">entry: &#123; &#39;js&#x2F;main&#39;: &#39;.&#x2F;src&#x2F;main.js&#39; &#125;,<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>在html的html-plugin配置需要的chunk</li></ol><h2 id="9-5-webpack"><a href="#9-5-webpack" class="headerlink" title="9.5 webpack"></a>9.5 webpack</h2><h1 id="10-参考："><a href="#10-参考：" class="headerlink" title="10. 参考："></a>10. 参考：</h1><h2 id="10-1-官方文档"><a href="#10-1-官方文档" class="headerlink" title="10.1 官方文档"></a>10.1 官方文档</h2><p><a href="https://webpack.docschina.org/concepts/">https://webpack.docschina.org/concepts/</a></p><h2 id="10-2-对Chunk的理解"><a href="#10-2-对Chunk的理解" class="headerlink" title="10.2 对Chunk的理解"></a>10.2 对Chunk的理解</h2><p><a href="https://blog.csdn.net/glenshappy/article/details/119642331">https://blog.csdn.net/glenshappy/article/details/119642331</a><br>&#x2F;<br>Chunk是Webpack打包过程中，一堆module的集合。&#x2F;<br>我们知道Webpack的打包是从一个入口文件开始，也可以说是入口模块，入口模块引用这其他模块，模块再引用模块。&#x2F;<br>Webpack通过引用关系逐个打包模块，这些module就形成了一个Chunk。</p><h3 id="10-3-loader和plugin的区别"><a href="#10-3-loader和plugin的区别" class="headerlink" title="10.3 loader和plugin的区别"></a>10.3 loader和plugin的区别</h3><p>webpack出厂自身只能识别js和json，loader是将webpack不能识别的模块转换成webpack能识别的模块<br>而plugin插件会为webpack添加更强大的功能,同时也能和loader搭配，如miniCssExtractPlugin.loader</p><h3 id="10-4-webpack5与iconfont打包"><a href="#10-4-webpack5与iconfont打包" class="headerlink" title="10.4 webpack5与iconfont打包"></a>10.4 webpack5与iconfont打包</h3><p>现在我们可以采用webpack5的方式使用资源类型模块，下面这个asset&#x2F;resource就相当于file-loader：<br><a href="https://blog.csdn.net/qq_49900295/article/details/124550743">https://blog.csdn.net/qq_49900295/article/details/124550743</a></p><h3 id="10-5-webpack中的的坑"><a href="#10-5-webpack中的的坑" class="headerlink" title="10.5 webpack中的的坑"></a>10.5 webpack中的的坑</h3><p>webpack会对html进行页面优化，忽略它认为不重要的属性，这可能产生bug<br>如将input中的属性[type&#x3D;text]删除，导致无法使用[type&#x3D;text]属性选择器操作</p>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用的打印方式</title>
      <link href="/2021/05/08/note/js-gai-nian-chang-yong-de-da-yin-fang-shi/"/>
      <url>/2021/05/08/note/js-gai-nian-chang-yong-de-da-yin-fang-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="1-console-log-方法"><a href="#1-console-log-方法" class="headerlink" title="1. console.log() 方法"></a>1. console.log() 方法</h2><p>用于在 console 窗口中输入信息。在调试时，可以替代 alert() 或 document.write() 输入需要输出的内容</p><h2 id="2-console-dir-方法"><a href="#2-console-dir-方法" class="headerlink" title="2. console.dir() 方法"></a>2. console.dir() 方法</h2><p>用来对一个对象进行检查(inspect)，并以易于阅读和打印的格式显示。该方法对于输入 DOM 对象非常有用，因为 dir 方法会显示DOM对象的所有属性</p><h2 id="3-console-time-“key”-和timeEnd-“key”-方法"><a href="#3-console-time-“key”-和timeEnd-“key”-方法" class="headerlink" title="3. console.time(“key”)和timeEnd(“key”) 方法"></a>3. console.time(“key”)和timeEnd(“key”) 方法</h2><p>time和timeEnd方法通过key参数来对一段代码的执行进行判断</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flex1中的宽度被撑开，怎么解决？</title>
      <link href="/2021/05/04/note/html-css-bug-flex1-zhong-de-kuan-du-bei-cheng-kai-zen-me-jie-jue/"/>
      <url>/2021/05/04/note/html-css-bug-flex1-zhong-de-kuan-du-bei-cheng-kai-zen-me-jie-jue/</url>
      
        <content type="html"><![CDATA[<p>首先flex1是根据flex-basis:0 进行伸缩的，元素内容本并不会影响，但是对于“一连串英文字符或者是数字”，html是会将他们识别成一体的，会被他们强行撑开宽度。</p><p>那么可以预选设置一个宽度width:0，这样盒子就不会被“一连串英文字符或者是数字”撑开，而保持flex:1分配的宽度了。除此之外还有一个文字原本的宽度，所以我们还需要设置word-wrap: break-word;文本换行。</p><p>例子如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">.flex-scarf</span> <span class="token punctuation">&#123;</span>      <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.flex-scarf .flex-item</span> <span class="token punctuation">&#123;</span>      <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>      <span class="token property">border</span><span class="token punctuation">:</span> solid 1px black<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> violet<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.flex-scarf .flex-item:nth-of-type(2)</span> <span class="token punctuation">&#123;</span>      <span class="token property">border-left</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>      <span class="token property">border-right</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.flex-scarf .flex-item .content</span> <span class="token punctuation">&#123;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> orangered<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 25px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.flex-scarf .flex-item .content2</span> <span class="token punctuation">&#123;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>      <span class="token comment">/* 换行 */</span>      <span class="token property">word-wrap</span><span class="token punctuation">:</span> break-word<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flex-scarf<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flex-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content content1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flex-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content content2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        11111111111111111111111111111111111111111111111111111111111111        11111111111111111111111111111111111111111111111111111111111111        11111111111111111111111111111111111111111111111111111111111111        二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flex-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content content3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://code.jquery.com/jquery-2.1.1.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://code.jquery.com/jquery-migrate-1.2.1.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./mian.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> html&amp;css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flex </tag>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水平垂直居中的多种方法</title>
      <link href="/2021/05/02/note/html-css-mian-shi-shui-ping-chui-zhi-ju-zhong-de-duo-chong-fang-shi/"/>
      <url>/2021/05/02/note/html-css-mian-shi-shui-ping-chui-zhi-ju-zhong-de-duo-chong-fang-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="1-行内元素："><a href="#1-行内元素：" class="headerlink" title="1. 行内元素："></a>1. 行内元素：</h2><p>line-height</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span><span class="token property">line-height</span><span class="token punctuation">:</span>同父元素高度<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>z注意：</p><p>① line-height对inline元素生效，如span文本；无法设置inline-block，如img图片</p><p>② 行高对多行有效，所以多行不要用</p><h2 id="2-块级元素："><a href="#2-块级元素：" class="headerlink" title="2. 块级元素："></a>2. 块级元素：</h2><p>(1) flex</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span>flex<span class="token punctuation">;</span><span class="token property">justify-content</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span><span class="token property">align-items</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>(2) 定位</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 方法一： */</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 方法二： */</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-例子"><a href="#3-例子" class="headerlink" title="3. 例子"></a>3. 例子</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">*</span> <span class="token punctuation">&#123;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">body</span> <span class="token punctuation">&#123;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.scarf</span> <span class="token punctuation">&#123;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 800px<span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>            <span class="token comment">/* 定位法一 */</span>            <span class="token comment">/* position: absolute;            top: 50%;            left: 50%;            transform: translate(-50%, -50%); */</span>            <span class="token comment">/* 定位法二 */</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.scarf span</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/* line-height: 200px; */</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> violet<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scarf<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>这个一行文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> html&amp;css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> html </tag>
            
            <tag> 水平居中 </tag>
            
            <tag> 垂直居中 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>v-if&amp;v-show的区别</title>
      <link href="/2021/04/30/note/vue-mian-shi-v-if-v-show-de-qu-bie/"/>
      <url>/2021/04/30/note/vue-mian-shi-v-if-v-show-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<h1 id="v-if和v-show的区别"><a href="#v-if和v-show的区别" class="headerlink" title="v-if和v-show的区别"></a>v-if和v-show的区别</h1><p>1.展示形式不同：</p><p>v-if<br>false不加载<br>true加载创建dom</p><p>v-show<br>false加载了不显示<br>true 显示</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span>none</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span>block</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意：display会造成重绘回流</p><p>2.使用场景不同：</p><p>v-if和v-show都会造成重绘回流但是</p><p>元素加载一次时使用 v-if 如漓江书院不同的会员对应不同的等级图标</p><p>元素频繁切换时使用 v-show 如弹出层</p><p>因为创建和删除节点的性能开销大</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用方法api总结</title>
      <link href="/2021/04/26/note/js-gai-nian-chang-yong-api-zong-jie/"/>
      <url>/2021/04/26/note/js-gai-nian-chang-yong-api-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>前端各种框架、工具层出不穷眼花缭乱，但只有夯实的基础才是学习新技术的基石。本文作为读书笔记简单的总结下 js 对象的基础知识。</p><h2 id="Object-对象api"><a href="#Object-对象api" class="headerlink" title="Object 对象api"></a>Object 对象api</h2><h3 id="1-Object-keys"><a href="#1-Object-keys" class="headerlink" title="1. Object.keys()"></a>1. Object.keys()</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//方法会返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和正常循环遍历该对象时返回的顺序一致。</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-Object-getOwnPropertyNames"><a href="#2-Object-getOwnPropertyNames" class="headerlink" title="2. Object.getOwnPropertyNames()"></a>2. Object.getOwnPropertyNames()</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//返回一个自身属性的属性名（包括不可枚举属性 但不包括Symbol）组成的数组。</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-Object-assign"><a href="#3-Object-assign" class="headerlink" title="3. Object.assign()"></a>3. Object.assign()</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> source <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> returnedTarget <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 按照key分配一个或多个源对象复制到目标对象，返回修改后的对象。</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Object &#123; a: 1, b: 4, c: 5 &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>returnedTarget <span class="token operator">===</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-Object-freeze"><a href="#4-Object-freeze" class="headerlink" title="4. Object.freeze()"></a>4. Object.freeze()</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token string">'上海市'</span><span class="token punctuation">&#125;</span>Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token comment">// 冻结对象</span>obj<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">'男'</span><span class="token comment">// 不能添加新属性</span>obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'李四'</span><span class="token comment">// 不能修改属性</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token comment">// &#123;name: "张三", age: 18, address: "上海市"&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-Object-prototype-toString"><a href="#5-Object-prototype-toString" class="headerlink" title="5. Object.prototype.toString()"></a>5. Object.prototype.toString()</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//方法返回一个表示该对象的字符串。</span><span class="token comment">//示例如下:</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//数组本身重写了这个方法，输出"1,2,3"</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//可以用来做类型判断，"[object Array]"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-Object-prototype-hasOwnProperty"><a href="#6-Object-prototype-hasOwnProperty" class="headerlink" title="6. Object.prototype.hasOwnProperty()"></a>6. Object.prototype.hasOwnProperty()</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//方法会返回一个布尔值，表示对象自身可枚举属性中是否具有指定的属性（也就是，是否有指定的键）。 </span><span class="token comment">//示例如下:</span>o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>o<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'prop'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回 false</span>o<span class="token punctuation">.</span>prop <span class="token operator">=</span> <span class="token string">'exists'</span><span class="token punctuation">;</span>o<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'prop'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回 true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-Object-prototype-isPrototypeOf"><a href="#7-Object-prototype-isPrototypeOf" class="headerlink" title="7. Object.prototype.isPrototypeOf()"></a>7. Object.prototype.isPrototypeOf()</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//判断当前对象是否为另一个对象的原型。</span><span class="token comment">//示例如下：</span><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>foo<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> <span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span><span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>Foo<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false 注意这里是false，因为isPrototypeOf检查的是 当前对象 而不是 当前对象原型，这也是它和instanceof操作符的区别</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Array-数组api"><a href="#Array-数组api" class="headerlink" title="Array 数组api"></a>Array 数组api</h2><h3 id="1-Array-isArray"><a href="#1-Array-isArray" class="headerlink" title="1. Array.isArray()"></a>1. Array.isArray()</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment">//用来判断一个值是否为数组Array实例的方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-Array-from"><a href="#2-Array-from" class="headerlink" title="2. Array.from()"></a>2. Array.from()</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//接收一个可迭代对象 返回一个新数组（浅拷贝）</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-Array-prototype-toString"><a href="#3-Array-prototype-toString" class="headerlink" title="3. Array.prototype.toString()"></a>3. Array.prototype.toString()</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//返回数组的字符串形式</span><span class="token comment">//例子如下:</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1,2,3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-Array-prototype-push"><a href="#4-Array-prototype-push" class="headerlink" title="4. Array.prototype.push()"></a>4. Array.prototype.push()</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>vlaue<span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">)</span>   <span class="token comment">// 用于在数组的末端添加一个或多个元素，并返回添加新元素后的数组长度。</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-Array-prototype-pop"><a href="#5-Array-prototype-pop" class="headerlink" title="5. Array.prototype.pop()"></a>5. Array.prototype.pop()</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//用于删除数组的最后一个元素，并返回该元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-Array-prototype-join"><a href="#6-Array-prototype-join" class="headerlink" title="6. Array.prototype.join()"></a>6. Array.prototype.join()</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//返回一个由数组组成的字符串，使用参数分割。如果不提供参数，默认用逗号分隔。</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-Array-prototype-concat"><a href="#7-Array-prototype-concat" class="headerlink" title="7. Array.prototype.concat()"></a>7. Array.prototype.concat()</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 用于多个数组的合并。它将新数组的成员，添加到原数组的尾部，然后返回一个新数组，原数组不变。</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="8-Array-prototype-shift"><a href="#8-Array-prototype-shift" class="headerlink" title="8. Array.prototype.shift()"></a>8. Array.prototype.shift()</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//方法从数组中删除第一个元素，并返回该元素的值。此方法更改数组的长度</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="9-Array-prototype-unshift"><a href="#9-Array-prototype-unshift" class="headerlink" title="9. Array.prototype.unshift()"></a>9. Array.prototype.unshift()</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//方法将一个或多个元素添加到数组的开头，并返回该数组的新长度。</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="10-Array-prototype-reverse"><a href="#10-Array-prototype-reverse" class="headerlink" title="10. Array.prototype.reverse()"></a>10. Array.prototype.reverse()</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//用于颠倒数组中元素的顺序，改变并返回这个数组。</span><span class="token comment">//示例如下：</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">let</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//[4, 3, 2, 1]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-Array-prototype-slice"><a href="#11-Array-prototype-slice" class="headerlink" title="11. Array.prototype.slice()"></a>11. Array.prototype.slice()</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>start_index<span class="token punctuation">,</span> upto_index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 用于提取原数组的一部分，返回一个新数组，原数组不变。第一个参数为起始位置（从0开始），第二个参数为终止位置（但该位置的元素本身不包括在内）。如果省略第二个参数，则一直返回到原数组的最后一个成员。负数表示倒数第几个。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="12-Array-prototype-splice"><a href="#12-Array-prototype-splice" class="headerlink" title="12. Array.prototype.splice()"></a>12. Array.prototype.splice()</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> count_to_remove<span class="token punctuation">,</span> addElement1<span class="token punctuation">,</span> addElement2<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 用于删除原数组的一部分成员，并可以在被删除的位置添加入新的数组成员，返回值是被删除的元素。第一个参数是删除的起始位置，第二个参数是被删除的元素个数。如果后面还有更多的参数，则表示这些就是要被插入数组的新元素。</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="13-Array-prototype-sort"><a href="#13-Array-prototype-sort" class="headerlink" title="13. Array.prototype.sort()"></a>13. Array.prototype.sort()</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// 对数组成员进行排序，默认是按照字典顺序排序。排序后，原数组将被改变。如果想让sort方法按照自定义方式排序，可以传入一个函数作为参数，表示按照自定义方法进行排序。该函数本身又接受两个参数，表示进行比较的两个元素。如果返回值大于0，表示第一个元素排在第二个元素后面；其他情况下，都是第一个元素排在第二个元素前面。</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="14-Array-prototype-map"><a href="#14-Array-prototype-map" class="headerlink" title="14. Array.prototype.map()"></a>14. Array.prototype.map()</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// 对数组的所有成员依次调用一个函数，根据函数结果返回一个新数组。</span><span class="token function">map</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr<span class="token punctuation">)</span>   <span class="token comment">// map方法接受一个函数作为参数。该函数调用时，map方法会将其传入三个参数，分别是当前成员、当前位置和数组本身。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="15-Array-prototype-forEach"><a href="#15-Array-prototype-forEach" class="headerlink" title="15. Array.prototype.forEach()"></a>15. Array.prototype.forEach()</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// 遍历数组的所有成员，执行某种操作,参数是一个函数。它接受三个参数，分别是当前位置的值、当前位置的编号和整个数组。</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="16-Array-prototype-filter"><a href="#16-Array-prototype-filter" class="headerlink" title="16. Array.prototype.filter()"></a>16. Array.prototype.filter()</h3><p>参数是一个函数，所有数组成员依次执行该函数，返回结果为true的成员组成一个新数组返回。该方法不会改变原数组。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'spray'</span><span class="token punctuation">,</span> <span class="token string">'limit'</span><span class="token punctuation">,</span> <span class="token string">'elite'</span><span class="token punctuation">,</span> <span class="token string">'exuberant'</span><span class="token punctuation">,</span> <span class="token string">'destruction'</span><span class="token punctuation">,</span> <span class="token string">'present'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> result <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">word</span> <span class="token operator">=></span> word<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//["exuberant", "destruction", "present"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="17-Array-prototype-some"><a href="#17-Array-prototype-some" class="headerlink" title="17. Array.prototype.some()"></a>17. Array.prototype.some()</h3><p>some()方法测试数组中是不是至少有 1 个元素通过了被提供的函数测试。它返回的是一个 Boolean 类型的值。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// checks whether an element is even</span><span class="token keyword">const</span> <span class="token function-variable function">even</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token operator">=></span> element <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>even<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// expected output: true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="18-Array-prototype-every"><a href="#18-Array-prototype-every" class="headerlink" title="18. Array.prototype.every()"></a>18. Array.prototype.every()</h3><p>every() 方法测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">isBigEnough</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> element <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>isBigEnough<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// false</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>isBigEnough<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="19-Array-prototype-reduce"><a href="#19-Array-prototype-reduce" class="headerlink" title="19. Array.prototype.reduce()"></a>19. Array.prototype.reduce()</h3><p>reduce() 方法对数组中的每个元素按序执行一个由您提供的 reducer 函数，每一次运行 reducer 会将先前元素的计算结果作为参数传入，最后将其结果汇总为单个返回值（从第一个成员到最后一个成员）。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span> <span class="token parameter">previousValue<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span>currentIndex<span class="token punctuation">,</span>arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> previousValue <span class="token operator">+</span> currentValue<span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//拥有两个参数，回调函数和初始值。回调函数previousValue, currentValue的初始值为initialValue和数组第一个值；但如果没有设置initialValue，那么回调函数previousValue, currentValue的初始值为 数组第一个值 和 数组第二个值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="20-Array-prototype-reduceRight"><a href="#20-Array-prototype-reduceRight" class="headerlink" title="20. Array.prototype.reduceRight()"></a>20. Array.prototype.reduceRight()</h3><p>依次处理数组的每个成员，最终累计为一个值。从右到左（从最后一个成员到第一个成员）</p><h3 id="21-Array-prototype-indexOf"><a href="#21-Array-prototype-indexOf" class="headerlink" title="21. Array.prototype.indexOf()"></a>21. Array.prototype.indexOf()</h3><p>返回给定元素在数组中第一次出现的位置，如果没有出现则返回-1。可以接受第二个参数，表示搜索的开始位置</p><h3 id="22-Array-prototype-lastIndexOf"><a href="#22-Array-prototype-lastIndexOf" class="headerlink" title="22. Array.prototype.lastIndexOf()"></a>22. Array.prototype.lastIndexOf()</h3><p>返回给定元素在数组中最后一次出现的位置，如果没有出现则返回-1。</p><h3 id="23-Array-prototype-flat"><a href="#23-Array-prototype-flat" class="headerlink" title="23. Array.prototype.flat()"></a>23. Array.prototype.flat()</h3><p>数组扁平化，返回一个包含将数组与子数组中所有元素的新数组。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//参数depth 可选。指定要提取嵌套数组的结构深度，默认值为 1。</span><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr1<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [1, 2, 3, 4]</span><span class="token keyword">var</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr3<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [1, 2, 3, 4, 5, 6]</span><span class="token comment">//使用 Infinity，可展开任意深度的嵌套数组</span><span class="token keyword">var</span> arr4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr4<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="String-字符串"><a href="#String-字符串" class="headerlink" title="String 字符串"></a>String 字符串</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">s<span class="token punctuation">.</span>length  <span class="token comment">//返回字符串的长度方法</span>s<span class="token punctuation">.</span><span class="token function">chatAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>  <span class="token comment">// 返回指定位置的字符，其实可以使用s.[index]代替</span>s<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 该方法的参数是一系列Unicode码点，返回对应的字符串。</span>s<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>  <span class="token comment">// 返回给定位置字符的Unicode码点（十进制表示）</span>s<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>end<span class="token punctuation">)</span>  <span class="token comment">// 用于从原字符串取出子字符串并返回，不改变原字符串。第一个参数是子字符串的开始位置，第二个参数是子字符串的结束位置（不含该位置）。如果参数是负值，表示从结尾开始倒数计算的位置，即该负值加上字符串长度。这和数组的使用一致。</span>s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>length<span class="token punctuation">)</span>   <span class="token comment">// 用于从原字符串取出子字符串并返回，不改变原字符串。第一个参数是子字符串的开始位置，第二个参数是子字符串的长度（区别在这）。如果第一个参数是负数，表示倒数计算的字符位置。如果第二个参数是负数，将被自动转为0，因此会返回空字符串。</span>s<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>   <span class="token comment">// 返回给定元素在字符串中第一次出现的位置，如果没有出现则返回-1。可以接受第二个参数，表示搜索的开始位置 </span>s<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 返回给定元素在字符串中最后一次出现的位置，如果没有出现则返回-1。</span>s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 用于去除字符串两端的空格，返回一个新字符串</span>s<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 用于将一个字符串全部转为小写,返回一个新字符串，不改变原字符串。</span>s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 全部转为大写</span>s<span class="token punctuation">.</span><span class="token function">localeCompare</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span>  <span class="token comment">// 用于比较两个字符串。它返回一个整数，如果小于0，表示第一个字符串小于第二个字符串；如果等于0，表示两者相等；如果大于0，表示第一个字符串大于第二个字符串。</span>s<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regexp<span class="token punctuation">)</span>   <span class="token comment">// 用于确定原字符串是否匹配某个子字符串，返回一个数组，成员为匹配的第一个字符串。如果没有找到匹配，则返回null。</span>s<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 返回值为匹配的第一个位置。如果没有找到匹配，则返回-1。</span>s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>oldValue<span class="token punctuation">,</span>newValue<span class="token punctuation">)</span>  <span class="token comment">// 用于替换匹配的子字符串，一般情况下只替换第一个匹配（除非使用带有g修饰符的正则表达式）。</span>s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 按照给定规则分割字符串，返回一个由分割出来的子字符串组成的数组。还可传入第二个参数，决定了返回数组的成员数。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Number对象"><a href="#Number对象" class="headerlink" title="Number对象"></a>Number对象</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span>Number<span class="token punctuation">.</span><span class="token constant">POSITIVE_INFINITY</span> <span class="token comment">// 正的无限，指向Infinity。  </span>Number<span class="token punctuation">.</span><span class="token constant">NEGATIVE_INFINITY</span> <span class="token comment">// 负的无限，指向-Infinity。  </span>Number<span class="token punctuation">.</span><span class="token number">NaN</span> <span class="token comment">// 表示非数值，指向NaN。  </span>Number<span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token comment">// 表示最大的正数，相应的，最小的负数为-Number.MAX_VALUE。  </span>Number<span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span> <span class="token comment">// 表示最小的正数（即最接近0的正数，在64位浮点数体系中为5e-324），相应的，最接近0的负数为-Number.MIN_VALUE。  </span>Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span> <span class="token comment">// 表示能够精确表示的最大整数，即9007199254740991。  </span>Number<span class="token punctuation">.</span><span class="token constant">MIN_SAFE_INTEGER</span> <span class="token comment">// 表示能够精确表示的最小整数，即-9007199254740991。</span>n<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// 用来将一个数值转为字符串形式.可以接受一个参数，表示输出的进制。如果省略这个参数，默认将数值先转为十进制，再输出字符串；否则，就根据参数指定的进制，将一个数字转化成某个进制的字符串。</span>n<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// 用于将一个数转为指定位数的小数，返回这个小数对应的字符串。</span>n<span class="token punctuation">.</span><span class="token function">toExponential</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 用于将一个数转为科学计数法形式。可传入一个参数，参数表示小数点后有效数字的位数，范围为0到20，超出这个范围，会抛出一个RangeError。</span>n<span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 用于将一个数转为指定位数的有效数字。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">属性Math<span class="token punctuation">.</span><span class="token constant">E</span>  <span class="token comment">// 常数e。  </span>Math<span class="token punctuation">.</span><span class="token constant">LN2</span>  <span class="token comment">// 2的自然对数。  </span>Math<span class="token punctuation">.</span><span class="token constant">LN10</span>  <span class="token comment">// 10的自然对数。  </span>Math<span class="token punctuation">.</span><span class="token constant">LOG2E</span>  <span class="token comment">// 以2为底的e的对数。  </span>Math<span class="token punctuation">.</span><span class="token constant">LOG10E</span>  <span class="token comment">// 以10为底的e的对数。  </span>Math<span class="token punctuation">.</span><span class="token constant">PI</span>  <span class="token comment">// 常数Pi。  </span>Math<span class="token punctuation">.</span><span class="token constant">SQRT1_2</span>  <span class="token comment">// 0.5的平方根。  </span>Math<span class="token punctuation">.</span><span class="token constant">SQRT2</span>  <span class="token comment">// 2的平方根。</span>数学方法Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 返回参数的绝对值  </span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 向上取整，接受一个参数，返回大于该参数的最小整数。 </span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 向下取整  </span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>n1<span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">)</span>  <span class="token comment">// 可接受多个参数，返回最大值  </span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>n1<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>  <span class="token comment">// 可接受多个参数，返回最小值  </span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>e<span class="token punctuation">)</span>  <span class="token comment">// 指数运算, 返回以第一个参数为底数、第二个参数为幂的指数值。 </span>Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 返回参数值的平方根。如果参数是一个负值，则返回NaN。  </span>Math<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 返回以e为底的自然对数值。</span>Math<span class="token punctuation">.</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 返回e的指数，也就是常数e的参数次方。</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 四舍五入  </span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//返回0到1之间的一个伪随机数，可能等于0，但是一定小于1。</span>三角函数方法Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 返回参数的正弦  </span>Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 返回参数的余弦  </span>Math<span class="token punctuation">.</span><span class="token function">tan</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 返回参数的正切  </span>Math<span class="token punctuation">.</span><span class="token function">asin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 返回参数的反正弦（弧度值）  </span>Math<span class="token punctuation">.</span><span class="token function">acos</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 返回参数的反余弦（弧度值）  </span>Math<span class="token punctuation">.</span><span class="token function">atan</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 返回参数的反正切（弧度值）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JSON对象"><a href="#JSON对象" class="headerlink" title="JSON对象"></a>JSON对象</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">//用于将一个值转为字符串。该字符串应该符合JSON格式，并且可以被JSON.parse方法还原。</span><span class="token comment">//（JSON.stringify(obj, selectedProperties)）还可以接受一个数组，作为第二个参数，指定需要转成字符串的属性。</span><span class="token comment">// 还可以接受第三个参数，用于增加返回的JSON字符串的可读性。如果是数字，表示每个属性前面添加的空格（最多不超过10个）；如果是字符串（不超过10个字符），则该字符串会添加在每行前面。</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">//用于将JSON字符串转化成对象。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="console对象"><a href="#console对象" class="headerlink" title="console对象"></a>console对象</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span>text2<span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">)</span>   <span class="token comment">// 用于在console窗口输出信息。它可以接受多个参数，将它们的结果连接起来输出。如果第一个参数是格式字符串（使用了格式占位符），console.log方法将依次用后面的参数替换占位符，然后再进行输出。</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// 在console窗口输出信息，同时，会在输出信息的前面，加上一个蓝色图标。</span>console<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 在console窗口输出信息，同时，会在输出信息的前面，加上一个蓝色图标。</span>console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 输出信息时，在最前面加一个黄色三角，表示警告；</span>console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 输出信息时，在最前面加一个红色的叉，表示出错，同时会显示错误发生的堆栈</span>console<span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 可以将复合类型的数据转为表格显示。</span>console<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 用于计数，输出它被调用了多少次。</span>console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 用来对一个对象进行检查（inspect），并以易于阅读和打印的格式显示。</span>console<span class="token punctuation">.</span><span class="token function">dirxml</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 用于以目录树的形式，显示DOM节点。</span>console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 接受两个参数，第一个参数是表达式，第二个参数是字符串。只有当第一个参数为false，才会输出第二个参数，否则不会有任何结果。</span><span class="token comment">// 这两个方法用于计时，可以算出一个操作所花费的准确时间。</span>console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// time方法表示计时开始，timeEnd方法表示计时结束。它们的参数是计时器的名称。调用timeEnd方法之后，console窗口会显示“计时器名称: 所耗费的时间”。</span>console<span class="token punctuation">.</span><span class="token function">profile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 用来新建一个性能测试器（profile），它的参数是性能测试器的名字。</span>console<span class="token punctuation">.</span><span class="token function">profileEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 用来结束正在运行的性能测试器。</span>console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">groupend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 上面这两个方法用于将显示的信息分组。它只在输出大量信息时有用，分在一组的信息，可以用鼠标折叠/展开。</span>console<span class="token punctuation">.</span><span class="token function">groupCollapsed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 用于将显示的信息分组，该组的内容，在第一次显示时是收起的（collapsed），而不是展开的。</span>console<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 显示当前执行的代码在堆栈中的调用路径。</span>console<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 用于清除当前控制台的所有输出，将光标回置到第一行。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="全局属性"><a href="#全局属性" class="headerlink" title="全局属性"></a>全局属性</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">Infinity</span> <span class="token comment">//正无穷大</span><span class="token number">NaN</span> <span class="token comment">//非数字值</span><span class="token comment">//...略</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> 常用api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html中的两种自定义属性</title>
      <link href="/2021/04/26/note/html-css-liang-chong-zi-ding-yi-shu-xing/"/>
      <url>/2021/04/26/note/html-css-liang-chong-zi-ding-yi-shu-xing/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span> <span class="token attr-name">qq</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123<span class="token punctuation">"</span></span> <span class="token attr-name">data-qq</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>99<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是一个盒子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">//1.属性</span>    box<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'qq'</span><span class="token punctuation">)</span> <span class="token comment">// 获取属性值</span>    box<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'qq'</span><span class="token punctuation">,</span> <span class="token string">'2222222'</span><span class="token punctuation">)</span> <span class="token comment">// 设置属性值</span>    <span class="token comment">//2.data-qq 设置和获取都通过dataset 当然也可以getAttribute setAttribute</span>    box<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>qq <span class="token comment">// 获取属性值</span>    box<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>qq <span class="token operator">=</span> <span class="token string">'8888'</span> <span class="token comment">// 设置属性值</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> html&amp;css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> 自定义属性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-为什么虚拟dom更好</title>
      <link href="/2021/04/11/note/vue-wei-shi-me-xu-ni-dom-geng-hao/"/>
      <url>/2021/04/11/note/vue-wei-shi-me-xu-ni-dom-geng-hao/</url>
      
        <content type="html"><![CDATA[<p>虚拟DOM旨在解决浏览器的性能问题。如果一个操作中有10次DOM更新，虚拟DOM不会立即对DOM进行操作，而是将这10次更新的差异(diff)内容保存到一个本地JS对象中，最后将这个JS对象附加到DOM树一次，以便后续操作，这样可以避免大量不必要的计算。因此，使用JS对象模拟DOM节点的好处是，页面的更新可以先全部反映在JS对象(虚拟DOM)中，在内存中操作JS对象的速度明显更快。更新完成后，最终的JS对象将被映射到真正的DOM中，由浏览器绘制。</p><h2 id="1-通常，我们在操作一个-DOM-结构的时候会有哪几种方式？"><a href="#1-通常，我们在操作一个-DOM-结构的时候会有哪几种方式？" class="headerlink" title="1. 通常，我们在操作一个 DOM 结构的时候会有哪几种方式？"></a>1. 通常，我们在操作一个 DOM 结构的时候会有哪几种方式？</h2><h3 id="（1）-通过原生-js，精确地选中我们要操作的-DOM-节点，然后对其进行相应的操作。"><a href="#（1）-通过原生-js，精确地选中我们要操作的-DOM-节点，然后对其进行相应的操作。" class="headerlink" title="（1） 通过原生 js，精确地选中我们要操作的 DOM 节点，然后对其进行相应的操作。"></a>（1） 通过原生 js，精确地选中我们要操作的 DOM 节点，然后对其进行相应的操作。</h3><p>比如我们要修改一个 div 节点的内容，就需要这样做</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span>div<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">'hello world'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>复制代码<br>这样我们就把 div 这个元素中的内容修改为 hello world。</p><h3 id="（2）-第二种方式是通过一个-html-模板字符串去创建一个节点，替换当前节点，这种方式在-jQuery-时代是非常常用的。"><a href="#（2）-第二种方式是通过一个-html-模板字符串去创建一个节点，替换当前节点，这种方式在-jQuery-时代是非常常用的。" class="headerlink" title="（2） 第二种方式是通过一个 html 模板字符串去创建一个节点，替换当前节点，这种方式在 jQuery 时代是非常常用的。"></a>（2） 第二种方式是通过一个 html 模板字符串去创建一个节点，替换当前节点，这种方式在 jQuery 时代是非常常用的。</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> htmlTemplate <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>hello world&lt;/div></span><span class="token template-punctuation string">`</span></span>wrap<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> htmlTemplate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样也能达到同样的目的。</p><h3 id="3-第三种就是通过虚拟-DOM-的方式进行修改了"><a href="#3-第三种就是通过虚拟-DOM-的方式进行修改了" class="headerlink" title="(3) 第三种就是通过虚拟 DOM 的方式进行修改了"></a>(3) 第三种就是通过虚拟 DOM 的方式进行修改了</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> virtualDOM <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">'div'</span><span class="token punctuation">,</span>  <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token string">'hello world'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>对比以上三种方法，你觉得哪种方法的性能最好呢？</p><p>很显然是第一种，选中要修改的元素，直接修改其内容。</p><p>其次应该是第三种方法，为什么不是第二种呢？</p><p><strong>因为在通过虚拟 DOM 修改 div 的内容的时候，可以通过 diff 算法，来最小化的修改变更的内容。对于上边的案例来说，只是 div 的内容发生了变化，而 div 元素本身并没有修改任何东西，所以对于通过虚拟 DOM 修改 div 内容的时候，div 标签不会被重新创建。而使用 html 模板字符串的方法，则会对模板中的所有节点进行重新创建。</strong></p><p>理论上，第一种方法的性能已经是最好的了，因为没有任何其他额外的操作去消耗性能了。</p><p>相比于第一种方法，虚拟 DOM 多做的一件事是虚拟 DOM 对象的创建以及修改目标的查找。</p><p>但是呢，这个过程是纯 javascript 层面的计算，所以虽然两种方式有的性能上会有差异，但是并不会差别很大。</p><p>毕竟相较于 DOM 层面的计算，JavaScript 层面计算带来的性能差异几乎可以忽略不计了。</p><h2 id="2-Vue为什么使用虚拟dom"><a href="#2-Vue为什么使用虚拟dom" class="headerlink" title="2. Vue为什么使用虚拟dom"></a>2. Vue为什么使用虚拟dom</h2><p>虚拟DOM就是为了解决直接操作DOM导致的性能问题而被设计出来的。</p><p>使用了虚拟DOM之后，假如一次操作中有10次更新DOM的动作，虚拟DOM不会立即操作DOM，而是将这10次更新的diff内容保存到本地的一个js对象中，最终将这个js对象一次性attach到DOM树上，通知浏览器去执行绘制工作，这样可以避免大量的无用的计算量。</p><p>Virtual DOM 本质上就是在 JS 和 DOM 之间做了一个缓存。可以类比 CPU 和硬盘，既然硬盘这么慢，我们就在它们之间加个内存。既然 DOM 这么慢，我们就在它们 JS 和 DOM 之间加个虚拟DOM。CPU（JS）只操作内存（Virtual DOM），最后的时候再把变更写入硬盘（DOM）。</p><p>Virtual DOM的优势不在于单次的操作，而是在大量、频繁的数据更新下，能够对视图进行合理、高效的更新。</p><h2 id="3-虚拟dom的优缺点"><a href="#3-虚拟dom的优缺点" class="headerlink" title="3. 虚拟dom的优缺点"></a>3. 虚拟dom的优缺点</h2><h3 id="（1）优点："><a href="#（1）优点：" class="headerlink" title="（1）优点："></a>（1）优点：</h3><p>保证性能下限: 虚拟DOM可以经过diff找出最小差异,然后批量进行patch,这种操作虽然比不上手动优化,但是比起粗暴的DOM操作性能要好很多,因此虚拟DOM可以保证性能下限<br>无需手动操作DOM: 虚拟DOM的diff和patch都是在一次更新中自动进行的,我们无需手动操作DOM,极大提高开发效率</p><p>跨平台: 虚拟DOM本质上是JavaScript对象,而DOM与平台强相关,相比之下虚拟DOM可以进行更方便地跨平台操作,例如服务器渲染、移动端开发等等</p><h3 id="（2）缺点："><a href="#（2）缺点：" class="headerlink" title="（2）缺点："></a>（2）缺点：</h3><p>无法进行极致优化: 在一些性能要求极高的应用中虚拟DOM无法进行针对性的极致优化，比如VScode采用直接手动操作DOM的方式进行极端的性能优化</p><p><a href="https://www.zhihu.com/question/31809713">尤雨溪回答</a></p><p><a href="https://www.zhihu.com/question/29504639/answer/465603324">网易数帆</a></p><p><a href="https://www.zhihu.com/question/31809713">分析讨论</a></p><p><a href="https://blog.csdn.net/zyq51/article/details/108741558">虚拟dom的优缺点</a></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>伪类：和伪元素：：</title>
      <link href="/2021/04/05/note/html-css-mian-shi-wei-lei-he-wei-yuan-su/"/>
      <url>/2021/04/05/note/html-css-mian-shi-wei-lei-he-wei-yuan-su/</url>
      
        <content type="html"><![CDATA[<p>:是伪类，::是伪元素，例如list:nth-child(1)和list::after</p><p>伪元素的作用有</p><p>一：清除浮动 list::after{content:’’;display:block;clear:both}</p><p>二：样式布局 添加一些图标</p>]]></content>
      
      
      <categories>
          
          <category> html&amp;css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 卷 </tag>
            
            <tag> 伪类 </tag>
            
            <tag> 伪元素 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>与php的性能对比</title>
      <link href="/2021/04/04/note/node-yu-php-de-xing-neng-dui-bi/"/>
      <url>/2021/04/04/note/node-yu-php-de-xing-neng-dui-bi/</url>
      
        <content type="html"><![CDATA[<p>在性能方面，Node.js 显然赢了这一局。</p><p>由于 Node.js 遵循事件驱动的非阻塞I&#x2F;O模型，与传统的后端技术相比，Node.js 能够处理大量的服务器请求。</p><p>PHP 遵循一个阻塞模型，其中在服务器端创建多个线程来处理多个客户端请求，如果代码没有被优化，它会导致高服务器负载和响应时间</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异步 </tag>
            
            <tag> js </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>混合开发差异</title>
      <link href="/2021/04/03/note/uniapp-hun-he-kai-fa-chai-yi/"/>
      <url>/2021/04/03/note/uniapp-hun-he-kai-fa-chai-yi/</url>
      
        <content type="html"><![CDATA[<p>1.样式范围的不同<br>在小程序中(uniapp版)，组件的样式调用组件外的选择器进行组合时不能写在组件内页面的<br>例如</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.scarf</span><span class="token punctuation">&#123;</span><span class="token selector">组件外的class.component</span><span class="token punctuation">&#123;</span>    组件内的class<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把这个样式写在组件内是不行的</p><p>解决：<br>1.必须写在公共样式或主页面上<br>2.也可以去掉.scarf</p><p>小程序组件内的样式无法和组件外搭配</p><p>例如 主页面上用了 display:flex 而组件内使用flex:1 是无法进行搭配的<br>可以在主页面上对组件标签使用flex1这样生效，而H5的组件内是生效的，编译有差别</p>]]></content>
      
      
      <categories>
          
          <category> uniapp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> uniapp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>esmodule与commonjs静态加载与动态加载</title>
      <link href="/2021/04/03/note/js-mo-kuai-hua-esmodule-yu-commonjs-jing-tai-jia-zai-yu-dong-tai-jia-zai/"/>
      <url>/2021/04/03/note/js-mo-kuai-hua-esmodule-yu-commonjs-jing-tai-jia-zai-yu-dong-tai-jia-zai/</url>
      
        <content type="html"><![CDATA[<p>本文围绕js模块化介绍 commonjs 、 esmodule 和静态加载与动态加载。</p><h2 id="1-模块化"><a href="#1-模块化" class="headerlink" title="1. 模块化"></a>1. 模块化</h2><p>早期 JavaScript 开发很容易存在全局污染和依赖管理混乱问题。模块化就是把各个功能拆解成各个模块。而规范就有 commonjs 和esmodule ，我们把每一个js文件称之为模块。</p><h3 id="1-1-避免污染全局变量"><a href="#1-1-避免污染全局变量" class="headerlink" title="1.1 避免污染全局变量"></a>1.1 避免污染全局变量</h3><p>没有模块化，那么 script 内部的变量是可以相互污染的。比如有一种场景，有.&#x2F;index.js 文件和 .&#x2F;list.js 文件为 功能A 开发的，.&#x2F;home.js 为 功能B 开发的。他们都有name变量，就会造成变量污染，可能达不到相应的预期。</p><h3 id="1-2-依赖管理"><a href="#1-2-依赖管理" class="headerlink" title="1.2 依赖管理"></a>1.2 依赖管理</h3><p>依赖管理也是一个难以处理的问题。正常情况下，执行 js 的先后顺序就是 script 标签排列的前后顺序。那么如何三个 js 之间有依赖关系，那么应该如何处理呢？如果加载三个js未免太过紊乱，那么就需要模块化。</p><h2 id="2-Commonjs的基本使用"><a href="#2-Commonjs的基本使用" class="headerlink" title="2. Commonjs的基本使用"></a>2. Commonjs的基本使用</h2><p>commonjs 的提出，弥补 Javascript 对于模块化，没有统一标准的缺陷。nodejs 借鉴了 commonjs 的 Module ，实现了良好的模块化管理。</p><h3 id="2-1-导出"><a href="#2-1-导出" class="headerlink" title="2.1 导出"></a>2.1 导出</h3><p>CommonJs使用 module.exports 导出， 但有 <strong>对象</strong> 和 <strong>属性</strong> 两种写法。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 导出一个对象</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"z"</span><span class="token punctuation">,</span>    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span>    <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">"male"</span><span class="token punctuation">&#125;</span><span class="token comment">// 导出某个属性</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"z"</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token keyword">null</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token keyword">undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-直接导出"><a href="#2-2-直接导出" class="headerlink" title="2.2 直接导出"></a>2.2 直接导出</h3><p>导出也可以省略module关键字</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">exports<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">""</span>exports<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">"male"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-3-导入"><a href="#2-3-导入" class="headerlink" title="2.3 导入"></a>2.3 导入</h3><p>CommonJs中使用require语法可以导入 <strong>整个对象</strong>，如果想要单个的值，可以通过 <strong>解构</strong> 对象来获取。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./index.js"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token comment">// &#123; name: "z", age: 24 &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//index.js</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"z"</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">24</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-4-动态导入"><a href="#2-4-动态导入" class="headerlink" title="2.4 动态导入"></a>2.4 动态导入</h3><p>CommonJs支持动态导入，指的就是运行中加载，那么我们使用require语法就有如下写法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> lists <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"./index.js"</span><span class="token punctuation">,</span> <span class="token string">"./config.js"</span><span class="token punctuation">]</span>lists<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">require</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 动态导入</span><span class="token keyword">if</span> <span class="token punctuation">(</span>lists<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">require</span><span class="token punctuation">(</span>lists<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 动态导入</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-导入的值是拷贝的"><a href="#2-5-导入的值是拷贝的" class="headerlink" title="2.5 导入的值是拷贝的"></a>2.5 导入的值是拷贝的</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token punctuation">&#123;</span> num<span class="token punctuation">,</span> add <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./index.js"</span><span class="token punctuation">)</span>num <span class="token operator">=</span> <span class="token number">10</span><span class="token comment">//修改对其它引用不造成影响</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//index.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">num</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token operator">++</span> <span class="token keyword">this</span><span class="token punctuation">.</span>num     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-ES-Module"><a href="#3-ES-Module" class="headerlink" title="3. ES Module"></a>3. ES Module</h2><p>es6提出了ESModule。</p><h3 id="3-1-导出"><a href="#3-1-导出" class="headerlink" title="3.1 导出"></a>3.1 导出</h3><p>语法上 ESModule 有两种导出，体现在关键字上，单个导出(export)、默认导出(export default)。单个导出在导入时不像CommonJs一样直接把值全部导入进来了，默认导出就是全部直接导入进来，当然Es Module中也可以导出任意类型的值。</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">&#x2F;&#x2F; 单个导出export const name &#x3D; &quot;z&quot;export const age &#x3D; 24&#x2F;&#x2F; 默认导出export default &#123;    fn() &#123;&#125;，    msg: &quot;z&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-导入"><a href="#3-2-导入" class="headerlink" title="3.2 导入"></a>3.2 导入</h3><p>(1)单个导入，使用import…from语法带花括号{} ，<strong>注意不是解构只是语法相似</strong>。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> age <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./index.js'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> name <span class="token keyword">as</span> zname<span class="token punctuation">,</span> age <span class="token keyword">as</span> zage<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./index.js'</span><span class="token punctuation">;</span><span class="token comment">//重命名</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> idx <span class="token keyword">from</span> <span class="token string">'./index.js'</span><span class="token punctuation">;</span><span class="token comment">//如果想合并所有单个就这么写</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token comment">// "z" 24</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// index.js</span><span class="token keyword">export</span> <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">"z"</span><span class="token keyword">export</span> <span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">24</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>(2)默认导入需要重命名</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 匿名导出的，要重命名</span><span class="token keyword">import</span> getName <span class="token keyword">from</span> <span class="token string">'./index.js'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// index.js</span><span class="token keyword">const</span> Programmer <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'z'</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">24</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> Programmer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-3-混合导入-注意"><a href="#3-3-混合导入-注意" class="headerlink" title="3.3 混合导入 (注意)"></a>3.3 混合导入 (注意)</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//那么先导msg</span><span class="token keyword">import</span> msg<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> age <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./index.js'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token comment">// &#123; msg: "z" &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//如果导出同时用了export default 和 export</span><span class="token keyword">export</span> <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">"z"</span><span class="token keyword">export</span> <span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">24</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">"z"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-导入的值是引用地址"><a href="#3-4-导入的值是引用地址" class="headerlink" title="3.4 导入的值是引用地址"></a>3.4 导入的值是引用地址</h3><p>export导出的值是值的引用，而且导入的值，不能进行修改也就是只读状态。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> num<span class="token punctuation">,</span> add <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./index.js"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment">// 0</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment">// 1</span>num <span class="token operator">=</span> <span class="token number">10</span> <span class="token comment">// 抛出错误</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//index.js</span><span class="token keyword">export</span> <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token operator">++</span> num<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-5-Es-Module静态分析"><a href="#3-5-Es-Module静态分析" class="headerlink" title="3.5 Es Module静态分析"></a>3.5 Es Module静态分析</h3><p>就是Es Module语句 import只能声明在该文件的最顶部，不能动态加载语句，Es Module 语句运行在代码编译时。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">import</span> xxx <span class="token keyword">from</span> <span class="token string">'XXX'</span> <span class="token comment">// 报错</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="4-缓存"><a href="#4-缓存" class="headerlink" title="4. 缓存"></a>4. 缓存</h2><p>不管是CommonJs还是Es Module都不会重复导入，就是只要该文件内加载过一次这个文件了，再次导入一次是不会生效的。</p><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p>commonjs是动态加载，同步执行；esmodule是静态分析，动态引入（esmodule也可以动态导入，在es2020增加基于 promise 的 import() 函数）</p><p>commonjs的导出方式是 有属性和对象写法的 module.exports（可省略module）；esmodule的导入方式是 export 和 export default </p><p>commonjs的导入方式是 require()；esmodule的导入方式是 import…from；</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> 模块化 </tag>
            
            <tag> 动态加载 </tag>
            
            <tag> 静态分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见的行内元素、块级元素、行内块元素</title>
      <link href="/2021/04/02/note/html-css-mian-shi-xing-nei-yuan-su-kuai-ji-yuan-su-xing-nei-kuai-yuan-su/"/>
      <url>/2021/04/02/note/html-css-mian-shi-xing-nei-yuan-su-kuai-ji-yuan-su-xing-nei-kuai-yuan-su/</url>
      
        <content type="html"><![CDATA[<p>行内元素：span, i , a , img , input , b , small, strong ,button, input, label, select, textarea</p><p>块元素：div、p、h1-h6、header、footer、main、article、aside、section、form、ul、li</p><p>空元素:hr、br、img、input、source。通常在一个空元素上使用一个闭标签是无效的。</p><p>行内块元素：img、input,行内元素中特殊的标签,可以对它们设置宽高和对齐属性，称它们为行内块元素。</p><p>其它疑点：p标签和div都是块级标签，有什么区别。p标签是段落标签有上下margin</p><p>p(段落)元素是块级的,前后断行,而且还要再隔一行.相当于断两行。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> html&amp;css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sort的使用</title>
      <link href="/2021/03/27/note/js-mian-shi-shu-zu-sort-de-shi-yong/"/>
      <url>/2021/03/27/note/js-mian-shi-shu-zu-sort-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>在js中我们可以对数组元素使用sort方法进行排序，<strong>该方法不进行拷贝而是直接影响原数组</strong>，使用如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token comment">//打印[0, 1, 23, 3, 34, 56]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>发现结果竟然与预想不一样， 因为在使用sort排序的时候它总会使用第一个字符的ASCII值来进行比较排序。</p><h2 id="1-语法："><a href="#1-语法：" class="headerlink" title="1. 语法："></a>1. 语法：</h2><p>arr.sort([compareFunction])</p><p>参数解析：compareFunction(可选)用来指定按某种顺序进行排列的函数，该函数有两个参数：</p><ul><li><p>firstEl 第一个比较的元素</p></li><li><p>secondEl 第二个比较的元素</p></li></ul><h2 id="2-升序"><a href="#2-升序" class="headerlink" title="2. 升序"></a>2. 升序</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//箭头函数简写</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token operator">=></span>a <span class="token operator">-</span> b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>等价于</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-降序"><a href="#3-降序" class="headerlink" title="3. 降序"></a>3. 降序</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> b <span class="token operator">-</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>等价于</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原理"><a href="#4-原理" class="headerlink" title="4. 原理"></a>4. 原理</h2><p><strong>其实他们原理一样的 回调函数形参a,b分别代表前后项。数值转为boolean类型时，true代表交换位置，否则不交换。</strong></p><p>简写形式：</p><ul><li>a-b 如果&gt;0 转换为true 返回就会进行交换</li><li>a-b 如果&lt;&#x3D;0 转换为false 返回其位置保持不变</li></ul><p>复杂形式：</p><ul><li>如果return返回-1,其位置保持不变</li><li>如果return返回0,其位置保持不变</li><li>如果return返回1,就会进行交换</li></ul><h2 id="5-对象数组排序"><a href="#5-对象数组排序" class="headerlink" title="5. 对象数组排序"></a>5. 对象数组排序</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> items <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Edward'</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">21</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Sharpe'</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">37</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'And'</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">45</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'The'</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">12</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Magnetic'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">//如果对象属性缺失会引发排序错误</span>    <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Zeros'</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">37</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//数值比较</span>items<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>value <span class="token operator">-</span> b<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-字符串排序"><a href="#6-字符串排序" class="headerlink" title="6. 字符串排序"></a>6. 字符串排序</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 字符串比较</span>items<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//调用该方法的字符串转为大写形式并返回</span>    <span class="token keyword">var</span> nameA <span class="token operator">=</span> a<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> nameB <span class="token operator">=</span> b<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nameA <span class="token operator">&lt;</span> nameB<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nameA <span class="token operator">></span> nameB<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flex:1与flex:auto</title>
      <link href="/2021/03/23/note/html-css-te-xing-flex1-yu-flexauto/"/>
      <url>/2021/03/23/note/html-css-te-xing-flex1-yu-flexauto/</url>
      
        <content type="html"><![CDATA[<p>flex是三个属性flex-grow、flex-shrink、flex-basis的简写形式：</p><p>其中flex-grow代表增长系数 </p><p>其中flex-shrink代表收缩系数 </p><p>其中flex-basis代表主轴方向上的初始大小(也就是伸缩之前的基础大小)。</p><h2 id="1-flex-1-意味着什么？"><a href="#1-flex-1-意味着什么？" class="headerlink" title="1. flex:1 意味着什么？"></a>1. flex:1 意味着什么？</h2><p>通过chrome浏览器控制台可知</p><p>flex: 1 &#x3D;&#x3D;&#x3D; flex-grow: 1; flex-shrink: 1; flex-basis: 0%;</p><p>flex-basis: 0%;意味着不管这些项目盒子本身的大小如何，都会平分剩余空间</p><h2 id="2-flex-auto-意味着什么？"><a href="#2-flex-auto-意味着什么？" class="headerlink" title="2. flex:auto 意味着什么？"></a>2. flex:auto 意味着什么？</h2><p>通过chrome浏览器控制台可知</p><p>flex: 1 &#x3D;&#x3D;&#x3D; flex-grow: 1; flex-shrink: 1; flex-basis:auto;</p><p>flex-basis:auto;意味着会在这些项目盒子本身大小的基础之上平分剩余空间</p><h2 id="3-flex-1与flex-auto的对比"><a href="#3-flex-1与flex-auto的对比" class="headerlink" title="3. flex:1与flex:auto的对比"></a>3. flex:1与flex:auto的对比</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">.father</span> <span class="token punctuation">&#123;</span>        <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.father .item</span> <span class="token punctuation">&#123;</span>        <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.father .item:nth-child(2n)</span> <span class="token punctuation">&#123;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">flex-basis</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>偶数item会比其它项目多200px宽，因为它的flex-basis是auto，会在200px的基础上分配父元素空间，而其它项目的flex-basis则是0%，没有宽度基础。如下图所示</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.father .item:nth-child(2n)</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">flex-basis</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://qiniu.guet.link/asset/202210071659585.png"></p><h2 id="4-参考："><a href="#4-参考：" class="headerlink" title="4. 参考："></a>4. 参考：</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-grow">https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-grow</a></p>]]></content>
      
      
      <categories>
          
          <category> html&amp;css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flex </tag>
            
            <tag> css </tag>
            
            <tag> 卷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cmd和bash的区别</title>
      <link href="/2021/03/18/note/yun-wei-gai-nian-cmd-he-bash-de-qu-bie/"/>
      <url>/2021/03/18/note/yun-wei-gai-nian-cmd-he-bash-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<p>cmd和bash分别是window和linux的命令。可能有人会疑惑为什么要将他们两个进行对比，因为经常接触这两个系统的人会发现，他们在一些命令上很相似，如cd xx&#x2F;xx。为了搞清楚他们的区别，我们还需要shell。</p><h2 id="1-shell"><a href="#1-shell" class="headerlink" title="1. shell"></a>1. shell</h2><p>Shell（也称为壳层）在计算机科学中指“为用户提供用户界面”的软件，通常指的是命令行界面的解析器。一般来说，这个词是指操作系统中提供访问内核所提供之服务的程序。Shell也用于泛指所有为用户提供操作界面的程序，也就是程序和用户交互的层面。因此与之相对的是内核（英语：Kernel），内核不提供和用户的交互功能。shell简单理解为（SHELL PROGRAM）外部程序。</p><h2 id="2-cmd"><a href="#2-cmd" class="headerlink" title="2. cmd"></a>2. cmd</h2><p>cmd是Windows命令提示符是Microsoft DOS操作系统的原始shell。一直到Windows+10内部版本14791（这个版本Microsoft将PowerShell作为默认选项）以前，CMD才是默认shell程序。CMD是Microsoft取代的原始MS-DOS操作系统的最后残留物之一。</p><p><strong>Windows PowerShell</strong>是新的Microsoft Shell，它将旧的CMD功能与具有内置系统管理功能的scripting&#x2F;cmdlet 指令集结合在一起。PowerShell cmdlet允许用户和管理员使用可重复使用的脚本来自动化复杂的任务。系统管理员通过使用PowerShell自动化管理任务来节省大量时间，能够通过完全访问COM和WMI在远程和本地Windows系统上执行任务。</p><h2 id="3-bash"><a href="#3-bash" class="headerlink" title="3. bash"></a>3. bash</h2><p>在linux&#x2F;unix平台上，Shell有多种实现，目前多数Linux发行版本默认是bash，即Bourne Again shell。 </p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>cmd和bash和一种平行的关系，都是不同系统下的shell。他们之间语法上会相似，需要多总结。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zh.m.wikipedia.org/wiki/%E6%AE%BC%E5%B1%A4">https://zh.m.wikipedia.org/wiki/%E6%AE%BC%E5%B1%A4</a></p><p><a href="https://www.cnblogs.com/lishanyang/p/9224988.html">https://www.cnblogs.com/lishanyang/p/9224988.html</a></p><p><a href="https://www.zhihu.com/question/43134881/answer/1834076537">https://www.zhihu.com/question/43134881/answer/1834076537</a></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概念 </tag>
            
            <tag> cmd </tag>
            
            <tag> bash </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组方法slice和splice的使用与区别</title>
      <link href="/2021/03/14/note/js-mian-shi-s-shu-zu-fang-fa-slice-he-splice-de-shi-yong-yu-qu-bie/"/>
      <url>/2021/03/14/note/js-mian-shi-s-shu-zu-fang-fa-slice-he-splice-de-shi-yong-yu-qu-bie/</url>
      
        <content type="html"><![CDATA[<h2 id="（1）slice"><a href="#（1）slice" class="headerlink" title="（1）slice"></a>（1）slice</h2><ul><li>slice是用来截取的</li><li>返回一个新数组，不会改变原数组，属于浅拷贝<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从下标0开始，包含start参数，不包含end参数，返回[2,3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从下标0开始到倒数第1个，但不包含倒数第一个，返回[1,2,3,4]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从倒数第3个开始到倒数第1个，但不包含倒数第一个，返回[3,4]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3,4,5 //倒数第三个往后</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="（2）splice"><a href="#（2）splice" class="headerlink" title="（2）splice"></a>（2）splice</h2><ul><li>splice是用来插入、删除、替换原数组</li><li>会返回被删除的元素</li><li>会改变原数组，不属于浅拷贝<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//第一个参数是开始的位置，正数为数组下标，负数n是倒数第n个</span><span class="token comment">//第二个参数是删除的个数</span><span class="token comment">//第三四五n个参数是插入的元素</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//删除最后一个元素 返回5</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'替换'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//替换倒数第一个</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'插入'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//length是没有参数，那么就是新增元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> 数组 </tag>
            
            <tag> splice </tag>
            
            <tag> slice </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flexd导致子元素高度变化</title>
      <link href="/2021/03/05/note/html-css-bug-flexd-dao-zhi-zi-yuan-su-gao-du-bian-hua/"/>
      <url>/2021/03/05/note/html-css-bug-flexd-dao-zhi-zi-yuan-su-gao-du-bian-hua/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">.f</span> <span class="token punctuation">&#123;</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.f .s</span> <span class="token punctuation">&#123;</span>            <span class="token property">align-self</span><span class="token punctuation">:</span> stretch<span class="token punctuation">;</span>            <span class="token comment">/* 拉长 */</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    这是flex的特性 默认每个flex项目的 align-self: stretch;解决办法是设置align-iten:xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> html&amp;css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flex </tag>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-组件封装技巧学习</title>
      <link href="/2021/03/02/note/vue-zu-jian-feng-zhuang-ji-qiao-xue-xi/"/>
      <url>/2021/03/02/note/vue-zu-jian-feng-zhuang-ji-qiao-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概括"><a href="#1-概括" class="headerlink" title="1. 概括"></a>1. 概括</h2><ul><li>$attrs 简化多层组件之间props传值；</li><li>$listeners 简化多层组件之间事件传递；</li><li>$Slots 更多拓展自定义组件传值，包括自定义html元素，及对象；</li><li>props validator 增强组件传值稳健性，可自定义业务代码效验参数；</li><li>$refs 对外提供API 增强组件灵活度和可控性；</li></ul><h2 id="2-详细介绍"><a href="#2-详细介绍" class="headerlink" title="2. 详细介绍"></a>2. 详细介绍</h2><h3 id="2-1-attrs-简化多层组件之间props传值"><a href="#2-1-attrs-简化多层组件之间props传值" class="headerlink" title="2.1 $attrs 简化多层组件之间props传值"></a>2.1 $attrs 简化多层组件之间props传值</h3><p>封装业务组件的常规手段需要声明props，但是一个个声明属性传递太麻烦</p><p><img src="https://qiniu.guet.link/asset/202211232330863.png"></p><p>这时我们可以使用$attrs </p><p><img src="https://qiniu.guet.link/asset/202211232332512.png"></p><p>这里可以看到官方也是推荐我们使用这个属性来进行封装的，注意不能生命prop。</p><p>假如我们在my-input中的created生命周期函数中打印this.attrs,会看到刚刚传递的clearable</p><p><img src="https://qiniu.guet.link/asset/202211232335160.png"></p><p>那么要怎么给封装组件使用呢？很简单v-bind&#x3D;”$attrs” 在原子组件上就可以应用了</p><p><img src="https://qiniu.guet.link/asset/202211232337416.png"></p><p>可以看到clearable已经给原子组件应用小叉叉了</p><p><img src="https://qiniu.guet.link/asset/202211232338466.png"></p><p>这里需要注意vue会将被传入但未生命prop的元素作为html元素的属性放在跟元素上，所以需要设置inheritAttrs为false</p><p><img src="https://qiniu.guet.link/asset/202211232342035.png"></p><h3 id="2-2-listeners-简化多层组件之间事件传递"><a href="#2-2-listeners-简化多层组件之间事件传递" class="headerlink" title="2.2 $listeners 简化多层组件之间事件传递"></a>2.2 $listeners 简化多层组件之间事件传递</h3><p>业务组件将原子组件的事件传递给父组件，我们常规是这样写</p><p>父组件：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-input</span> <span class="token attr-name">@clear</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clearCallFn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-input</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token operator">...</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token function">clearCallFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token operator">...</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>业务组件：<br><img src="https://qiniu.guet.link/asset/202211240000815.png"></p><p>但还是上面说的，太麻烦，所以vue给我们提供了一个好方法，利用listeners属性（vue3迁移到了attrs）</p><p>在my-input中给原子属性使用$listeners转发父组件的监听进去，父组件的写法不变就可以。</p><p><img src="https://qiniu.guet.link/asset/202211240026930.png"></p><p>需要注意的是不能同时使用两种写法（如下边蓝色框框），否则会调用两次。<br><img src="https://qiniu.guet.link/asset/202211240037288.png"></p><h3 id="2-3-slots和-scopedSlots的使用"><a href="#2-3-slots和-scopedSlots的使用" class="headerlink" title="2.3 $slots和$scopedSlots的使用"></a>2.3 $slots和$scopedSlots的使用</h3><h4 id="（1）-slots"><a href="#（1）-slots" class="headerlink" title="（1）$slots"></a>（1）$slots</h4><p>这个属性包含了给父组件的非作用域插槽</p><p><img src="https://qiniu.guet.link/asset/202211240042529.png"></p><p>看一下有什么值</p><p><img src="https://qiniu.guet.link/asset/202211240329093.png"></p><p>for循环拿到原子组件插槽再定义业务组件的插槽</p><p><img src="https://qiniu.guet.link/asset/202211240336200.png"></p><h4 id="（2）-scopedSlots"><a href="#（2）-scopedSlots" class="headerlink" title="（2）$scopedSlots"></a>（2）$scopedSlots</h4><p><img src="https://qiniu.guet.link/asset/202211240337741.png"></p><p>如果想使用作用域插槽，那么使用scopedSlots看下图scopedSlots循环</p><p><img src="https://qiniu.guet.link/asset/202211240352423.png"></p><h3 id="2-4-props-validator"><a href="#2-4-props-validator" class="headerlink" title="2.4 props validator"></a>2.4 props validator</h3><p>一般我们会用对象的方式来生命prop，我们可以在对象中指定prop的默认值，也可以指定类型来对prop进行验证。</p><p>一个更灵活的方式是，传入并编写一个验证函数。</p><p>prop会作为一个参数传入该函数，函数返回false值时会抛出控制台警告，适合验证枚举值</p><p>如下例子：</p><p>在子组件有props</p><p><img src="https://qiniu.guet.link/asset/202211240358165.png"></p><p>在父组件故意传错</p><p><img src="https://qiniu.guet.link/asset/202211240359707.png"></p><p>会发现控制台</p><p><img src="https://qiniu.guet.link/asset/202211240400208.png"></p><h3 id="2-5-refs"><a href="#2-5-refs" class="headerlink" title="2.5 $refs"></a>2.5 $refs</h3><p>我们知道$refs可以访问被引用的组件，并访问其实例方法，但是如果我们封装了业务组件，主页面对原子组件的调用往往可读性较差，如下：</p><p><img src="https://qiniu.guet.link/asset/202211240409805.png"></p><p>那么其实我们可以在业务组件methods写一个api来暴露引用，如下：</p><p><img src="https://qiniu.guet.link/asset/202211240410241.png"></p><p>这时候我们就可以直接在主页面调用业务组件暴露出来的api，以此来调用原子组件方法。</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> vue </tag>
            
            <tag> 封装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js的对象合并总结</title>
      <link href="/2021/03/02/note/js-mian-shi-dui-xiang-he-bing/"/>
      <url>/2021/03/02/note/js-mian-shi-dui-xiang-he-bing/</url>
      
        <content type="html"><![CDATA[<h2 id="1-拓展运算符（…）"><a href="#1-拓展运算符（…）" class="headerlink" title="1. 拓展运算符（…）"></a>1. 拓展运算符（…）</h2><p>ES6入门中是这样说的:</p><blockquote><p>对象的扩展运算符（…）用于取出参数对象的所有可遍历属性，拷贝到当前对象之中。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'陈伟霆'</span><span class="token punctuation">,</span>    <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">'男'</span><span class="token punctuation">,</span>    <span class="token literal-property property">hobby</span><span class="token operator">:</span> <span class="token string">'唱歌'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'陈伟霆'</span><span class="token punctuation">,</span>    <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">'男'</span><span class="token punctuation">,</span>    <span class="token literal-property property">hobby</span><span class="token operator">:</span> <span class="token string">'跳舞'</span><span class="token punctuation">,</span>    <span class="token literal-property property">nationality</span><span class="token operator">:</span> <span class="token string">'中国'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span>obj1<span class="token punctuation">,</span> <span class="token operator">...</span>obj2<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &#123; name: '陈伟霆', gender: '男', hobby: '跳舞', nationality: '中国' &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-Object-assign"><a href="#2-Object-assign" class="headerlink" title="2.Object.assign()"></a>2.Object.assign()</h2><p>MDN:</p><blockquote><p>Object.assign() 方法用于将所有可枚举属性的值从一个或多个源对象分配到目标对象。它将返回目标对象。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'陈伟霆'</span><span class="token punctuation">,</span>    <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">'男'</span><span class="token punctuation">,</span>    <span class="token literal-property property">hobby</span><span class="token operator">:</span> <span class="token string">'唱歌'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'陈伟霆'</span><span class="token punctuation">,</span>    <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">'男'</span><span class="token punctuation">,</span>    <span class="token literal-property property">hobby</span><span class="token operator">:</span> <span class="token string">'跳舞'</span><span class="token punctuation">,</span>    <span class="token literal-property property">nationality</span><span class="token operator">:</span> <span class="token string">'中国'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token keyword">let</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &#123; name: '陈伟霆', gender: '男', hobby: '跳舞', nationality: '中国' &#125;</span><span class="token comment">//obj !== obj2 浅拷贝</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数组也是对象，你可以对数组使用，但需要注意的是数组的index往往都是一样的，所以合并结果往往只有后一参数。</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js的数组合并总结</title>
      <link href="/2021/03/02/note/js-mian-shi-shu-zu-he-bing/"/>
      <url>/2021/03/02/note/js-mian-shi-shu-zu-he-bing/</url>
      
        <content type="html"><![CDATA[<h2 id="1-扩展操作符"><a href="#1-扩展操作符" class="headerlink" title="1. 扩展操作符"></a>1. 扩展操作符</h2><p>使用ES6语法的拓展运算符：这个方法也是创建一个新数组</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> newArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>array<span class="token punctuation">,</span><span class="token operator">...</span>elements<span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArray<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["a", "b", 0, 1, 2]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-array-concat"><a href="#2-array-concat" class="headerlink" title="2. array.concat()"></a>2. array.concat()</h2><p>使用concat方法：这个方法不是添加到现有数组，而是创建并返回一个新数组。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> elements <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">var</span> newArray <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>elements<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//['a', 'b']</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArray<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ["a", "b", 0, 1, 2]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-array-push-apply"><a href="#3-array-push-apply" class="headerlink" title="3. array.push() + apply()"></a>3. array.push() + apply()</h2><p>使用Apply方法：这个方法是将数组各项添加到另一个数组当中，是一种改变原数组的方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> elements <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> elements<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["a", "b", 0, 1, 2]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-array-push-拓展运算符"><a href="#4-array-push-拓展运算符" class="headerlink" title="4. array.push() + 拓展运算符"></a>4. array.push() + 拓展运算符</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> heroes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Batman'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> heroes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'Superman'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> heroes<span class="token punctuation">;</span> <span class="token comment">// ['Batman', 'Superman']</span><span class="token keyword">const</span> heroes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Batman'</span><span class="token punctuation">,</span> <span class="token string">'Superman'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> villains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Joker'</span><span class="token punctuation">,</span> <span class="token string">'Bane'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> heroes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>villains<span class="token punctuation">)</span><span class="token punctuation">;</span> heroes<span class="token punctuation">;</span> <span class="token comment">// ['Batman', 'Superman', 'Joker', 'Bane']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-unshift-头插法"><a href="#5-unshift-头插法" class="headerlink" title="5. unshift 头插法"></a>5. unshift 头插法</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//定义数组</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//返回[0]</span>a<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//一次性增加两个元素</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//返回[1,2,0]</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//增加元素1</span>a<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//增加元素2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//返回[2,1,0]</span>在数组末尾插入元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6"><a href="#6" class="headerlink" title="6."></a>6.</h2>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>promise与异步的总结-await-async</title>
      <link href="/2021/03/01/note/js-promise-yu-yi-bu-de-zong-jie-await-async/"/>
      <url>/2021/03/01/note/js-promise-yu-yi-bu-de-zong-jie-await-async/</url>
      
        <content type="html"><![CDATA[<p>JS异步的发展历程是callback-&gt;promise&#x2F;generator-&gt;async&#x2F;await</p><h2 id="1-Promise"><a href="#1-Promise" class="headerlink" title="1. Promise"></a>1. Promise</h2><h3 id="1-1-带着问题看-Promise"><a href="#1-1-带着问题看-Promise" class="headerlink" title="1.1 带着问题看 Promise"></a>1.1 带着问题看 Promise</h3><ol><li>了解 Promise 吗？</li><li>Promise 解决的痛点是什么？</li><li>Promise 解决的痛点还有其他方法可以解决吗？如果有，请列举。</li><li>Promise 如何使用？</li><li>Promise 常用的方法有哪些？它们的作用是什么？</li><li>Promise 在事件循环中的执行过程是怎样的？</li><li>Promise 的业界实现都有哪些？</li><li>能不能手写一个 Promise 的 polyfill。</li></ol><h3 id="1-2-Promise-出现的原因？"><a href="#1-2-Promise-出现的原因？" class="headerlink" title="1.2 Promise 出现的原因？"></a>1.2 Promise 出现的原因？</h3><p>在 Promise 出现以前，我们处理一个异步网络请求，大概是这样：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 请求 代表 一个异步网络调用。</span><span class="token comment">// 请求结果 代表网络请求的响应。</span><span class="token function">请求1</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">请求结果<span class="token number">1</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    处理请求结果<span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看起来还不错。<br>但是，需求变化了，我们需要根据第一个网络请求的结果，再去执行第二个网络请求，代码大概如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">请求1</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">请求结果<span class="token number">1</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">请求2</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">请求结果<span class="token number">2</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        处理请求结果<span class="token number">2</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样看起来就要复杂得多，于是当这种情况增加时，我们就会陷入<strong>回调地域</strong>。<strong>回调地域</strong>会让我们的代码非常难维护。</p><p>于是 Promise 规范诞生了，并且在业界有了很多实现来解决回调地狱的痛点。比如业界著名的 Q 和 bluebird，bluebird 甚至号称运行最快的类库。</p><blockquote><p>看官们看到这里，对于上面的问题 2 和问题 7 ，心中是否有了答案呢。^_^</p></blockquote><h3 id="1-3-什么是-Promise"><a href="#1-3-什么是-Promise" class="headerlink" title="1.3 什么是 Promise"></a>1.3 什么是 Promise</h3><p>Promise 是异步编程的一种解决方案，比传统的异步解决方案【回调函数】和【事件】更合理、更强大。现已被 ES6 纳入进规范中。</p><h4 id="1-代码书写比较"><a href="#1-代码书写比较" class="headerlink" title="(1) 代码书写比较"></a>(1) 代码书写比较</h4><p>还是使用上面的网络请求例子，我们看下 Promise 的常规写法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>请求<span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token function">请求2</span><span class="token punctuation">(</span>请求结果<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token function">请求3</span><span class="token punctuation">(</span>请求结果<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token function">请求4</span><span class="token punctuation">(</span>请求结果<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token function">请求5</span><span class="token punctuation">(</span>请求结果<span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token function">处理异常</span><span class="token punctuation">(</span>异常信息<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>比较一下这种写法和上面的回调式的写法。我们不难发现，Promise 的写法更为直观，并且能够在外层捕获异步函数的异常信息。</p><h4 id="2-API"><a href="#2-API" class="headerlink" title="(2) API"></a>(2) API</h4><p>Promise 的常用 API 如下：</p><ul><li>Promise.resolve(value)<blockquote><p>类方法，不需要return，该方法返回一个以 value 值解析后的 Promise 对象<br>(1) 如果这个值是个 thenable（即带有 then 方法），返回的 Promise 对象会“跟随”这个 thenable 的对象，采用它的最终状态（指 resolved&#x2F;rejected&#x2F;pending&#x2F;settled）。<br>(2) 传入Promise返回Promise本身。<br>(3) 其他情况以该值为成功状态返回一个 Promise 对象。</p></blockquote></li></ul><p>上面是 resolve 方法的解释，传入不同类型的 value 值，返回结果也有区别。这个 API 比较重要，建议大家通过练习一些小例子，并且配合上面的解释来熟悉它。如下几个小例子：</p><p>传入promise返回promise本身。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> p0 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> p1 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>p0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回为true，返回的 Promise 即是 入参的 Promise 对象。</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p0 <span class="token operator">===</span> p1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>传入 thenable 对象，返回 Promise 对象跟随 thenable 对象的最终状态。</p><blockquote><p>ES6 Promises 里提到了 Thenable 这个概念，简单来说它就是一个非常类似 Promise 的东西。最简单的例子就是 jQuery.ajax，它的返回值就是 thenable 对象。但是要谨记，并不是只要实现了 then 方法就一定能作为 Promise 对象来使用。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//如果传入的 value 本身就是 thenable 对象，返回的 promise 对象会跟随 thenable 对象的状态。</span><span class="token keyword">let</span> promise <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">'/test/test.json'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => promise对象</span>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其它情况,返回一个状态已变成 resolved 的 Promise 对象。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> p1 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印p1 可以看到p1是一个状态置为resolved的Promise对象</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token comment">//123</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>Promise.reject</p><blockquote><p>类方法，且与 resolve 唯一的不同是，返回的 promise 对象的状态为 rejected。</p></blockquote></li><li><p>Promise.prototype.then</p><blockquote><p>实例方法，可能需要return，可以设置两个参数，为 Promise 两种状态注册回调函数，函数形式：fn(vlaue){}，value 是上一个任务的返回结果，then 中的函数一定要 return 一个结果或者一个新的 Promise 对象，才可以让之后的then 回调接收。</p></blockquote></li></ul><p><a href="https://juejin.cn/post/7052942288581820446">关于.then 的各种输出情况，点这</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//可设置两个参数 p.then(onFulfilled[, onRejected]);</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"成功"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token parameter">error</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//成功</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>Promise.prototype.catch<blockquote><p>该catch()方法处理Promise被拒绝的情况。它的行为与调用Promise.prototype.then(undefined, onRejected)相同。这意味着 onRejected即使您想回退到一个 undefined结果值，您也必须提供一个函数——例如obj.catch(() &#x3D;&gt; {})。</p></blockquote></li></ul><blockquote><p>注意因为抛出异常会返回rejected状态，所以catch也能捕获异常。可以搭配then完成链式操作</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//（1）基本使用</span>Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">"失败"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//失败</span><span class="token comment">//等同于</span>Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">"失败"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span><span class="token parameter">error</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//（2）搭配then使用</span><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//成功</span>  <span class="token keyword">throw</span> <span class="token string">'异常信息'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'跳过'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 没有resolved状态，跳过</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 异常信息</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>Promise.prototype.finally</p><blockquote><p>finally()返回一个方法Promise。在结束时，无论结果是否被履行或被拒绝，都会执行指定的功能完成。这为在Promise成功后都需要执行的代码提供了一种方式。这同样的语句需要在then()和catch()中各写一次的情况。</p></blockquote></li><li><p>Promise.race</p><blockquote><p>类方法，多个 Promise 任务同时执行，返回最先执行结束的 Promise 任务的结果，不管这个 Promise 结果是成功还是失败。</p></blockquote></li><li><p>Promise.all</p><blockquote><p>类方法，多个 Promise 任务同时执行。<br>如果全部成功执行，则以数组的方式返回所有 Promise 任务的执行结果。 如果有一个 Promise 任务 rejected，则只返回 rejected 任务的结果。</p></blockquote></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> promise1 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> promise2 <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span><span class="token keyword">const</span> promise3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>promise1<span class="token punctuation">,</span> promise2<span class="token punctuation">,</span> promise3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">values</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// expected output: Array [3, 42, "foo"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>…</li></ul><blockquote><p>以上便是常用的API了</p></blockquote><h4 id="3-链式操作"><a href="#3-链式操作" class="headerlink" title="(3) 链式操作"></a>(3) 链式操作</h4><p>出门上班，想自己做饭但时间不够，那么把事情交给保姆：</p><ul><li>你先去超市买菜。</li><li>用超市买回来的菜做饭。</li><li>将做好的饭菜送到我单位。</li><li>送到单位后打电话告诉我。</li></ul><p>上面三步都是需要消耗时间的，我们可以理解为三个异步任务。利用 Promise 的写法来书写这个操作：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">买菜</span><span class="token punctuation">(</span><span class="token parameter">resolve，reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'西红柿'</span>、<span class="token string">'鸡蛋'</span>、<span class="token string">'油菜'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">做饭</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//对做好的饭进行下一步处理。</span>        <span class="token function">resolve</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">主食</span><span class="token operator">:</span> <span class="token string">'米饭'</span><span class="token punctuation">,</span>            <span class="token literal-property property">菜</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'西红柿炒鸡蛋'</span>、<span class="token string">'清炒油菜'</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">送饭</span><span class="token punctuation">(</span><span class="token parameter">resolve，reject</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//对送饭的结果进行下一步处理</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'送达'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">电话通知我</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//电话通知我后的下一步处理</span>    给保姆加<span class="token number">100</span>块钱奖金<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么在执行时，有以下链式操作</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 告诉保姆帮我做几件连贯的事情，先去超市买菜</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>买菜<span class="token punctuation">)</span><span class="token comment">//用买好的菜做饭</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">买好的菜</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>做饭<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//把做好的饭送到老婆公司</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">做好的饭</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>送饭<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//送完饭后打电话通知我</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">送饭结果</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token function">电话通知我</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，我通知了保姆要做这些事情，然后我就可以放心去上班了。</p><blockquote><p>上面举的例子，除了电话通知我是一个同步任务，其余的都是异步任务，异步任务 return 的是 promise对象。</p></blockquote><h4 id="（4）-Promise的三个状态"><a href="#（4）-Promise的三个状态" class="headerlink" title="（4） Promise的三个状态"></a>（4） Promise的三个状态</h4><ul><li>pending，异步任务正在进行。</li><li>resolved (也可以叫fulfilled)，异步任务执行成功。</li><li>rejected，异步任务执行失败。</li></ul><h4 id="（5）使用总结"><a href="#（5）使用总结" class="headerlink" title="（5）使用总结"></a>（5）使用总结</h4><p>首先初始化一个 Promise 对象，可以通过两种方式创建，<br>这两种方式都会返回一个 Promise 对象。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后调用上一步返回的 promise 对象的 then 方法，注册回调函数。</p><p>then 中的回调函数可以有一个参数，也可以不带参数。如果 then 中的回调函数依赖上一步的返回结果，那么要带上参数。比如</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token comment">//...</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>最后注册 catch 异常处理函数，处理前面回调中可能抛出的异常。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token comment">//...</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token comment">//...</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通常按照这三个步骤，你就能够应对绝大部分的异步处理场景。用熟之后，再去研究 Promise 各个函数更深层次的原理以及使用方式即可。</p><h4 id="6-事件循环"><a href="#6-事件循环" class="headerlink" title="(6) 事件循环"></a>(6) 事件循环</h4><p>then、 catch 、finally属于微任务</p><p>Promise在初始化时，传入的函数是同步执行的，然后注册 then 回调。注册完之后，继续往下执行同步代码，在这之前，then 中回调不会执行。同步代码块执行完毕后，才会在事件循环中检测是否有可用的 promise 回调，如果有，那么执行，如果没有，继续下一个事件循环。</p><h4 id="7-实例"><a href="#7-实例" class="headerlink" title="(7) 实例"></a>(7) 实例</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//实测jquery1.10中有then方法，百度搜索用的是这个版本，可在那控制台使用 </span><span class="token keyword">function</span> <span class="token function">ajaxTest</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">"post"</span><span class="token punctuation">,</span><span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">'https://server.guet.link/app/user/login'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>ajaxTest<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token comment">// 注意</span>    <span class="token comment">// axios不需要new Promise 返回 </span>    <span class="token comment">// jq ajax 有 thenable 也可以不用 这里是为了方便理解</span>    <span class="token comment">// console.log("第1个then",res)</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>ajaxTest<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token comment">// console.log("第2个then",res)</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>ajaxTest<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>     <span class="token comment">//isLoading = false </span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-generatir以及async-x2F-await语法糖"><a href="#2-generatir以及async-x2F-await语法糖" class="headerlink" title="2. generatir以及async&#x2F;await语法糖"></a>2. generatir以及async&#x2F;await语法糖</h2><p>ES6 出现了 generator 以及 async&#x2F;await 语法糖，使异步处理更加接近同步代码写法，可读性更好，同时异常捕获和同步代码的书写趋于一致。</p><p>async&#x2F;await是generator迭代函数的语法糖，关于generator请看另一篇</p><p>上面的列子可以写成这样：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">ajaxTest</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">"post"</span><span class="token punctuation">,</span><span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">'https://server.guet.link/app/user/login'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"...网络访问完毕"</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span>    <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> loginRes <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>ajaxTest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> reloginRes <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>ajaxTest<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"两次结果一览"</span><span class="token punctuation">,</span>loginRes<span class="token punctuation">,</span>reloginRes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://juejin.cn/post/7106481255096516638#heading-7">async&#x2F;await设计初衷并不是为了取代Promise，而是为了让使用Promise更加方便。-译文</a></p><p><a href="https://uniqname.medium.com/why-i-avoid-async-await-7be98014b73e">async&#x2F;await设计初衷并不是为了取代Promise，而是为了让使用Promise更加方便。-原文</a></p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> promise </tag>
            
            <tag> async/await </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异步组件的使用</title>
      <link href="/2021/02/27/note/vue-gai-nian-yi-bu-zu-jian-de-shi-yong/"/>
      <url>/2021/02/27/note/vue-gai-nian-yi-bu-zu-jian-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="异步组件的使用"><a href="#异步组件的使用" class="headerlink" title="异步组件的使用"></a>异步组件的使用</h1><p><a href="https://v2.cn.vuejs.org/v2/guide/components-dynamic-async.html#%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6">https://v2.cn.vuejs.org/v2/guide/components-dynamic-async.html#%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6</a></p><p>我们知道VUE构建的是一个单页面应用，那么就会导致其首屏加载慢。那么我们可以使用异步组件让webpack分chunk使得页面</p><h2 id="1-普通的加载"><a href="#1-普通的加载" class="headerlink" title="1.普通的加载"></a>1.普通的加载</h2><p>我们先来看一下普通的加载是怎样</p><h3 id="1-1-加载的组件："><a href="#1-1-加载的组件：" class="headerlink" title="1.1 加载的组件："></a>1.1 加载的组件：</h3><p><img src="https://qiniu.guet.link/asset/202209062128439.png" alt="加载的组件"></p><h3 id="1-2-静态加载："><a href="#1-2-静态加载：" class="headerlink" title="1.2 静态加载："></a>1.2 静态加载：</h3><p>注意此时为“import List from ‘.&#x2F;List’”是静态加载的</p><p><img src="https://qiniu.guet.link/asset/202209062131718.png" alt="静态加载"></p><h3 id="1-3-结果："><a href="#1-3-结果：" class="headerlink" title="1.3 结果："></a>1.3 结果：</h3><p>点击按钮显示“这是一个列表的内容”，但是发现控制台没有新的JS加载，也就是说早已经加载好了<br><img src="https://qiniu.guet.link/asset/202209062136897.png"></p><h2 id="2-异步组件"><a href="#2-异步组件" class="headerlink" title="2. 异步组件"></a>2. 异步组件</h2><h3 id="2-1-简单使用"><a href="#2-1-简单使用" class="headerlink" title="2.1 简单使用"></a>2.1 简单使用</h3><p>使用webpack（不能使用变量引入） + es2022 动态引入（import）</p><p>注意里面的注释可以修改chunkName，可查看控制台<br><img src="https://qiniu.guet.link/asset/202209062211557.png" alt="异步组件"></p><p>发现结果变了</p><p><img src="https://qiniu.guet.link/asset/202209062217656.png" alt="异步组件"></p><h3 id="2-2-更细致的写法"><a href="#2-2-更细致的写法" class="headerlink" title="2.2 更细致的写法"></a>2.2 更细致的写法</h3><p>定制异步组件的加载中和错误</p><p>（1）定义</p><p>错误组件和加载组件也需要定义，这里不多赘述</p><p><img src="https://qiniu.guet.link/asset/202209062224050.png"></p><p>（2）引入</p><p><img src="https://qiniu.guet.link/asset/202209062225806.png"></p><h3 id="3-其它方法"><a href="#3-其它方法" class="headerlink" title="3. 其它方法"></a>3. 其它方法</h3><p>以上方法使用的是webpackh2.0和es2020import()方法，此外还可以使用工厂函数来定义组件，</p><p>也就是<a href="https://v2.cn.vuejs.org/v2/guide/components-dynamic-async.html#%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6">异步组件开头介绍的方法</a>，但这不是推荐的</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">Vue.component(&#39;async-example&#39;, function (resolve, reject) &#123;    &#x2F;&#x2F;可以像服务器获取，根据实际需要决定        &#x2F;&#x2F;模拟异步获取  setTimeout(function () &#123;    &#x2F;&#x2F; 向 &#96;resolve&#96; 回调传递组件定义 data template    resolve(&#123;      template: &#39;&lt;div&gt;I am async!&lt;&#x2F;div&gt;&#39;    &#125;)  &#125;, 1000)&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> vue </tag>
            
            <tag> 异步组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>display：none与visibility：hidden的不同</title>
      <link href="/2021/02/23/note/html-css-mian-shi-display-none-yu-visibility-hidden-de-bu-tong/"/>
      <url>/2021/02/23/note/html-css-mian-shi-display-none-yu-visibility-hidden-de-bu-tong/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 一、是否占据空间    display:none,隐藏之后不占位置    visibility:hidden、opacity:0 隐藏之后仍然占据位置     原因是在DOM Tree阶段和CSS tree阶段 带有display:none解析的节点并不会合并成盒子 渲染出来 所以只能js访问    二、继承性    display：none没有继承性，visibility：hidden有继承性。    给父元素设置visibility：hidden，其子元素也会继承该属性，如果给子元素设置    visibility：visible，则子元素会显示出来。    三、回流（reflow）    display的改变会触发重绘回流--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">visibility</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>《=左边占位置的是input        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://baidu.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>《=左边不占位置的是a标签        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>display:none,隐藏之后不占位置            visibility:hidden、opacity:0 隐藏之后仍然占据位置        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> html&amp;css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 重绘回流 </tag>
            
            <tag> 卷 </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>break和continue</title>
      <link href="/2021/02/21/note/js-gai-nian-break-he-continue/"/>
      <url>/2021/02/21/note/js-gai-nian-break-he-continue/</url>
      
        <content type="html"><![CDATA[<p>break关键字可以用来退出switch或循环语句（for，while），但不能在if语句中使用break和continue。</p><p>continue可以用来跳过当次循环，同样不能在if语句中使用break和continue（这里switch也不能用了）。</p><h2 id="lable跳出多层循环语句"><a href="#lable跳出多层循环语句" class="headerlink" title="lable跳出多层循环语句"></a>lable跳出多层循环语句</h2><p>break和continue实际上还有可选的lable。</p><p>作用是：给循环语句或者switch语句命名lable，这样就可以<strong>跳转多重循环</strong>。</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">outside:for(let k &#x3D;0;k&lt;&#x3D;12;k++)&#123;    console.log(&#39;k:&#39;,k);   inside:for(let i &#x3D;0 ; i&lt;&#x3D; 12; i++)&#123;       console.log(&#39;i:&#39;,i);    break outside;&#125; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意的是不能给其它循环和switch添加lable后跳转</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">a&#x3D;1t:switch(a)&#123;&#x2F;&#x2F;t:没有作用，无法作用域其它语句    case 1:        console.log(1111);    case 2:        console.log(2222222222)&#125;a &#x3D;2;switch(a)&#123;    case 1:        console.log(1111);    case 2:        break t;&#x2F;&#x2F;Undefined label &#39;z&#39; 这样是不行的        console.log(2222222222)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更多跳出请参考 跳出多层循环（终止循环）</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> break </tag>
            
            <tag> continue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字不换行且忽视自适应宽度</title>
      <link href="/2021/02/20/note/html-css-bug-shu-zi-bu-huan-xing-qie-hu-shi-zi-gua-ying-kuan-dun/"/>
      <url>/2021/02/20/note/html-css-bug-shu-zi-bu-huan-xing-qie-hu-shi-zi-gua-ying-kuan-dun/</url>
      
        <content type="html"><![CDATA[<p>问题描述：<br>1.换行<br>在HTML中数字或连续的英文被当成是一个整体 就像汉字</p><p>2.width宽度<br>就算换行了，如果盒子是弹性宽度，那么是会被撑开的</p><p>解决办法：</p><p>1.解决不换行：<br>（数字作为一个整体，必须要声明每个字符）<br>word-wrap:break-word;&#x2F;&#x2F;允许单词换行，但不分割              （必要）<br>word-break:break-all;&#x2F;&#x2F;允许单词换行，分割                  （可选）<br>white-space:pre-wrap;&#x2F;&#x2F;保留空白且换行，空格在换行处会忽略    （可选）</p><p>注意：word-wrap对行内元素是没有效果的</p><p>2.对于宽度：<br>原本使用的是父盒子使用flex:1，内容盒子不设置宽度，当内容占满父盒子时换行<br>但无论是在内容盒子还是父盒子，这种方式是会被撑开的</p><p>可以使用calc(100% - 50px)，配合box-sizing:border-box,替换父盒子的flex1，当然单位可以% vw px<br>内容盒子现在就可以设置宽度了，而且必须设置！！！否者内容不会换行，继续撑开，例如可以设置max-width:100%</p><p>3.参考另一篇文章：HTML&amp;CSS-进阶-flex宽度如何被子元素继承</p>]]></content>
      
      
      <categories>
          
          <category> html&amp;css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> css </tag>
            
            <tag> 文本换行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>循环与遍历语句总结：for、for...in、for...of、forEach</title>
      <link href="/2021/02/17/note/js-gai-nian-xun-huan-yu-bian-li-yu-ju-for-for...in-for...of-foreach-map/"/>
      <url>/2021/02/17/note/js-gai-nian-xun-huan-yu-bian-li-yu-ju-for-for...in-for...of-foreach-map/</url>
      
        <content type="html"><![CDATA[<h2 id="1-使用"><a href="#1-使用" class="headerlink" title="1. 使用"></a>1. 使用</h2><h3 id="（1）for循环"><a href="#（1）for循环" class="headerlink" title="（1）for循环"></a>（1）for循环</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//1.最常见的for循环方式使用频率高，性能/效率也是比较不错的</span><span class="token comment">//在这里v输出的是下标</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">]</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> v<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> arr<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//2.for...of，语法简洁，只能应用数组</span><span class="token comment">//直接获取输出内容，性能优于for...in</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">]</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> v <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（2）for…in"><a href="#（2）for…in" class="headerlink" title="（2）for…in"></a>（2）for…in</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 3.for...in，用于遍历Object多些，效率低于for,</span><span class="token comment">// 主要用于遍历对象的可枚举属性，包括自有属性、继承自原型的属性</span><span class="token comment">// for...of，对象可以使用Object.keys()</span><span class="token comment">//在这里v输出的是下标</span><span class="token keyword">var</span> objs <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token string">'orange'</span> <span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> v <span class="token keyword">in</span> objs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> objs<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">//console.log(v, arr.v) 尽量不要使用arr.v 对于数字属性无法使用</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（3）for…of"><a href="#（3）for…of" class="headerlink" title="（3）for…of"></a>（3）for…of</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//for...of，对象可以使用Object.keys()</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> v <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>objs<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> objs<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（4）forEach"><a href="#（4）forEach" class="headerlink" title="（4）forEach"></a>（4）forEach</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// forEach() 本身是不支持的 continue 与 break 语句的，我们可以通过 some 和 every 来实现,使用 return 语句实现 continue 关键字的效果</span><span class="token comment">// 注意如果使用箭头函数 那么this将一直指向widow  回调函数默认指向window 上面的map也一样</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span>arr<span class="token punctuation">.</span>a<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// console.log(item);//apple orange</span>    <span class="token comment">// console.log(index);//0 1</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//['apple', 'orange']</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//['apple', 'orange']</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（5）map"><a href="#（5）map" class="headerlink" title="（5）map"></a>（5）map</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//map会返回一个新数组 返回与创建对象导致性能不佳 如果你不需要拷贝数组，不需要考虑</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">]</span><span class="token keyword">let</span> arrRes <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> item<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-性能对比："><a href="#2-性能对比：" class="headerlink" title="2. 性能对比："></a>2. 性能对比：</h2><p>for &gt; forEach &gt; for…of &gt; for…in &gt; map</p><p>最原始的for最好，而map因为要创建对象访问性能最差</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">"for"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">"for"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">"for...of"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">"for...of"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">"for...in"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">"for...in"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">"forEach"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">"forEach"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">"map"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">"map"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-常见问题"><a href="#3-常见问题" class="headerlink" title="3. 常见问题"></a>3. 常见问题</h2><p>为什么for…in比for…of慢？</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//for...in要去从原型链上查找数据，for...of不用</span><span class="token comment">//for...in是用来遍历可枚举的对象，key是不是枚举的，要进行判断，存在性能消耗，同时继承和原型的查找也要判断枚举</span><span class="token comment">//for...of实现了迭代器，是通过迭代器进行访问的</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">const</span> fn <span class="token operator">=</span> arr<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fn<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fn<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>class类总结</title>
      <link href="/2021/02/14/note/js-gai-nian-class-lei-es6/"/>
      <url>/2021/02/14/note/js-gai-nian-class-lei-es6/</url>
      
        <content type="html"><![CDATA[<h2 id="1-class简单使用"><a href="#1-class简单使用" class="headerlink" title="1. class简单使用"></a>1. class简单使用</h2><p>class是一个语法糖，其底层还是通过 <strong>构造函数</strong> 去创建的。所以它的绝大部分功能，ES5 都可以做到。新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> xiaoming <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xiaoming<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码用ES6的class实现，就是下面这样</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> xiaoming <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xiaoming<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// &#123; name: '小明', age: 18 &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> Person<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// function</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Person <span class="token operator">===</span> <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-constructor"><a href="#2-constructor" class="headerlink" title="2. constructor"></a>2. constructor</h2><p>每个类都必须要有一个 constructor，如果没有显示声明，js 引擎会自动给它添加一个空的构造函数：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 等同于</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-属性和方法"><a href="#3-属性和方法" class="headerlink" title="3. 属性和方法"></a>3. 属性和方法</h2><p>定义于 constructor 内的属性和方法，即定义在 this 上，属于实例属性和方法，否则属于原型属性和方法。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token punctuation">&#125;</span>  <span class="token function">say</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> jon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>jon<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span> <span class="token comment">// true</span>jon<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'say'</span><span class="token punctuation">)</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-属性表达式"><a href="#4-属性表达式" class="headerlink" title="4. 属性表达式"></a>4. 属性表达式</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> methodName <span class="token operator">=</span> <span class="token string">'say'</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token punctuation">&#125;</span>  <span class="token punctuation">[</span>methodName<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-静态方法"><a href="#5-静态方法" class="headerlink" title="5. 静态方法"></a>5. 静态方法</h2><p>不需要通过实例对象，可以直接通过类来调用的方法，其中的 this 指向类本身</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">static</span> <span class="token function">doSay</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">static</span> <span class="token function">say</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>Person<span class="token punctuation">.</span><span class="token function">doSay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// hello</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>静态方法可以被子类继承</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// ...</span><span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>Sub<span class="token punctuation">.</span><span class="token function">doSay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// hello</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以通过 super 对象访问</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// ...</span><span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">static</span> <span class="token function">nice</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doSay</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>Sub<span class="token punctuation">.</span><span class="token function">nice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// hello</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-严格模式"><a href="#6-严格模式" class="headerlink" title="6. 严格模式"></a>6. 严格模式</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">不需要使用 use strict，因为只要代码写在类和模块内，就只能使用严格模式。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="7-提升"><a href="#7-提升" class="headerlink" title="7. 提升"></a>7. 提升</h2><p>class 不存在变量提升。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Uncaught ReferenceError: Person is not defined</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-name-属性"><a href="#8-name-属性" class="headerlink" title="8. name 属性"></a>8. name 属性</h2><p>name 属性返回了类的名字，即紧跟在 class 后面的名字。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>Person<span class="token punctuation">.</span>name <span class="token comment">// Person</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-this"><a href="#9-this" class="headerlink" title="9. this"></a>9. this</h2><p>默认指向类的实例。</p><h2 id="10-取值函数（getter）和存值函数（setter）"><a href="#10-取值函数（getter）和存值函数（setter）" class="headerlink" title="10. 取值函数（getter）和存值函数（setter）"></a>10. 取值函数（getter）和存值函数（setter）</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">get</span> <span class="token function">name</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">'getter'</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">set</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setter'</span> <span class="token operator">+</span> val<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> jon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>jon<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'jon'</span> <span class="token comment">// setter jon</span>jon<span class="token punctuation">.</span>name <span class="token comment">// getter</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-class-表达式"><a href="#11-class-表达式" class="headerlink" title="11. class 表达式"></a>11. class 表达式</h2><p>如果需要，可为类定义一个类内部名字，如果不需要，可以省略：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 需要在类内部使用类名</span><span class="token keyword">const</span> Person <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">Obj</span> <span class="token punctuation">&#123;</span>  <span class="token function">getClassName</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> Obj<span class="token punctuation">.</span>name <span class="token comment">//Obj</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 不需要</span><span class="token keyword">const</span> Person <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>立即执行的 Class：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> jon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">class</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token punctuation">&#125;</span>  <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token string">'jon'</span><span class="token punctuation">)</span>jon<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//jon</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-继承"><a href="#12-继承" class="headerlink" title="12. 继承"></a>12. 继承</h2><h3 id="12-1-简介"><a href="#12-1-简介" class="headerlink" title="12.1 简介"></a>12.1 简介</h3><p>Class 可以通过extends关键字实现继承，这比 ES5 的通过修改原型链实现继承，要清晰和方便很多。</p><p>继承的基本使用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">static</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ColorPoint</span> <span class="token keyword">extends</span> <span class="token class-name">Point</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> color</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用父类的constructor(x, y)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用父类的toString()</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>super关键字可以调用父类。constructor方法和toString方法之中，都出现了。</p><h3 id="12-2-注意"><a href="#12-2-注意" class="headerlink" title="12.2 注意"></a>12.2 注意</h3><p><img src="https://qiniu.guet.link/asset/202211010021321.png"></p><h4 id="（1）-一般情况写了constructor就要写super，否则new实例的时候会报错。"><a href="#（1）-一般情况写了constructor就要写super，否则new实例的时候会报错。" class="headerlink" title="（1） 一般情况写了constructor就要写super，否则new实例的时候会报错。"></a>（1） 一般情况写了constructor就要写super，否则new实例的时候会报错。</h4><p>ES5 的继承，实质是先创造子类的实例对象this，然后再将父类的方法添加到this上面（Parent.apply(this)）。这与ES6 class的继承机制完全不同；</p><p>class的继承，实质是先将父类实例对象的属性和方法加到this上面（所以必须先调用super方法），然后再用子类的构造函数修改this。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ColorPoint</span> <span class="token keyword">extends</span> <span class="token class-name">Point</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> color</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//未使用super</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">ColorPoint</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">"dog"</span><span class="token punctuation">)</span><span class="token comment">//报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（2）-另一个需要注意的地方是，在子类的构造函数中，只有调用super之后，才可以使用this关键字，否则会报错。理由同上"><a href="#（2）-另一个需要注意的地方是，在子类的构造函数中，只有调用super之后，才可以使用this关键字，否则会报错。理由同上" class="headerlink" title="（2） 另一个需要注意的地方是，在子类的构造函数中，只有调用super之后，才可以使用this关键字，否则会报错。理由同上"></a>（2） 另一个需要注意的地方是，在子类的构造函数中，只有调用super之后，才可以使用this关键字，否则会报错。理由同上</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ColorPoint</span> <span class="token keyword">extends</span> <span class="token class-name">Point</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> color</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token comment">//调用不对</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">ColorPoint</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">"dog"</span><span class="token punctuation">)</span><span class="token comment">//报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（3）-子类可以调用父类静态方法"><a href="#（3）-子类可以调用父类静态方法" class="headerlink" title="（3） 子类可以调用父类静态方法"></a>（3） 子类可以调用父类静态方法</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">static</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ColorPoint</span> <span class="token keyword">extends</span> <span class="token class-name">Point</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> color</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用父类的constructor(x, y)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是因为 extends 会导致子类ColorPoint构造函数与父类Point构造函数在一条原型链上。</p><p><img src="https://qiniu.guet.link/asset/202211010141161.png"></p><h3 id="12-3-与ES5继承的共同点"><a href="#12-3-与ES5继承的共同点" class="headerlink" title="12.3 与ES5继承的共同点"></a>12.3 与ES5继承的共同点</h3><p>实例判断一致</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">dog <span class="token keyword">instanceof</span> <span class="token class-name">ColorPoint</span> <span class="token comment">// true</span>dog <span class="token keyword">instanceof</span> <span class="token class-name">Point</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="12-4-super-关键字"><a href="#12-4-super-关键字" class="headerlink" title="12.4 super 关键字"></a>12.4 super 关键字</h3><p>super虽然代表了父类A的构造函数，但是返回的是子类B的实例，即super内部的this指的是B的实例，因此super()在这里相当于A.call(this)。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//A.call(this)。</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（1）作为函数时，super-只能用在子类的构造函数之中，用在其他地方就会报错。"><a href="#（1）作为函数时，super-只能用在子类的构造函数之中，用在其他地方就会报错。" class="headerlink" title="（1）作为函数时，super()只能用在子类的构造函数之中，用在其他地方就会报错。"></a>（1）作为函数时，super()只能用在子类的构造函数之中，用在其他地方就会报错。</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>  <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 报错</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（2）作为对象时，super-在普通方法中，指向父类的原型对象；在静态方法中，指向父类。"><a href="#（2）作为对象时，super-在普通方法中，指向父类的原型对象；在静态方法中，指向父类。" class="headerlink" title="（2）作为对象时，super 在普通方法中，指向父类的原型对象；在静态方法中，指向父类。"></a>（2）作为对象时，super 在普通方法中，指向父类的原型对象；在静态方法中，指向父类。</h4><p>上面有提到static会使方法存在于构造函数，也就是说可以把 super 看作 隐式原型。</p><p>但是，通过super来给属性赋值是不被允许的，效果等于super.x &#x3D;&#x3D;&#x3D; this.x</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（3）super作为对象，用在-static-静态方法之中，这时super将指向父类，而不是父类的原型对象。"><a href="#（3）super作为对象，用在-static-静态方法之中，这时super将指向父类，而不是父类的原型对象。" class="headerlink" title="（3）super作为对象，用在 static 静态方法之中，这时super将指向父类，而不是父类的原型对象。"></a>（3）super作为对象，用在 static 静态方法之中，这时super将指向父类，而不是父类的原型对象。</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">static</span> <span class="token function">myMethod</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'static'</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">myMethod</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'instance'</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">Parent</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">static</span> <span class="token function">myMethod</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">myMethod</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">myMethod</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">myMethod</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>Child<span class="token punctuation">.</span><span class="token function">myMethod</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// static 1</span><span class="token keyword">var</span> child <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>child<span class="token punctuation">.</span><span class="token function">myMethod</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// instance 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（4）另外，在子类的静态方法中通过super调用父类的方法时，方法内部的this指向当前的子类，而不是子类的实例。"><a href="#（4）另外，在子类的静态方法中通过super调用父类的方法时，方法内部的this指向当前的子类，而不是子类的实例。" class="headerlink" title="（4）另外，在子类的静态方法中通过super调用父类的方法时，方法内部的this指向当前的子类，而不是子类的实例。"></a>（4）另外，在子类的静态方法中通过super调用父类的方法时，方法内部的this指向当前的子类，而不是子类的实例。</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">static</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">static</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token constant">B</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token constant">B</span><span class="token punctuation">.</span><span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（5）注意，使用super的时候，必须显式指定是作为函数、还是作为对象使用，否则会报错。"><a href="#（5）注意，使用super的时候，必须显式指定是作为函数、还是作为对象使用，否则会报错。" class="headerlink" title="（5）注意，使用super的时候，必须显式指定是作为函数、还是作为对象使用，否则会报错。"></a>（5）注意，使用super的时候，必须显式指定是作为函数、还是作为对象使用，否则会报错。</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//console.log(super); // 报错</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">B</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码中，super.valueOf()表明super是一个对象，因此就不会报错。同时，由于super使得this指向B的实例，所以super.valueOf()返回的是一个B的实例。</p><h4 id="（6）最后，由于对象总是继承其他对象的，所以可以在任意一个对象中，使用super关键字。"><a href="#（6）最后，由于对象总是继承其他对象的，所以可以在任意一个对象中，使用super关键字。" class="headerlink" title="（6）最后，由于对象总是继承其他对象的，所以可以在任意一个对象中，使用super关键字。"></a>（6）最后，由于对象总是继承其他对象的，所以可以在任意一个对象中，使用super关键字。</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"MyObject: "</span> <span class="token operator">+</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// MyObject: [object Object]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> es6 </tag>
            
            <tag> class </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nexitTick的作用及原理</title>
      <link href="/2021/02/12/note/vue-mian-shi-nexttick-shi-gan-ma-de/"/>
      <url>/2021/02/12/note/vue-mian-shi-nexttick-shi-gan-ma-de/</url>
      
        <content type="html"><![CDATA[<h2 id="1-作用"><a href="#1-作用" class="headerlink" title="1. 作用"></a>1. 作用</h2><p>将值赋给data后是不立即更新的。这时候就需要用nextTick对更新后的dom节点做操作</p><h2 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">.</span>textContent<span class="token punctuation">)</span> <span class="token comment">// => '已更新'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// => '已更新'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="3-原理"><a href="#3-原理" class="headerlink" title="3. 原理"></a>3. 原理</h2><p>为了避免不必要的计算和 DOM 操作，vue将DOM更新设计为异步。nextTick是一个微任务，返回一个promise，可以对更新后的dom进行一些操作。</p><p><a href="https://v2.cn.vuejs.org/v2/guide/reactivity.html#%E5%BC%82%E6%AD%A5%E6%9B%B4%E6%96%B0%E9%98%9F%E5%88%97">https://v2.cn.vuejs.org/v2/guide/reactivity.html#%E5%BC%82%E6%AD%A5%E6%9B%B4%E6%96%B0%E9%98%9F%E5%88%97</a></p><p>注意：这里不需要关心事件循环中的渲染。就像下面示例，图片被alert阻塞未渲染，这已经能拿到高度了。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">let</span> imgDom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    imgDom<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"myimg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    imgDom<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"width"</span><span class="token punctuation">,</span> <span class="token string">"200px"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    imgDom<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"height"</span><span class="token punctuation">,</span> <span class="token string">"200px"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    imgDom<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">,</span> <span class="token string">"https://ss0.baidu.com/7Po3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/c995d143ad4bd113fceedf775bafa40f4bfb0557.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> body <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"附加前高度"</span><span class="token punctuation">,</span> body<span class="token punctuation">.</span>offsetHeight<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//400</span>    body<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>imgDom<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"附加前高度"</span><span class="token punctuation">,</span> body<span class="token punctuation">.</span>offsetHeight<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//600</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'暂停'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://qiniu.guet.link/asset/202210121818678.png"></p><h2 id="4-nextTick-为什么是-next-tick"><a href="#4-nextTick-为什么是-next-tick" class="headerlink" title="4. nextTick 为什么是 next tick?"></a>4. nextTick 为什么是 next tick?</h2><p>从字面意思理解，next 下一个，tick 滴答（钟表）来源于定时器的周期性中断（输出脉冲），一次中断表示一个 tick，也被称做一个“时钟滴答”，nextTick 顾名思义就是下一个时钟滴答，下一个任务。下一个任务，在 Event Loop 中在熟悉不过了通过一个例子简单回忆一下 Event Loop。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'同步代码1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'同步代码2'</span><span class="token punctuation">)</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise.then'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'同步代码3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 最终输出"同步代码1"、"同步代码2"、"同步代码3"、"promise.then"、"setTimeout"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://qiniu.guet.link/asset/202211232219116.jpg"></p><p>第一个 tick（图例中第一个步骤，即’本次更新循环’）<br>首先修改数据，这是同步任务。同一事件循环的所有的同步任务都在主线程上执行，形成一个执行栈，此时还未涉及 DOM 。<br>Vue 开启一个异步队列，并缓冲在此事件循环中发生的所有数据改变。如果同一个 watcher 被多次触发，只会被推入到队列中一次。</p><p>同步任务在主线程执行，这是第一个 task。</p><p>第二个 tick（图例中第二个步骤，即’下次更新循环’）<br>同步任务执行完毕，开始执行异步 watcher 队列的任务，更新 DOM 。Vue 在内部尝试对异步队列使用原生的 Promise.then 和 MO，如果执行环境不支持，会采用 setImmediate 或者是 setTimeout(fn, 0) 代替(不同 Vue 版本 API 不一样)。</p><p>DOM 更新是第二个 task 。</p><p>第三个 tick（图例中第三个步骤）<br>当 DOM 更新循环结束之后，此时调用下一个 task 执行，也就是 nextTick 中注册的延迟回调 。$nextTick 其实和第二个 task 是一样的操作，但是属于不同的 task。</p><p>也就是第三个 task。</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-computed、methods、watch区别</title>
      <link href="/2021/02/11/note/vue-mian-shi-computed-methods-watch-qu-bie/"/>
      <url>/2021/02/11/note/vue-mian-shi-computed-methods-watch-qu-bie/</url>
      
        <content type="html"><![CDATA[<h2 id="computed-vs-methods"><a href="#computed-vs-methods" class="headerlink" title="computed vs methods"></a>computed vs methods</h2><p>相同点：<br>首先它们都可以在模板上调用（methods内方法想computed那样return）</p><p>不同点：</p><p>缓存：</p><p>computed有缓存，methods没有</p><p>computed计算属性是基于它们的响应式依赖进行缓存的</p><p>也就是说不管你在template模板上输出了几次，只有值没有改变，都只输出一次</p><p>调用方式：</p><p>computed调用没有括号,methods有()</p><p>总结：<br>“我们可以使用 methods 来替代 computed，效果上两个都是一样的，但是 computed 是基于它的依赖缓存，只有相关依赖发生改变时才会重新取值。而使用 methods ，在重新渲染的时候，函数总会重新调用执行”。</p><p>可以说使用 computed 性能会更好，但是如果你不希望缓存，你可以使用 methods 属性。</p><h2 id="computed-vs-watch"><a href="#computed-vs-watch" class="headerlink" title="computed vs watch"></a>computed vs watch</h2><p>1.输出的执行不同</p><p>computed值没有改变时也会输出</p><p>watch只有值改变时才会输出</p><ul><li>2.监听数量有差别（一对多，多对一）</li></ul><p>computed是监听多个值，只要某一值发生改变就会重新输出</p><p>而watch是监听一个值</p><p>3.watch监听更灵活</p><p>watch可以监听旧值和新值,可以设置immediate:true 页面首次加载的时候做一次监听</p><p><a href="https://blog.csdn.net/qq_38110274/article/details/121242203">https://blog.csdn.net/qq_38110274/article/details/121242203</a></p><ul><li>4.异步与否（return）</li></ul><p>computed不能异步 因为computed依赖return来获取结果，如settimeout的回调是被全局函数所引用的，无法return给computed</p><p>watch可以  不需要return</p><ol start="5"><li>缓存</li></ol><p>computed有缓存</p><p>watch没有缓存的概念 因为它的输出和监听都依赖于其它对象如路由 data props 所以它就是一个监听 仅此而已</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> vue </tag>
            
            <tag> computed </tag>
            
            <tag> methods </tag>
            
            <tag> watch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-组件通信</title>
      <link href="/2021/02/10/note/vue-mian-shi-zu-jian-tong-xin/"/>
      <url>/2021/02/10/note/vue-mian-shi-zu-jian-tong-xin/</url>
      
        <content type="html"><![CDATA[<h2 id="1-父传子"><a href="#1-父传子" class="headerlink" title="1. 父传子"></a>1. 父传子</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">v<span class="token operator">-</span>bind<span class="token operator">:</span>data <span class="token operator">=</span> <span class="token string">"data"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">data</span><span class="token operator">:</span>Object<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2-子传父"><a href="#2-子传父" class="headerlink" title="2. 子传父"></a>2. 子传父</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'send'</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-on:</span>send</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>sendData<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-兄弟通信"><a href="#3-兄弟通信" class="headerlink" title="3. 兄弟通信"></a>3. 兄弟通信</h2><h3 id="3-1-Vue事件总线（EventBus）"><a href="#3-1-Vue事件总线（EventBus）" class="headerlink" title="3.1  Vue事件总线（EventBus）"></a>3.1  Vue事件总线（EventBus）</h3><p>原理是通过一个新的Vue实例，使用 $on 和 $emit 方法通信</p><h3 id="1-初始化"><a href="#1-初始化" class="headerlink" title="(1) 初始化"></a>(1) 初始化</h3><p>可以定义一个文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// event-bus.js</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">const</span> EventBus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>或者是主文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// main.js</span><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$EventBus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-发送事件"><a href="#2-发送事件" class="headerlink" title="(2) 发送事件"></a>(2) 发送事件</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- A.vue --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sendMsg()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>-<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"> <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> EventBus <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../event-bus.js"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      EventBus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"aMsg"</span><span class="token punctuation">,</span> <span class="token string">'来自A页面的消息'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-接收事件"><a href="#3-接收事件" class="headerlink" title="(3) 接收事件"></a>(3) 接收事件</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- IncrementCount.vue --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>&#123;&#123;msg&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"> <span class="token keyword">import</span> <span class="token punctuation">&#123;</span>   EventBus <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../event-bus.js"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">''</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    EventBus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">"aMsg"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// A发送来的消息</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(2) Vuex</p><p>&#x2F;&#x2F;方便管理</p><p>详细看另一篇</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> vue </tag>
            
            <tag> 组件通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算属性名</title>
      <link href="/2021/02/09/note/js-gai-nian-ji-suan-shu-xing-ming/"/>
      <url>/2021/02/09/note/js-gai-nian-ji-suan-shu-xing-ming/</url>
      
        <content type="html"><![CDATA[<p>计算属性名<br>从 ECMAScript 2015 开始，对象初始化语法开始支持计算属性名。其允许在 [] 中放入表达式，计算结果可以当做属性名。这种用法和用方括号访问属性非常类似，也许你已经用来读取和设置属性了。现在同样的语法也可以用于对象字面值了：</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">&#x2F;&#x2F; Computed property names (ES6)var i &#x3D; 0;var a &#x3D; &#123;  [&quot;foo&quot; + ++i]: i,  [&quot;foo&quot; + ++i]: i,  [&quot;foo&quot; + ++i]: i&#125;;console.log(a.foo1); &#x2F;&#x2F; 1console.log(a.foo2); &#x2F;&#x2F; 2console.log(a.foo3); &#x2F;&#x2F; 3var param &#x3D; &#39;size&#39;;var config &#x3D; &#123;  [param]: 12,  [&quot;mobile&quot; + param.charAt(0).toUpperCase() + param.slice(1)]: 4&#125;;console.log(config); &#x2F;&#x2F; &#123; size: 12, mobileSize: 4 &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Object_initializer#computed_property_names">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Object_initializer#computed_property_names</a></p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-源码-生命周期</title>
      <link href="/2021/02/08/note/vue-mian-shi-yuan-ma-sheng-ming-zhou-qi/"/>
      <url>/2021/02/08/note/vue-mian-shi-yuan-ma-sheng-ming-zhou-qi/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;body&gt;    &lt;div id&#x3D;&quot;app&quot;&gt;        &lt;h1&gt;&#123;&#123;name&#125;&#125;&lt;&#x2F;h1&gt;    &lt;&#x2F;div&gt;&lt;&#x2F;body&gt;&lt;script&gt;    let app &#x3D; new Vue(&#123;        el: &#39;#app&#39;,        data: function () &#123;            return &#123;                name: &#39;小明&#39;            &#125;        &#125;,        beforeCreate() &#123;            console.log(this);        &#125;,        created() &#123;            console.log(this);        &#125;,        beforeMounte() &#123;            console.log(this);        &#125;,        mounted() &#123;            console.log(this);        &#125;    &#125;)&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">constructor(options) &#123;    &#x2F;&#x2F;生命周期函数beforeCreate    if (Object.prototype.toString.call(options.beforeCreate) &#x3D;&#x3D;&#x3D; &quot;[object Function]&quot;) &#123;        options.beforeCreate.call(this);    &#125;    &#x2F;&#x2F;生成data     &#x2F;&#x2F;函数写法    if (Object.prototype.toString.call(options.data) &#x3D;&#x3D;&#x3D; &quot;[object Function]&quot;) &#123;        this.$data &#x3D; options.data();        &#x2F;&#x2F;对象写法    &#125; else if (Object.prototype.toString.call(options.data) &#x3D;&#x3D;&#x3D; &quot;[object String]&quot;) &#123;        this.$data &#x3D; options.data;    &#125;    &#x2F;&#x2F;生命周期函数created    if (Object.prototype.toString.call(options.created) &#x3D;&#x3D;&#x3D; &quot;[object Function]&quot;) &#123;        options.created.call(this);    &#125;    &#x2F;&#x2F;生命周期函数    if (Object.prototype.toString.call(options.beforeMounte) &#x3D;&#x3D;&#x3D; &quot;[object Function]&quot;) &#123;        options.beforeMounte.call(this);    &#125;    &#x2F;&#x2F;生成el    this.$el &#x3D; document.querySelector(options.el);    &#x2F;&#x2F;编译渲染    this.compile(this.$el)    &#x2F;&#x2F;生命周期函数    if (Object.prototype.toString.call(options.mounted) &#x3D;&#x3D;&#x3D; &quot;[object Function]&quot;) &#123;        options.mounted.call(this);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> vue </tag>
            
            <tag> 源码解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-源码-模板解析</title>
      <link href="/2021/02/07/note/vue-mian-shi-yuan-ma-mo-ban-jie-xi/"/>
      <url>/2021/02/07/note/vue-mian-shi-yuan-ma-mo-ban-jie-xi/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">&#x2F;&#x2F;ES6 的class写法class Vue &#123;    &#x2F;&#x2F;构造器    constructor(options) &#123;        &#x2F;&#x2F;生成el        this.$el &#x3D; document.querySelector(options.el);        &#x2F;&#x2F;生成data        &#x2F;&#x2F;函数写法        if (Object.prototype.toString.call(options.data) &#x3D;&#x3D;&#x3D; &quot;[object Function]&quot;) &#123;            this.$data &#x3D; options.data();            &#x2F;&#x2F;对象写法        &#125; else if (Object.prototype.toString.call(options.data) &#x3D;&#x3D;&#x3D; &quot;[object String]&quot;) &#123;            this.$data &#x3D; options.data;        &#125;        &#x2F;&#x2F;编译渲染        this.compile(this.$el)    &#125;    compile(node) &#123;        node.childNodes.forEach((item, index) &#x3D;&gt; &#123;            &#x2F;&#x2F;元素节点            if (item.nodeType &#x3D;&#x3D;&#x3D; 1) &#123;                &#x2F;&#x2F;递归                this.compile(item);            &#125;            &#x2F;&#x2F;文本节点            if (item.nodeType &#x3D;&#x3D;&#x3D; 3) &#123;                &#x2F;&#x2F;正则                let reg &#x3D; &#x2F;\&#123;\&#123;(.*?)\&#125;\&#125;&#x2F;g;                &#x2F;&#x2F;textContent属性表示一个节点及其后代的文本内容。                let text &#x3D; item.textContent;                &#x2F;&#x2F;编写规则                item.textContent &#x3D; text.replace(reg, (match, vmKey) &#x3D;&gt; &#123;                    &#x2F;&#x2F;去掉两边空格                    vmKey &#x3D; vmKey.trim();                    &#x2F;&#x2F;替换                    console.log(this.$data)                    return this.$data[vmKey]                &#125;)            &#125;        &#125;)    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;body&gt;    &lt;div id&#x3D;&quot;app&quot;&gt;        &lt;h1&gt;&#123;&#123;name&#125;&#125;&lt;&#x2F;h1&gt;    &lt;&#x2F;div&gt;&lt;&#x2F;body&gt;&lt;script&gt;    let app &#x3D; new Vue(&#123;        el: &#39;#app&#39;,        data: function () &#123;            return &#123;                name: &#39;小明&#39;            &#125;        &#125;,        mounted() &#123;            console.log(this);        &#125;    &#125;)&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> vue </tag>
            
            <tag> 源码解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-diff算法-手写-patch与patchVnode</title>
      <link href="/2021/02/06/note/vue-mian-shi-yuan-ma-10-diff-suan-fa-shou-xie-patch-yu-patchvnode/"/>
      <url>/2021/02/06/note/vue-mian-shi-yuan-ma-10-diff-suan-fa-shou-xie-patch-yu-patchvnode/</url>
      
        <content type="html"><![CDATA[<p>详细参考snabbdom的js&#x2F;src&#x2F;dom中的patch和patch.js</p><h2 id="1-新老节点替换规则"><a href="#1-新老节点替换规则" class="headerlink" title="1. 新老节点替换规则"></a>1. 新老节点替换规则</h2><p>节点替换规则有以下三种情况，其中第三种情况最为复杂，并且分为有children和没有children情况</p><ol><li><p>如果新老节点不是同一个节点名词，那么就暴力删除旧的节点，创建插入新节点。</p></li><li><p>只能是同级比较。跨级，例如在源节点上添加一个父节点，就会创建插入新节点。</p></li><li><p>如果是相同的元素节点，有分为很多情况</p></li></ol><p>(1) 新节点没有children</p><p>如果新的节点没有children，那就证明新节点是文本，那直接把旧的替换成新的文本</p><p>(2) 新节点还有children</p><p>新的有children，旧的也有 &#x3D;》 就是diff算法核心,请看第2章分析</p><p>新的有children，旧的没有 &#x3D;》 创建元素添加（把旧的内容删除清空掉，增加新的）</p><h2 id="2-diff算法的核心（最复杂的情况）"><a href="#2-diff算法的核心（最复杂的情况）" class="headerlink" title="2. diff算法的核心（最复杂的情况）"></a>2. diff算法的核心（最复杂的情况）</h2><p>对于新旧节点，使用指针来判断各种情况，从第一种方案开始，如果第一种方案不对立马切换到下一种方案，下边几种同理</p><p>1、 旧前和新前<br>旧指针++,新指针++<br>2、 旧后和新后<br>旧指针–,新指针–<br>3、 旧前和新后<br>旧指针++,新指针–<br>4、 旧后和新前<br>旧指针–,新指针++<br>5、 以上都不满足条件 &#x3D;&#x3D;》查找<br>新指针++,新的添加到页面上，并且新在旧的中有，要给旧的赋值成undefined<br>6、 创建或删除</p><p>详细请看工程文件的 updateChildren.js 和b站Vue面试题后面几章</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 源码解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-diff算法-手写-生成虚拟dom</title>
      <link href="/2021/02/06/note/vue-mian-shi-yuan-ma-9-diff-suan-fa-shou-xie-sheng-cheng-xu-ni-dom/"/>
      <url>/2021/02/06/note/vue-mian-shi-yuan-ma-9-diff-suan-fa-shou-xie-sheng-cheng-xu-ni-dom/</url>
      
        <content type="html"><![CDATA[<h2 id="1-搭建环境"><a href="#1-搭建环境" class="headerlink" title="1. 搭建环境"></a>1. 搭建环境</h2><p>因为手写不安装snabbdom了。工程文件请看diff文件夹</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">npm init -y  &#x2F;&#x2F;初始化npm install webpack@5 webpack-cli@3 webpack-dev-server@3 -S<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-index-js"><a href="#2-index-js" class="headerlink" title="2. index.js"></a>2. index.js</h2><p>虚拟dom文件</p><h2 id="2-1-分析"><a href="#2-1-分析" class="headerlink" title="2.1 分析"></a>2.1 分析</h2><p>在snabbdom中使用h函数来生成虚拟dom</p><pre class="line-numbers language-JS" data-language="JS"><div class="caption"><span>生成的js对象</span></div><code class="language-JS">let vnode &#x3D;  h(&quot;div&quot;,&#123;&#125;,&quot;你好吖&quot;);console.log(vNode);&#123;children : undefined,data : &#123;&#125;,elm:undefined,key:undefined,sel:&quot;div&quot;,text:&quot;你好吖&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>h函数第三个参数不确定，可能是字符串，可能是数组</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 源码解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-diff算法-snabbdom</title>
      <link href="/2021/02/06/note/vue-mian-shi-yuan-ma-8-diff-suan-fa-snabbdom/"/>
      <url>/2021/02/06/note/vue-mian-shi-yuan-ma-8-diff-suan-fa-snabbdom/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>vue的diff算法参考自snabbdom</p><p>本文将介绍snabbdom的使用 从而深入理解vue的diff算法，工程文件请参考snabbdom文件夹。</p><h2 id="1-实例"><a href="#1-实例" class="headerlink" title="1. 实例"></a>1. 实例</h2><p>直接到github的snabbdom去复制实例来使用</p><h2 id="2-真实dom和虚拟dom"><a href="#2-真实dom和虚拟dom" class="headerlink" title="2. 真实dom和虚拟dom"></a>2. 真实dom和虚拟dom</h2><p>在开篇我们讨论过为什么说虚拟dom的性能优于真实dom，这里再重新验证一遍</p><p>diff算法比较的虚拟dom，虚拟dom的成员比较少，比较性能上自然也比较出色</p><h3 id="2-1-真实dom"><a href="#2-1-真实dom" class="headerlink" title="2.1 真实dom"></a>2.1 真实dom</h3><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">&#x2F;&#x2F;一个对象 非常多的成员div#container<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-2-虚拟dom的"><a href="#2-2-虚拟dom的" class="headerlink" title="2.2 虚拟dom的"></a>2.2 虚拟dom的</h3><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">&#x2F;&#x2F;snabbdom的虚拟dom对象 成员较少&#123;    &quot;sel&quot;: &quot;div#container.two.classes&quot;,    &quot;data&quot;: &#123;        &quot;on&quot;: &#123;&#125;    &#125;,    &quot;children&quot;: [        &#123;            &quot;sel&quot;: &quot;span&quot;,            &quot;data&quot;: &#123;                &quot;style&quot;: &#123;                    &quot;fontWeight&quot;: &quot;bold&quot;                &#125;            &#125;,            &quot;text&quot;: &quot;粗体&quot;,            &quot;elm&quot;: &#123;&#125;        &#125;,        &#123;            &quot;sel&quot;: &quot;br&quot;,            &quot;data&quot;: &#123;&#125;,            &quot;elm&quot;: &#123;&#125;        &#125;,        &#123;            &quot;text&quot;: &quot;这是一个普通的文本&quot;,            &quot;elm&quot;: &#123;&#125;        &#125;,        &#123;            &quot;sel&quot;: &quot;br&quot;,            &quot;data&quot;: &#123;&#125;,            &quot;elm&quot;: &#123;&#125;        &#125;,        &#123;            &quot;sel&quot;: &quot;a&quot;,            &quot;data&quot;: &#123;                &quot;props&quot;: &#123;                    &quot;href&quot;: &quot;https:&#x2F;&#x2F;www.baidu.com&quot;                &#125;            &#125;,            &quot;text&quot;: &quot;跳转到百度&quot;,            &quot;elm&quot;: &#123;&#125;        &#125;,        &#123;            &quot;sel&quot;: &quot;br&quot;,            &quot;data&quot;: &#123;&#125;,            &quot;elm&quot;: &#123;&#125;        &#125;,        &#123;            &quot;sel&quot;: &quot;button&quot;,            &quot;data&quot;: &#123;                &quot;on&quot;: &#123;&#125;            &#125;,            &quot;text&quot;: &quot;patchNewVnode&quot;,            &quot;elm&quot;: &#123;&#125;        &#125;    ],    &quot;elm&quot;: &#123;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-虚拟dom的key对性能的影响"><a href="#3-虚拟dom的key对性能的影响" class="headerlink" title="3. 虚拟dom的key对性能的影响"></a>3. 虚拟dom的key对性能的影响</h2><p>注意，这里讨论的性能是虚拟dom之间，和真实dom无关。</p><p>key是唯一标识，加上key,那么diff算法就能知道每个节点的真实情况，根据情况进行相应操作，提高性能</p><p>例如，js代码上，只是对虚拟dom的节点顺序进行调换</p><h3 id="3-1-情况一："><a href="#3-1-情况一：" class="headerlink" title="3.1 情况一："></a>3.1 情况一：</h3><p><strong>没有使用key</strong>就会重新的删除创建</p><p>(1)有三个li节点,内容为abc</p><p><img src="https://qiniu.guet.link/asset/202209140011531.png"></p><p>(2)将其修改为aaabbbccc</p><p><img src="https://qiniu.guet.link/asset/202209140013665.png"></p><p>(3)置换成新的vdom，发现创建了新dom，那么这种情况性能开支就很大了</p><p><img src="https://qiniu.guet.link/asset/202209140017531.png"></p><h3 id="3-2-情况二："><a href="#3-2-情况二：" class="headerlink" title="3.2 情况二："></a>3.2 情况二：</h3><p><strong>使用了key</strong>就只是更改顺序</p><p><img src="https://qiniu.guet.link/asset/202209140018847.png" alt="加上key"></p><p>原图</p><p><img src="https://qiniu.guet.link/asset/202209140021828.png" alt="修改顺序"></p><p>可以看到只是改变了顺序</p><p><img src="https://qiniu.guet.link/asset/202209140019328.png" alt="改变了顺序"></p><p>由此我们得出使用key是会提升性能的，因为没有使用key的话，仅仅只是调换节点的顺序就会使用创建删除操作，资源开支大。</p><h2 id="4-新老节点替换规则"><a href="#4-新老节点替换规则" class="headerlink" title="4. 新老节点替换规则"></a>4. 新老节点替换规则</h2><p>1、如果新老节点不是同一个节点名词，那么就暴力删除旧的节点，创建插入新节点。</p><p>2、只能是同级比较。跨级，例如在源节点上添加一个父节点，就会创建插入新节点。</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 源码解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-diff算法-开篇</title>
      <link href="/2021/02/06/note/vue-mian-shi-yuan-ma-7-diff-suan-fa-kai-pian/"/>
      <url>/2021/02/06/note/vue-mian-shi-yuan-ma-7-diff-suan-fa-kai-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="diff算法"><a href="#diff算法" class="headerlink" title="diff算法"></a>diff算法</h1><h2 id="1-diff算法概念"><a href="#1-diff算法概念" class="headerlink" title="1. diff算法概念"></a>1. diff算法概念</h2><p>功能：提升性能</p><p>概括：diff全程difference，意为差异，顾名思义就是寻找不同。寻找不同这个过程需要一个本体和参照体，寻找不同的过程就是diff算法的本质。</p><p><img src="https://qiniu.guet.link/asset/202209122246478.png" alt="找不同"></p><h2 id="2-衍生–虚拟dom"><a href="#2-衍生–虚拟dom" class="headerlink" title="2. 衍生–虚拟dom"></a>2. 衍生–虚拟dom</h2><p>在今天，前端领域，我们常说的diff算法，他的<strong>本体和参照体</strong>都是虚拟dom，那么这里又引导出来一个新的问题，什么是虚拟dom？</p><h2 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2.1 概念"></a>2.1 概念</h2><p>虚拟dom本质上就是一个对象，该对象描述了一个UI节点所对应的一些必要信息  </p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;div class&#x3D;&quot;hola-text&quot;&gt;你好&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">const virtualNode &#x3D; &#123;    type:&quot;div&quot;,    content:&quot;你好&quot;，    props:&#123;        class:[&quot;hola-text&quot;],    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&#x3D;》虚拟DOM</p><p>在前端虚拟dom的实现都是对象，但是实际上不止对象可以表示。</p><h2 id="2-2-为什么需要虚拟dom"><a href="#2-2-为什么需要虚拟dom" class="headerlink" title="2.2 为什么需要虚拟dom"></a>2.2 为什么需要虚拟dom</h2><p>虚拟dom重点是收集一次tick中dom的更新，在一次事件循环中统一执行，减少浏览器多进程之间的开销</p><p><img src="https://qiniu.guet.link/asset/202209122305392.png" alt="真实dom的成员"></p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">const div &#x3D; &#123;type:&quot;div&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以并不是真实DOM的crud大，而是在比对的时候虚拟dom比真实dom更好，crud是固定的。</p><p>diff -》 虚拟dom -》 真实dom -》 render</p><p>diff算法需要一个遍历，如果直接给真实dom比较，那么就完蛋了，太多成员要对比了！</p><p>虚拟dom也要转换成真实dom，也要crud的，这个性能损耗是固定的</p><h2 id="3-diff算法本质"><a href="#3-diff算法本质" class="headerlink" title="3. diff算法本质"></a>3. diff算法本质</h2><p>回到正题，diff算法本质上就是对虚拟dom的本体和参照体进行一个对比，或者说虚拟dom树的差异（虚拟dom树是由虚拟dom以树形结构组合在一起，就叫虚拟dom树），从而提升整体性能。</p><h2 id="4-主流的diff算法"><a href="#4-主流的diff算法" class="headerlink" title="4. 主流的diff算法"></a>4. 主流的diff算法</h2><p>snabbdom和virtual-dom</p><h2 id="5-snabbdom搭建"><a href="#5-snabbdom搭建" class="headerlink" title="5. snabbdom搭建"></a>5. snabbdom搭建</h2><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">npm init -y  &#x2F;&#x2F;初始化npm install webpack@5 webpack-cli@3 webpack-dev-server@3 -Scnpm install snabbdom -S <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>新建-》配置webpack.config.js</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> vue </tag>
            
            <tag> 源码解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue双向绑定原理v-model</title>
      <link href="/2021/02/06/note/vue-mian-shi-yuan-ma-6-shuang-xiang-bang-ding-yuan-li-v-model/"/>
      <url>/2021/02/06/note/vue-mian-shi-yuan-ma-6-shuang-xiang-bang-ding-yuan-li-v-model/</url>
      
        <content type="html"><![CDATA[<p>通过Object.defineProperty劫持数据发生的改变，如果数据发生改变了（在set中进行赋值的），触发update方法<br>进行更新节点内容()，从而实现数据双向绑定的原理</p><pre class="line-numbers language-JS" data-language="JS"><div class="caption"><span>只保留重要代码</span></div><code class="language-JS">class Vue &#123;    &#x2F;&#x2F;构造器    constructor(options) &#123;        this.$options &#x3D; options;        &#x2F;&#x2F;观察者        this.$watchEvent &#x3D; &#123;&#125;;        &#x2F;&#x2F;数据劫持        this.proxyData();        &#x2F;&#x2F;观察者 模板更新        this.observer();        &#x2F;&#x2F;编译渲染        this.compile(this.$el)    &#125;;    &#x2F;**     * 编译     * 对模板变量     *&#x2F;    compile(node) &#123;        node.childNodes.forEach((item, index) &#x3D;&gt; &#123;            &#x2F;&#x2F;元素节点            if (item.nodeType &#x3D;&#x3D;&#x3D; 1) &#123;                &#x2F;&#x2F;双向绑定                if (item.hasAttribute(&quot;v-model&quot;)) &#123;                    &#x2F;&#x2F;获取绑定的data属性                    let vmKey &#x3D; item.getAttribute(&quot;v-model&quot;).trim();                    if (this.hasOwnProperty(vmKey)) &#123;                        &#x2F;&#x2F;初始值                        item.value &#x3D; this[vmKey];                        &#x2F;&#x2F;监听其input事件                        item.addEventListener(&#39;input&#39;, (event) &#x3D;&gt; &#123;                            &#x2F;&#x2F;将值给到this.key                            this[vmKey] &#x3D; item.value;                        &#125;);                    &#125;;                &#125;;                &#x2F;&#x2F;递归                this.compile(item);            &#125;            &#x2F;&#x2F;文本节点            if (item.nodeType &#x3D;&#x3D;&#x3D; 3) &#123;                &#x2F;&#x2F;正则                let reg &#x3D; &#x2F;\&#123;\&#123;(.*?)\&#125;\&#125;&#x2F;g;                &#x2F;&#x2F;textContent属性表示一个节点及其后代的文本内容。                let text &#x3D; item.textContent;                &#x2F;&#x2F;编写规则match匹配字符 vmkey是匹配到的data属性                item.textContent &#x3D; text.replace(reg, (match, vmKey) &#x3D;&gt; &#123;                    &#x2F;&#x2F;去掉两边空格                    vmKey &#x3D; vmKey.trim();                    &#x2F;&#x2F;给模板匹配到的每一个模板变量创建监听对象                    let watch &#x3D; new Watch(this, vmKey, item, &quot;textContent&quot;)                    &#x2F;&#x2F;判断有没有这个属性，没有则不需要进行监听                    if (this.hasOwnProperty(vmKey)) &#123;                        if (this.$watchEvent[vmKey]) &#123;                            this.$watchEvent[vmKey].push(watch);                        &#125; else &#123;                            &#x2F;&#x2F;初始化监听                            &#x2F;&#x2F;由于一个data可能在模板上使用多次，那么应该使用一个数组存储                            this.$watchEvent[vmKey] &#x3D; [];                            this.$watchEvent[vmKey].push(watch);                        &#125;                    &#125;                    &#x2F;&#x2F;替换模板                    return this.$data[vmKey]                &#125;)            &#125;        &#125;)    &#125;;    &#x2F;**     * 数据劫持     * 监听this属性的修改和获取，访问this.$data     *&#x2F;    proxyData() &#123;        for (let key in this.$data) &#123;            Object.defineProperty(this, key, &#123;                get() &#123;                    return this.$data[key];                &#125;,                set(newVal) &#123;                    console.log(&#39;监听到Vue实例对象的写入&#39;);                    this.$data[key] &#x3D; newVal;                &#125;            &#125;)        &#125;    &#125;;    &#x2F;**     * 观察者     * 对this.$data的变化进行监听，更新模板     *&#x2F;    observer() &#123;        for (let key in this.$data) &#123;            let value &#x3D; this.$data[key];            let that &#x3D; this;            Object.defineProperty(this.$data, key, &#123;                get() &#123;                    return value;                &#125;,                set(newVal) &#123;                    value &#x3D; newVal;                    &#x2F;&#x2F;判断是否有这个属性的监听对象，意味着这个data属性是否在模板中被使用了                    if (that.$watchEvent[key]) &#123;                        &#x2F;&#x2F;其value是一个数组，因为data属性可能在模板中使用了不止一次，这是在compile的使用push的                        for (let val of that.$watchEvent[key]) &#123;                            val.update();                        &#125;                    &#125;                &#125;            &#125;)        &#125;    &#125;&#125;&#x2F;** * 监听对象 *&#x2F;class Watch &#123;    constructor(vm, key, node, attr) &#123;        &#x2F;&#x2F;vue实例对象        this.vm &#x3D; vm;        &#x2F;&#x2F;属性名称        this.key &#x3D; key;        &#x2F;&#x2F;节点         this.node &#x3D; node;        &#x2F;&#x2F;节点属性如textContent        this.attr &#x3D; attr;    &#125;;    &#x2F;&#x2F;更新模板    update() &#123;        &#x2F;&#x2F;将最新的vm data给到节点属性        this.node[this.attr] &#x3D; this.vm[this.key];    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 源码解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>视图更新（响应式原理）</title>
      <link href="/2021/02/06/note/vue-mian-shi-yuan-ma-5-shi-tu-geng-xin-xiang-ying-shi-yuan-li/"/>
      <url>/2021/02/06/note/vue-mian-shi-yuan-ma-5-shi-tu-geng-xin-xiang-ying-shi-yuan-li/</url>
      
        <content type="html"><![CDATA[<p>使用数据劫持配合观察者模式、发布订阅模式运行响应式</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">&#x2F;** * 仿写一个简单的Vue.js * Vue使用层上是数据驱动，而源码上数据更新了，dom也要更新 *&#x2F;class Vue &#123;    &#x2F;&#x2F;构造器    constructor(options) &#123;        this.$options &#x3D; options;        &#x2F;&#x2F;观察者监听事件        this.$watchEvent &#x3D; &#123;&#125;;        &#x2F;&#x2F;观察者 模板更新        this.observer();        &#x2F;&#x2F;生命周期函数created        if (Object.prototype.toString.call(options.created) &#x3D;&#x3D;&#x3D; &quot;[object Function]&quot;) &#123;            options.created.call(this);        &#125;    &#125;;    &#x2F;**     * 编译     * 对模板变量     *&#x2F;    compile(node) &#123;        node.childNodes.forEach((item, index) &#x3D;&gt; &#123;            &#x2F;&#x2F;元素节点            if (item.nodeType &#x3D;&#x3D;&#x3D; 1) &#123;                &#x2F;&#x2F;事件监听                if (item.hasAttribute(&quot;@click&quot;)) &#123;                    let vmKey &#x3D; item.getAttribute(&quot;@click&quot;);                    &#x2F;&#x2F;做函数监听                    if (Object.prototype.toString.call(this.$options.methods[vmKey]) &#x3D;&#x3D;&#x3D; &quot;[object Function]&quot;) &#123;                        item.addEventListener(&#39;click&#39;, (event) &#x3D;&gt; &#123;                            this.$options.methods[vmKey].call(this, event);                        &#125;);                    &#125;                &#125;                &#x2F;&#x2F;递归                this.compile(item);            &#125;            &#x2F;&#x2F;文本节点            if (item.nodeType &#x3D;&#x3D;&#x3D; 3) &#123;                &#x2F;&#x2F;正则                let reg &#x3D; &#x2F;\&#123;\&#123;(.*?)\&#125;\&#125;&#x2F;g;                &#x2F;&#x2F;textContent属性表示一个节点及其后代的文本内容。                let text &#x3D; item.textContent;                &#x2F;&#x2F;编写规则match匹配字符 vmkey是匹配到的data属性                item.textContent &#x3D; text.replace(reg, (match, vmKey) &#x3D;&gt; &#123;                    &#x2F;&#x2F;去掉两边空格                    vmKey &#x3D; vmKey.trim();                    &#x2F;&#x2F;给模板匹配到的每一个模板变量创建监听对象                    let watch &#x3D; new Watch(this, vmKey, item, &quot;textContent&quot;)                    &#x2F;&#x2F;判断有没有这个属性，没有则不需要进行监听                    if (this.hasOwnProperty(vmKey)) &#123;                        if (this.$watchEvent[vmKey]) &#123;                            this.$watchEvent[vmKey].push(watch);                        &#125; else &#123;                            &#x2F;&#x2F;初始化监听                            &#x2F;&#x2F;由于一个data可能在模板上使用多次，那么应该使用一个数组存储                            this.$watchEvent[vmKey] &#x3D; [];                            this.$watchEvent[vmKey].push(watch);                        &#125;                    &#125;                    &#x2F;&#x2F;替换模板                    return this.$data[vmKey]                &#125;)            &#125;        &#125;)    &#125;;    &#x2F;**     * 观察者     * 对this.$data的变化进行监听，更新模板     *&#x2F;    observer() &#123;        for (let key in this.$data) &#123;            let value &#x3D; this.$data[key];            let that &#x3D; this;            Object.defineProperty(this.$data, key, &#123;                get() &#123;                    return value;                &#125;,                set(newVal) &#123;                    value &#x3D; newVal;                    &#x2F;&#x2F;判断是否有这个属性的监听对象，意味着这个data属性是否在模板中被使用了                    if (that.$watchEvent[key]) &#123;                        &#x2F;&#x2F;其value是一个数组，因为data属性可能在模板中使用了不止一次，这是在compile的使用push的                        for (let val of that.$watchEvent[key]) &#123;                            val.update();                        &#125;                    &#125;                &#125;            &#125;)        &#125;    &#125;    &#125;&#x2F;** * 监听对象 *&#x2F;class Watch &#123;    constructor(vm, key, node, attr) &#123;        &#x2F;&#x2F;vue实例对象        this.vm &#x3D; vm;        &#x2F;&#x2F;属性名称        this.key &#x3D; key;        &#x2F;&#x2F;节点         this.node &#x3D; node;        &#x2F;&#x2F;节点属性如textContent        this.attr &#x3D; attr;    &#125;;    &#x2F;&#x2F;更新模板    update() &#123;        &#x2F;&#x2F;将最新的vm data给到节点属性        this.node[this.attr] &#x3D; this.vm[this.key];    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 源码解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue源码是如何实现事件绑定</title>
      <link href="/2021/02/06/note/vue-mian-shi-yuan-ma-3-shi-jian-bang-ding/"/>
      <url>/2021/02/06/note/vue-mian-shi-yuan-ma-3-shi-jian-bang-ding/</url>
      
        <content type="html"><![CDATA[<p>此文记录myVue.js对于事件绑定的处理</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">&#x2F;** * 编译 * 对模板变量 *&#x2F;compile(node) &#123;    node.childNodes.forEach((item, index) &#x3D;&gt; &#123;        &#x2F;&#x2F;元素节点        if (item.nodeType &#x3D;&#x3D;&#x3D; 1) &#123;            &#x2F;&#x2F;事件监听            if (item.hasAttribute(&quot;@click&quot;)) &#123;                let vmKey &#x3D; item.getAttribute(&quot;@click&quot;);                &#x2F;&#x2F;做函数监听                if (Object.prototype.toString.call(this.$options.methods[vmKey]) &#x3D;&#x3D;&#x3D; &quot;[object Function]&quot;) &#123;                    item.addEventListener(&#39;click&#39;, (event) &#x3D;&gt; &#123;                        this.$options.methods[vmKey].call(this, event);                    &#125;);                &#125;;            &#125;;            &#x2F;&#x2F;递归查看元素节点的子节点             this.compile(item);        &#125;    &#125;)&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 源码解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据劫持（响应式原理）</title>
      <link href="/2021/02/06/note/vue-mian-shi-yuan-ma-4-shu-ju-jie-chi-xiang-ying-shi-yuan-li/"/>
      <url>/2021/02/06/note/vue-mian-shi-yuan-ma-4-shu-ju-jie-chi-xiang-ying-shi-yuan-li/</url>
      
        <content type="html"><![CDATA[<p>Vue的响应式原理是使用数据劫持<br><a href="https://blog.csdn.net/weixin_44019523/article/details/113574552">https://blog.csdn.net/weixin_44019523/article/details/113574552</a></p><p>Vue2是Object.defineProperty(ES5)</p><p>Vue3是Proxy对象（ES6）</p><h2 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty()"></a>Object.defineProperty()</h2><p>本章将介绍Vue2使用的Object.defineProperty(obj,prop,description)接收三个3个参数</p><h3 id="使用介绍"><a href="#使用介绍" class="headerlink" title="使用介绍"></a>使用介绍</h3><p>我们把重点集中在第三个参数，description是属性描述符</p><p><strong>属性描述符</strong>的拥有两种表现形式：<strong>数据描述符</strong>和<strong>存取描述符</strong>。这两种描述符不能同时存在。</p><blockquote><p>如果一个描述符不具有 value、writable、get 和 set 中的任意一个键，那么它将被认为是一个数据描述符。如果一个描述符同时拥有 value 或 writable 和 get 或 set 键，则会产生一个异常。 –MDN</p></blockquote><ol><li>两种描述符均有以下键值：</li></ol><p>（1） configurable ：配置。可以修改属性描述符，且属性能被删除，默认false\</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">let student &#x3D; &#123;&#125;;Object.defineProperty(student, &quot;sex&quot;, &#123;    &#x2F;&#x2F;默认false    &#x2F;&#x2F;configurable: false,&#125;);&#x2F;&#x2F;没有办法在进行配置，以下都无效Object.defineProperty(student, &quot;sex&quot;, &#123;    value:12,    configurable:true&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2） enumerable ：枚举。是否读取该属性访问for…in，默认false</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">let student &#x3D; &#123;&#125;;Object.defineProperty(student, &quot;job&quot;, &#123;    enumerable: false,&#125;)&#x2F;&#x2F;for...in 是没办法访问的，student.job却可以<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><strong>数据描述符</strong>可选键值</li></ol><p>value ： 该属性的初始值。可以是任何（数值，对象，函数等）默认undefined。</p><p>writable ： 当且进档该属性的writable为true时，该属性才能被写入值。默认为false</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">let student &#x3D; &#123;&#125;;Object.defineProperty(student, &quot;name&quot;, &#123;    &#x2F;&#x2F;设置值    value: &#39;小明&#39;,    &#x2F;&#x2F;是否可改写    writable:true,    &#x2F;&#x2F;配置    configurable:true,    &#x2F;&#x2F;枚举    enumerable: true,&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><strong>存取描述符</strong>可选键值</li></ol><p>get : 一个给属性提供getter的方法。如果没有getter则为undefined。当访问属性时，该方法会被执行。会传入this，但由于继承关系，this并不一定是定义改属性的对象。默认为undefined</p><p>set : 一个给属性提供setter的方法。如果没有setter则为undefined。当属性被修改时，该方法会被执行。该方法将接受唯一参数。默认为undefined</p><p><strong>注意不能在getset方法内写对象属性，会造成栈溢出</strong></p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">let student &#x3D; &#123;&#125;;&#x2F;&#x2F;不可以直接在get方法和set方法内使用student.name输出和写入，因为会被检测到 要使用val代存 let val &#x3D; student.name;Object.defineProperty(student, &quot;name&quot;, &#123;        get()&#123;        console.log(&#39;拦截到获取&#39;);        return val    &#125;,    set(newVal)&#123;        console.log(&#39;拦截到写入&#39;);        &#x2F;&#x2F;val自然不等于student.name，但是在get方法上输出的是val呀 没有影响        val &#x3D; newVal;    &#125;    configurable:true,    enumerable: true,&#125;)&#x2F;&#x2F;也可以这么写，使用形参let student &#x3D; &#123;&#125;;(function(val)&#123;    Object.defineProperty(student, &quot;name&quot;, &#123;    get()&#123;        console.log(&#39;拦截到获取&#39;);        return val    &#125;,    set(newVal)&#123;        console.log(&#39;拦截到写入&#39;);        val &#x3D; newVal;    &#125;,    configurable:true,    enumerable: true,&#125;)&#125;)(student.name)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="vue2数据劫持"><a href="#vue2数据劫持" class="headerlink" title="vue2数据劫持"></a>vue2数据劫持</h3><p>放上清晰明了的代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 数据劫持 * 监听this属性的修改和获取，访问this.$data */</span><span class="token function">proxyData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>            <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token function">set</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'监听到Vue实例对象的写入'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> newVal<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这也暴露了defineProperty导致Vue2必须通过Vue.set方法来进行响应式属性的添加</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"_island"</span><span class="token punctuation">,</span>  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> objProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 获取值时的捕获器</span>  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">监听到了</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">被获取值</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 设置值时的捕获器</span>  <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> newValue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">监听到了</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">被设置值</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> newValue<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>objProxy<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 监听到了name被获取值</span><span class="token comment">// _island</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>objProxy<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 监听到了age被获取值</span><span class="token comment">// 18</span>objProxy<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"QC2125"</span><span class="token punctuation">;</span><span class="token comment">// 监听到了name被设置值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>objProxy<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 监听到了name被获取值</span><span class="token comment">// QC2125</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h2><p>Proxy对象用于创建一个对象的代理，是用于监听一个对象的相关操作。代理对象可以监听我们对原对象的操作。Proxy对象需要传入两个参数，分别是需要被Proxy代理的对象和一系列的捕获器。</p><h3 id="使用介绍-1"><a href="#使用介绍-1" class="headerlink" title="使用介绍"></a>使用介绍</h3><p>什么是proxy</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj<span class="token operator">=</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'_island'</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> objProxy<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>objProxy<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://qiniu.guet.link/asset/202212180114329.png"></p><p>打印出来可以看到的是一个Proxy对象。下面我们开始看看Proxy中的捕获器对象。</p><p>那么在Proxy也有和defineProperty中 属性描述符 非常相似的参数，就是 捕获器。在实例化Proxy对象时，第二个参数传入的是捕获器集合，我们在其对象内定义一个get捕获器，用于监听获取对象值的操作。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 定义一个普通的对象obj</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"_island"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 代理obj这个对象，并传入get捕获器</span><span class="token keyword">const</span> objProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// get捕获器</span>  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">捕获到对象获取</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">属性的值操作</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 通过代理对象操作obj对象</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>objProxy<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 捕获到对象获取name属性的值操作</span><span class="token comment">// _island</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在objProxy对象的拦截器中新增一个捕获器set，用于监听对象的某个属性被设置时触发。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// set捕获器</span><span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">捕获到对象设置</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">属性的值操作,新值为</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>val<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>objProxy<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"QC2125"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 捕获到对象设置name属性的值操作,新值为QC2125</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>objProxy<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 捕获到对象获取name属性的值操作</span><span class="token comment">// QC2125</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以定义一些行为</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token operator">===</span><span class="token string">'age'</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">"number"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">"该属性的值必须是Number类型"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>对象中的方法</th><th>对应触发条件</th></tr></thead><tbody><tr><td>handler.getPrototypeOf()</td><td>Object.getPrototypeOf 方法的捕捉器</td></tr><tr><td>handler.setPrototypeOf()</td><td>Object.setPrototypeOf 方法的捕捉器</td></tr><tr><td>handler.isExtensible()</td><td>Object.isExtensible 方法的捕捉器</td></tr><tr><td>handler.preventExtensions()</td><td>Object.preventExtensions 方法的捕捉器</td></tr><tr><td>handler.getOwnPropertyDescriptor()</td><td>Object.getOwnPropertyDescriptor 方法的捕捉器。</td></tr><tr><td>handler.defineProperty()</td><td>Object.defineProperty 方法的捕捉器</td></tr><tr><td>handler.handler.has()</td><td>in 操作符的捕捉器</td></tr><tr><td>handler.get()</td><td>属性读取操作的捕捉器</td></tr><tr><td>handler.set()</td><td>属性设置操作的捕捉器</td></tr><tr><td>handler.deleteProperty()</td><td>delete 操作符的捕捉器</td></tr><tr><td>handler.ownKeys()</td><td>Object.getOwnPropertyNames 方法和 Object.getOwnPropertySymbols 方法的捕捉器</td></tr><tr><td>handler.apply()</td><td>函数被apply调用操作的捕捉器</td></tr><tr><td>handler.construct()</td><td>new 操作符的捕捉器</td></tr></tbody></table><p>this指向的问题</p><p>代理目标对象内部的this会自动改变为Proxy代理对象。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj<span class="token operator">=</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'_island'</span><span class="token punctuation">,</span> <span class="token function-variable function">foo</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> <span class="token keyword">this</span> <span class="token operator">===</span> objProxy <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> objProxy<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>objProxy<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="vue3中的proxy"><a href="#vue3中的proxy" class="headerlink" title="vue3中的proxy"></a>vue3中的proxy</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 数据劫持 * 监听this属性的修改和获取，访问this.$data */</span><span class="token function">proxyData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> propKey<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你访问了'</span> <span class="token operator">+</span> propKey<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> propKey<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> propKey<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你设置了'</span> <span class="token operator">+</span> propKey<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'新的'</span> <span class="token operator">+</span> propKey <span class="token operator">+</span> <span class="token string">'='</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> propKey<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//一个对象上设置一个属性。</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>关于数据劫持，Object.defineProperty只能监听到具体的对象属性，而proxy是一个的代理对象，它可以代理我们对原目标的操作，也就是能监听到整个对象，这也就是为什么vue3之后不再需要Vue.$set方法了。</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> vue </tag>
            
            <tag> 源码解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>target和currentTarget</title>
      <link href="/2021/02/03/note/wei-xin-xiao-cheng-xu-target-he-currenttarget/"/>
      <url>/2021/02/03/note/wei-xin-xiao-cheng-xu-target-he-currenttarget/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">catchtap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>callFunction<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>确认<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>点击内部的按钮时，点击事件以冒泡的方式向外扩散，也会触发外层 view 的 tap 事件处理函数。</p><p>此时，对于外层的 view 来说：</p><p>e.target 指向的是触发事件的源头组件，因此，e.target 是内部的按钮组件</p><p>e.currentTarget 指向的是当前正在触发事件的那个组件，因此，e.currentTarget 是当前的 view 组件</p><p>所以这基本与原生html一致，只是多了currentTarget</p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组删除的几种方法</title>
      <link href="/2021/01/30/note/js-mian-shi-s-shu-zu-shan-chu-de-ji-chong-fang-fa/"/>
      <url>/2021/01/30/note/js-mian-shi-s-shu-zu-shan-chu-de-ji-chong-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="1-splice-操作方法"><a href="#1-splice-操作方法" class="headerlink" title="1. splice()操作方法"></a>1. splice()操作方法</h2><p>splice意为拼接，捻接（有一个api形近词意为slice 切片的单词，可用于软靠背）</p><p>在JavaScript的Array对象中提供了一个splice()方法用于对数组进行特定的操作。splice()恐怕要算最强大的数组方法了，他的用法有很多种，在此只介绍删除数组元素的方法。在删除数组元素的时候，它可以删除任意数量的项，只需要指定2个参数：要删除的第一项的位置和要删除的项数。</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">var colors &#x3D; [&quot;red&quot;, &quot;blue&quot;, &quot;grey&quot;];var color &#x3D; colors.splice(0, 1);console.log(color); &#x2F;&#x2F; &quot;red&quot;console.log(colors); &#x2F;&#x2F; [&quot;blue&quot;, &quot;grey&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-pop-栈方法"><a href="#2-pop-栈方法" class="headerlink" title="2. pop()栈方法"></a>2. pop()栈方法</h2><p>pop意为弹出,弹出并返回数组中的最后一项，某种程度上也可以当做删除用。</p><p>JavaScript中的Array对象提供了一个pop()栈方法用于</p><p>栈数据结构的访问规则是FILO（First In Last Out，先进后出），栈操作在栈顶添加项，从栈顶移除项，使用pop()方法，它能移除数组中的最后一项并返回该项，并且数组的长度减1。</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">var colors &#x3D; [&quot;red&quot;, &quot;blue&quot;, &quot;grey&quot;];var color &#x3D; colors.pop();console.log(color); &#x2F;&#x2F; &quot;grey&quot;console.log(colors); &#x2F;&#x2F; [&quot;red&quot;, &quot;blue&quot;]console.log(colors.length); &#x2F;&#x2F; 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-shift-队列方法"><a href="#3-shift-队列方法" class="headerlink" title="3. shift()队列方法"></a>3. shift()队列方法</h2><p>shift,意为改变，转换，移位。是键盘上的shift键。</p><p>JavaScript中的Array对象提供了一个shift()队列方法用于弹出并返回数组中的第一项，某种程度上也可以当做删除用。</p><p>队列数据结构的访问规则是FIFO（First In First Out，先进先出），队列在列表的末端添加项，从列表的前端移除项，使用shift()方法，它能够移除数组中的第一个项并返回该项，并且数组的长度减1。</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">var colors &#x3D; [&quot;red&quot;, &quot;blue&quot;, &quot;grey&quot;];var color &#x3D; colors.shift();console.log(color); &#x2F;&#x2F; &quot;red&quot;console.log(colors);&#x2F;&#x2F; [&quot;blue&quot;, &quot;grey&quot;]console.log(colors.length); &#x2F;&#x2F; 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-delete-和-length"><a href="#4-delete-和-length" class="headerlink" title="4. delete 和 length"></a>4. delete 和 length</h2><p>delete操作符可以删除数组的任意可改变元素,但是length不会改变,下标也不会改变。</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">var colors &#x3D; [&quot;red&quot;, &quot;blue&quot;, &quot;grey&quot;];delete colors[0];console.log(colors); &#x2F;&#x2F; [undefined, &quot;blue&quot;, &quot;grey&quot;]console.log(colors.length); &#x2F;&#x2F; 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>数组的length长度是可写的，可以通过length长度来删除数组末尾元素</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">var colors &#x3D; [&quot;red&quot;, &quot;blue&quot;, &quot;grey&quot;];colors.length &#x3D; 2;console.log(colors); &#x2F;&#x2F; [&quot;red&quot;, &quot;blue&quot;]console.log(colors.length); &#x2F;&#x2F; 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VueX面试题综合</title>
      <link href="/2021/01/30/note/vue-mian-shi-vuex-mian-shi-ti-zong-he/"/>
      <url>/2021/01/30/note/vue-mian-shi-vuex-mian-shi-ti-zong-he/</url>
      
        <content type="html"><![CDATA[<p>vuex概念:</p><p>vuex是一个状态管理工具，将状态放在仓库中，让其它组件调用</p><p>vue是单向数据流，子组件不能直接修改父组件的数据，而通过vuex状态管理实现：把组件的共享状态抽取出来，以一个全局单例模式管理。在这种模式下，我们的组件树构成了一个巨大的“视图”，不管在树的哪个位置，任何组件都能获取状态或者触发行为！<br>vuex的整体结构并不复杂，知识规范比较繁琐，自己多试几遍就好了。</p><p>简单使用：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn(val)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;str&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btns(val)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>actions<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">import &#123;mapState&#125; from &#39;vuex&#39;import &#123;mapGetters&#125; from &#39;vuex&#39;import &#123;mapActions&#125; from &#39;vuex&#39;export default&#123;    name:&quot;Home&quot;,    computed:&#123;        ...mapState([&#39;str&#39;]),        &#x2F;&#x2F;modules调用        ...mapState(&#123;            cartName:state &#x3D;&gt; state.cart.name,        &#125;),        ...mapGetters([&#39;changeArr&#39;])    &#125;,    methods:&#123;        ...mapMutations([&#39;btns&#39;])        ...mapActions([&#39;btns&#39;])    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-JS" data-language="JS"><div class="caption"><span>modules/cart.js</span></div><code class="language-JS">&#x2F;&#x2F;modules 定义export default &#123;    state:&#123;        name:&#39;购物车&#39;    &#125;,    getters:&#123;    &#125;,    mutations:&#123;            &#125;,    actions:&#123;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-JS" data-language="JS"><div class="caption"><span>store/index.js</span></div><code class="language-JS">&#x2F;&#x2F;modules 导入import &#39;cart&#39; from &#39;cart.js&#39;export default new Vuex(&#123;    &#x2F;&#x2F;modules 引用    modules：&#123;        cart,    &#125;，        state:&#123;        str:&quot;你好&quot;,        arr:[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;],        num:0    &#125;,    getters:&#123;        changeArr(state)&#123;            return state.arr.join(&#39;-&#39;);        &#125;    &#125;,    mutations:&#123;        btn(state,val)&#123;            console.log(val);        &#125;,    &#125;，    actions:&#123;        btns(&#123;commit&#125;,state)&#123;            console.log(val);        &#125;,    &#125;   &#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-Vuex有哪些属性呢？"><a href="#1-Vuex有哪些属性呢？" class="headerlink" title="1. Vuex有哪些属性呢？"></a>1. Vuex有哪些属性呢？</h2><p>   state：存放状态</p><p>   getters：返回对state数据的装饰.例如返回格式化后的时间。相当于computed，有缓存。</p><p>   mutations：相当于methods,并且是同步，异步可能会产生错误</p><p>   actions：不是直接变更状态，而是提交mutations（这是约定，当然可以写方法，但是不推荐）  actions是异步的</p><p>   modules：细分以上模块，让仓库更好管理 , 如何使用以上已标出</p><h2 id="2-mutations和actions的区别？"><a href="#2-mutations和actions的区别？" class="headerlink" title="2. mutations和actions的区别？"></a>2. mutations和actions的区别？</h2><p>   mutations只能进行同步操作，不能进行异步，否则Vue调式工具无法正常的监听</p><p>   例如<br>   <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">mutations</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token function">btn</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>val</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         state<span class="token punctuation">.</span>num<span class="token operator">++</span>           <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>，<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>   这样调式是没有办法进行正常监听的,需要用actions调用mutations</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">actions</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token function">btns</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>commit<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>state</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-Vue是单向数据流还是双向数据流"><a href="#3-Vue是单向数据流还是双向数据流" class="headerlink" title="3. Vue是单向数据流还是双向数据流?"></a>3. Vue是单向数据流还是双向数据流?</h2><p>   Vuex是单向数据流</p><p>   A B C D 组件只能使用state数据，但是不能更改</p>   <pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">methods:&#123; changeVal()&#123;     console.log(this.cartName);&#x2F;&#x2F;可以输出     this.cartName &#x3D; &#39;汉&#39;;&#x2F;&#x2F;无法更改，只能使用Vuex的mutations &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   双向数据是 v-model 互相改变 , 而如果v-model 绑定 cartName ，就只能显示，更改会报错</p><h2 id="4-Vuex如何做持久化存储"><a href="#4-Vuex如何做持久化存储" class="headerlink" title="4. Vuex如何做持久化存储"></a>4. Vuex如何做持久化存储</h2><p>   为什么页面改变了Vuex的值，刷新却变了？</p><p>   Vuex本身不是持久化存储，持久化存储要使用cookie、localStorage</p><h3 id="4-1-使用localStorage"><a href="#4-1-使用localStorage" class="headerlink" title="4.1 使用localStorage"></a>4.1 使用localStorage</h3><pre class="line-numbers language-JS" data-language="JS"><div class="caption"><span>store/index.js</span></div><code class="language-JS">state:&#123; str:localStorage.getItem(&#39;str&#39;)||1;&#125;,mutations:&#123; changeStr(state,val)&#123;     localStorage.setItem(&#39;str&#39;,val); &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-使用插件"><a href="#4-2-使用插件" class="headerlink" title="4.2 使用插件"></a>4.2 使用插件</h3><p>   <a href="https://juejin.cn/post/6844903650427404302">https://juejin.cn/post/6844903650427404302</a></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重绘回流与性能优化</title>
      <link href="/2021/01/29/note/html-css-chong-hui-hui-liu-yu-xing-neng-you-hua/"/>
      <url>/2021/01/29/note/html-css-chong-hui-hui-liu-yu-xing-neng-you-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="1-什么是重绘？"><a href="#1-什么是重绘？" class="headerlink" title="1. 什么是重绘？"></a>1. 什么是重绘？</h2><p>重绘：当渲染树中的某些元素需要更新属性时，这些属性只影响元素的外观和样式，而不影响布局操作，例如background-color，我们称此类操作为重绘。</p><h2 id="2-什么是回流？"><a href="#2-什么是回流？" class="headerlink" title="2. 什么是回流？"></a>2. 什么是回流？</h2><p>回流也叫重排：当渲染树的部分（或全部）因元素的大小、布局、隐藏等变化而需要重建时，会影响布局操作。这种操作称为回流。</p><p>常见的导致回流的属性和方法：</p><p>任何改变元素形状（元素的位置和大小）的操作都会触发回流。</p><p>(1) 添加或移除可见的DOM元素；<br>(2) 元素尺寸变化——margin、padding、border、width、height<br>(3) 内容变化，如用户在输入框中输入文字<br>(4) 浏览器窗口大小发生变化resize事件发生时<br>(5) 计算offsetWidth和offsetHeight属性（浏览器需要返回最新的布局信息，触发回流重绘）<br>(6) 设置style属性的值<br>(7) 修改网页默认字体时。</p><h2 id="3-重绘回流总结-："><a href="#3-重绘回流总结-：" class="headerlink" title="3. 重绘回流总结 ："></a>3. 重绘回流总结 ：</h2><p>回流一定会发生重绘，而重绘不一定会导致回流。回流的成本远高于重绘，在父节点中改变子节点很可能导致父节点的一系列回流。</p><h2 id="4-性能优化："><a href="#4-性能优化：" class="headerlink" title="4. 性能优化："></a>4. 性能优化：</h2><h3 id="4-1-合并dom与样式的操作"><a href="#4-1-合并dom与样式的操作" class="headerlink" title="4.1 合并dom与样式的操作"></a>4.1 合并dom与样式的操作</h3><p>未修改前:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">const el = document.<span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>el.style.padding = <span class="token string">'5px'</span><span class="token punctuation">;</span>el.style.borderLeft = <span class="token string">'1px'</span><span class="token punctuation">;</span>el.style.borderRight = <span class="token string">'2px'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>新版浏览器对其有优化，旧版的浏览器或者在上面代码执行的时候，有其他代码访问了布局信息(上文中的会触发回流的布局信息)，那么就会导致三次重排。</p><p>修改后：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">const el = document.<span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>el.style.cssText += <span class="token string">'border-left: 1px; border-right: 2px; padding: 5px;'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-2-脱离文档流后批量修改DOM"><a href="#4-2-脱离文档流后批量修改DOM" class="headerlink" title="4.2 脱离文档流后批量修改DOM"></a>4.2 脱离文档流后批量修改DOM</h3><p>批量修改DOM</p><p>当我们需要对DOM对一系列修改的时候，可以通过以下步骤减少回流重绘次数：</p><p>使元素脱离文档流</p><p>对其进行多次修改</p><p>将元素带回到文档中。</p><p>该过程的第一步和第三步可能会引起回流，但是经过第一步之后，对DOM的所有修改都不会引起回流重绘，因为它已经不在渲染树了。<br>有三种方式可以让DOM脱离文档流，这里只讨论一种：</p><p>隐藏元素，应用修改，重新显示</p><p>考虑我们要执行一段批量插入节点的代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">appendDataToElement</span><span class="token punctuation">(</span><span class="token parameter">appendToElement<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> li<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        li<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">'text'</span><span class="token punctuation">;</span>        appendToElement<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'list'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">appendDataToElement</span><span class="token punctuation">(</span>ul<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果直接执行，由于每次循环都会插入一个新的节点，那么将导致浏览器每次都回流一次。<br>我们可以使用这三种方式进行优化:<br>隐藏元素，应用修改，重新显示</p><p>这个只会在展示和隐藏节点的时候，产生两次回流</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">appendDataToElement</span><span class="token punctuation">(</span><span class="token parameter">appendToElement<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> li<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        li<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">'text'</span><span class="token punctuation">;</span>        appendToElement<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'list'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ul<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span><span class="token function">appendDataToElement</span><span class="token punctuation">(</span>ul<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>ul<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'block'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-避免触发同步布局事件"><a href="#4-3-避免触发同步布局事件" class="headerlink" title="4.3 避免触发同步布局事件 *"></a>4.3 避免触发同步布局事件 *</h3><p>在上文，常见的回流场景中有offsetWidth和offsetHeight，还有读取dom读写分离同理</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">initP</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> paragraphs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        paragraphs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> box<span class="token punctuation">.</span>offsetWidth <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每一次循环都会强制浏览器刷新队列。可以优化为:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> width <span class="token operator">=</span> box<span class="token punctuation">.</span>offsetWidth<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">initP</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> paragraphs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        paragraphs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> width <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个对比的性能差距就比较明显。</p><h3 id="4-4-对于复杂动画效果-使用绝对定位让其脱离文档流"><a href="#4-4-对于复杂动画效果-使用绝对定位让其脱离文档流" class="headerlink" title="4.4 对于复杂动画效果,使用绝对定位让其脱离文档流 *"></a>4.4 对于复杂动画效果,使用绝对定位让其脱离文档流 *</h3><h3 id="4-5-css3硬件加速（GPU加速）"><a href="#4-5-css3硬件加速（GPU加速）" class="headerlink" title="4.5 css3硬件加速（GPU加速） *"></a>4.5 css3硬件加速（GPU加速） *</h3><p>触发硬件加速的常见css属性：</p><p>transform<br>opacity<br>filters<br>Will-change</p><p>transform、opacity、filters这些动画不会引起回流重绘(但会提高内存占用)</p><p>关于GPU加速的原理看这篇文章 <a href="https://juejin.cn/post/6844903702172532744#heading-2">https://juejin.cn/post/6844903702172532744#heading-2</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[控制台查看重绘回流过程]<a href="https://juejin.cn/post/6953029989306466317">https://juejin.cn/post/6953029989306466317</a></p><p>[性能优化具体方案]<a href="https://juejin.cn/post/6844903779700047885#heading-8">https://juejin.cn/post/6844903779700047885#heading-8</a></p>]]></content>
      
      
      <categories>
          
          <category> html&amp;css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 重绘回流 </tag>
            
            <tag> 性能优化 </tag>
            
            <tag> 卷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm的使用</title>
      <link href="/2021/01/24/note/qian-duan-gong-cheng-hua-npm-de-shi-yong/"/>
      <url>/2021/01/24/note/qian-duan-gong-cheng-hua-npm-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="1-npm常用命令"><a href="#1-npm常用命令" class="headerlink" title="1. npm常用命令"></a>1. npm常用命令</h2><p>npm init –yes 初始化一些信息例如项目入口、作者、版本等 (npm必须，cnpm不需要)</p><p>npm install module_name -S 即 –save ，写入package.json的dependencies (实测直接使用cnpm i xxx 效果一样)</p><p> npm install module_name -D 即 –save-dev ，写入package.json的devDependencies</p><p>npm install module_name -g 全局安装，命令行使用，位置在C:\Users\huawei\AppData\Roaming\npm\node_modules</p><p>npm install module_name 本地安装，只下载到 .&#x2F;node_modules下，不写入package.json</p><p>npm uninstall module_name 卸载本地依赖xxx （如果包不多，可直接删除module重新安装）</p><p>npm uninstall module_name -g 卸载全局依赖xxx，即命令行</p><p>npm update module_name 更新包更新lock中的版本，可简写 npm up</p><p>npm install –production  安装dependencies中的依赖，用于生产环境</p><h2 id="2-dependencies与devDependencies有什么区别呢？"><a href="#2-dependencies与devDependencies有什么区别呢？" class="headerlink" title="2. dependencies与devDependencies有什么区别呢？"></a>2. dependencies与devDependencies有什么区别呢？</h2><p>devDependencies 里面的插件只用于开发环境，不用于生产环境</p><p>dependencies 里面的需要发布到生产环境</p><p>例如，一个前端项目，在项目中你需要使用element-ui构建你的开发和本地运行环境,这时你就要放到dependencies里。</p><p>webpack是你用来压缩代码，打包等需要的工具，程序实际运行的时候并不需要，所以放到devDependencies里。</p><h2 id="3-快速安装"><a href="#3-快速安装" class="headerlink" title="3. 快速安装"></a>3. 快速安装</h2><p>普通快速安装：cnpm i ，安装package.json里的所有插件</p><p>生产环境安装：npm install –production ，只安装 dependencies 目录下的依赖</p><h2 id="4-镜像"><a href="#4-镜像" class="headerlink" title="4. 镜像"></a>4. 镜像</h2><p>vue-element-admin作者<br>建议不要用 cnpm 安装 会有各种诡异的bug 可以通过如下操作解决 npm 下载速度慢的问题<br>npm install –registry&#x3D;<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></p><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p>在你或者别人 clone 这个库进行开发调试的时候，可以通过 npm install 一键安装dependencies和 devDependencies 这两个配置下的所有依赖，而不用去一行行找你到底在文件中引用了那些依赖。当项目上线时，删掉node_modules，在线上使用 npm install –production</p><p>cnpm是npm的中国镜像，和npm不一样 其中npm需要init命令，而且生成会生成lock文件 而cnpm不需要init命令 也不会生成lock文件（lock文件会锁定安装版本）</p>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this的四种绑定：默认、new、显式、隐式</title>
      <link href="/2021/01/16/note/js-mian-shi-this-de-si-chong-bang-ding-mo-ren-new-xian-shi-yin-shi/"/>
      <url>/2021/01/16/note/js-mian-shi-this-de-si-chong-bang-ding-mo-ren-new-xian-shi-yin-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>this的四种绑定分别是：</p><p>默认、new、显式、隐式</p><p>这四种绑定分别与函数的四种调用相关联：</p><p>默认绑定：函数直接调用。非严格模式下this指向window，严格是undefined</p><p>new绑定：函数作为构造函数调用。this指向新建对象</p><p>显式绑定：函数使用call.apply调用。this执行定义的对象</p><p>隐式绑定：函数作为属性方法调用。this指向调用的属性</p><h2 id="绑定优先级"><a href="#绑定优先级" class="headerlink" title="绑定优先级"></a>绑定优先级</h2><p>new &gt; 显式 &gt; 隐式 &gt; 默认</p><p>例如 new Person.call(window) 后，this以new为准，指向新对象而不是window</p><h2 id="多重硬绑定的结果"><a href="#多重硬绑定的结果" class="headerlink" title="多重硬绑定的结果"></a>多重硬绑定的结果</h2><p>硬绑定指的是bind。如果一个函数进行了多重硬绑定，那么绑定的结果将以第1次为准。原因是bind返回的是一个闭包函数，多次绑定对第一次的结果并不影响。</p><h2 id="软绑定"><a href="#软绑定" class="headerlink" title="软绑定"></a>软绑定</h2><p>软绑定旨在解决bind后无法修改this和参数。</p><p><a href="https://juejin.cn/post/6844904113352736776#heading-10">this绑定的四种方式</a></p><p><a href="https://juejin.cn/post/6844903609126092813">软绑定</a></p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> this </tag>
            
            <tag> call </tag>
            
            <tag> apply </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>\@import和link的区别</title>
      <link href="/2021/01/13/note/html-css-mian-shi-import-he-link-de-qu-bie/"/>
      <url>/2021/01/13/note/html-css-mian-shi-import-he-link-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sty1.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token atrule"><span class="token rule">@import</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'sty2.css'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span></span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- link和import都可以引入样式1.1、link属于html标签，而@import是css提供的。1.2、页面被加载时，link会同时被加载，而@import引用的css会等到页面被加载完再加载的。1.3、兼容性问题：@import只在IE5以上才能识别，而link是html标签，无兼容性问题。（@import css2才出来）1.4、DOM操作:DOM可以操作link中的样式，而不可以操作@import中的样式。(理由是第一点)    --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">height</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span>  <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">height</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">var</span> val1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> val2<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> num1<span class="token operator">=</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> num2<span class="token operator">=</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">2</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">//console.log(val1===val2);//引用值1true</span>        <span class="token comment">//console.log(num1===num2);//引用地址false</span>        <span class="token comment">//console.log(num1.a===num2.a);//true</span>        <span class="token comment">//console.log(document.getElementsByTagNameNS()); xml的API</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> html&amp;css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 卷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stram流</title>
      <link href="/2021/01/07/note/node-steam-liu-dai/"/>
      <url>/2021/01/07/note/node-steam-liu-dai/</url>
      
        <content type="html"><![CDATA[<p>流就是加载一点处理一点，类似水流的模式。<br><a href="https://www.bilibili.com/video/BV18a411j7mS/?spm_id_from=333.788&vd_source=17b6e718b4a89180f44435d327510bf5"></a></p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> steam </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>z-index不生效的原因</title>
      <link href="/2021/01/05/note/html-css-gai-nian-z-index-bu-sheng-xiao-de-yuan-yin/"/>
      <url>/2021/01/05/note/html-css-gai-nian-z-index-bu-sheng-xiao-de-yuan-yin/</url>
      
        <content type="html"><![CDATA[<p>1.没有设置position属性或属性值为static，z-index只作用于定位元素</p><p>2.层叠效果受祖先元素影响，祖先元素z-index值小,当前元素z-index值再大也没有效果</p><p>一般情况记住上面两种就可，具体还有结合层叠上下文</p><p>主要优先级如下：父层叠上下文的背景和边框  ＜  z-index&#x3D;-1   ＜  块级元素  ＜  浮动元素   ＜  行内、行内块元素   ＜   z-index&#x3D;0或auto   ＜   z-index正数。</p>]]></content>
      
      
      <categories>
          
          <category> html&amp;css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> 卷 </tag>
            
            <tag> z-index </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中onclick方法提到的内联语句是什么</title>
      <link href="/2021/01/01/note/vue-vue-zhong-onclick-fang-fa-ti-dao-de-nei-lian-yu-ju-shi-shi-me/"/>
      <url>/2021/01/01/note/vue-vue-zhong-onclick-fang-fa-ti-dao-de-nei-lian-yu-ju-shi-shi-me/</url>
      
        <content type="html"><![CDATA[<p><a href="https://v2.cn.vuejs.org/v2/api/#v-on">在vue文档有那么一句话</a></p><p><img src="https://qiniu.guet.link/asset/202211240007862.png"></p><p>那么内联语句是什么呢？</p><p>其实内联语句就是一个卸载vue模板的js语句，与内联样式style的概念一样。</p><p>图中的意思是，你可以写一个methods方法，那么这个方法将作为v回调函数使用，或者填写一个内联语句，那么就执行这个内联语句。</p><p>也就是我们在使用内联语句的时候可以随意传参了。</p><p><a href="https://segmentfault.com/q/1010000020653326">https://segmentfault.com/q/1010000020653326</a></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 封装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVC-MVVM-三层架构</title>
      <link href="/2020/12/28/note/qian-duan-bian-cheng-mvc-mvvm-san-ceng-jia-gou/"/>
      <url>/2020/12/28/note/qian-duan-bian-cheng-mvc-mvvm-san-ceng-jia-gou/</url>
      
        <content type="html"><![CDATA[<h2 id="1-MVC"><a href="#1-MVC" class="headerlink" title="1. MVC"></a>1. MVC</h2><h3 id="1-1-什么是MVC"><a href="#1-1-什么是MVC" class="headerlink" title="1.1 什么是MVC*"></a>1.1 什么是MVC*</h3><p>这里面说的MVC其实是一个模型(也可说成是开发模式)，我们根据这个模型设计程序。通俗的说就是一个模子。</p><p>MVC(Model-View-Controler)，M是指业务模型，V是指用户界面，C则是控制器：</p><p>（1）视图（View）：负责界面的显示，以及与用户的交互功能，例如表单、网页等。</p><p>（2）控制器（Controller）：可以理解为一个分发器，用来决定对于视图发来的请求，需要用哪一个模型来处理，以及处理完后需要跳回到哪一个视图。即用来连接视图和模型。</p><p>实际开发中，通常用控制器对客户端的请求数据进行封装（如将form表单发来的若干个表单字段值，封装到一个实体对象中），然后调用某一个模型来处理此请求，最后再转发请求（或重定向）到视图（或另一个控制器）。</p><p>（3）模型（Model）：模型持有所有的数据、状态和程序逻辑。模型接受视图数据的请求，并返回最终的处理结果。</p><h3 id="1-2-MVC的来源"><a href="#1-2-MVC的来源" class="headerlink" title="1.2 MVC的来源"></a>1.2 MVC的来源</h3><p>它最初在Smalltalk中应用,主要思想是用面向对象的设计方法将用户界面设计与程序的业务逻辑分离开来.使用这种模式,可以开发出具有伸缩性、易于扩展、便于维护的软件系统.MVC主要由3个部分组成:模块(Model)、视图(View)和控制器(Controller),三者既分工又合作地完成系统的各项功能。</p><h3 id="1-3-MVC是设计模式吗？"><a href="#1-3-MVC是设计模式吗？" class="headerlink" title="1.3 MVC是设计模式吗？"></a>1.3 MVC是设计模式吗？</h3><p>不是，正如上面所说，MVC其实是一个模型(也可说成是开发模式)。<br>设计模式的意思是为解决一系列相同问题成功经验的总结，例如java中有23种设计模式，常用的单例模式，值对象模式，工厂模式，简单工厂等,这些才是模式。<br>而模型适用于所有需要这个模子的地方。</p><h3 id="1-4-service层，dao层属于MVC哪一层？"><a href="#1-4-service层，dao层属于MVC哪一层？" class="headerlink" title="1.4 service层，dao层属于MVC哪一层？"></a>1.4 service层，dao层属于MVC哪一层？</h3><p>service层，dao层的区分属于三层架构的东西，在MVC中会将它们划成Model</p><h3 id="1-5-前端的MVC"><a href="#1-5-前端的MVC" class="headerlink" title="1.5 前端的MVC"></a>1.5 前端的MVC</h3><p>参见<a href="https://zhuanlan.zhihu.com/p/22943208">https://zhuanlan.zhihu.com/p/22943208</a></p><h2 id="2-MVVM"><a href="#2-MVVM" class="headerlink" title="2. MVVM"></a>2. MVVM</h2><p>Vue就是MVVM框架，MVVM中的M是模型，V是视图，VM是视图模型。而Vue实例就是VM将数据和视图进行绑定，双向绑定。<br>模型就是data数据 视图就是template模板 vm就是vue实例，将模板和数据联系起来</p><p>首先用原生的HTML css js 肯定也能做网站，但是用Vue框架就是因为它更便捷，更易维护。</p><p>例如原生一个文件里有一千行代码，但是使用Vue的话，就可以组件化开发。home.vue &#x3D;&gt; search.vue ，方便维护。</p><h2 id="3-三层架构"><a href="#3-三层架构" class="headerlink" title="3. 三层架构"></a>3. 三层架构</h2><h3 id="3-1-什么是三层架构？"><a href="#3-1-什么是三层架构？" class="headerlink" title="3.1 什么是三层架构？"></a>3.1 什么是三层架构？</h3><p>Web开发一般分成三层，指表示层（USL，User Show Layer）、业务逻辑层（BLL，Business Logic Layer）、数据访问层（DAL，Data Access Layer </p><p>业务逻辑层可能命名为：service层，数据访问层可能命名为：dao层</p><p>MVC本身与前后端无关，仅仅前端自己，也可以用MVVM来实现，像React、Vue都是这样的。<br>如果你是从整个服务角度宏观来看的话，MVC里面的M和C在后端，V在前端；MVVM中的M和VM在后端，V在前端（也有人认为VM不一定在后端，我倾向于VM和M的关系更紧密，实现也一般都在后端）</p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>MVC和MVVM是一类概念，他们都更关注视图层，三层架构则不同，关注表示层、业务逻辑层和数据访问层。</p><p><a href="https://www.zhihu.com/question/24291079/answer/27339010">吊里吊气的的三层架构和MVC</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> MVC </tag>
            
            <tag> MVVM </tag>
            
            <tag> 三层架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迭代器</title>
      <link href="/2020/12/22/note/js-gai-nian-d-die-dai-qi/"/>
      <url>/2020/12/22/note/js-gai-nian-d-die-dai-qi/</url>
      
        <content type="html"><![CDATA[<p>JavaScript提供了四种数据集合，分别是array、object、map和set。</p><p>这四种数据集合的数据结构各不相同，但是都可以被循环遍历，这一切的背后都离不开iteration(迭代器)的支撑。</p><p>遍历器（Iterator）是一种机制，也可以说是一种接口，它为各种不同的数据结构提供了统一的访问机制。</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">&#x2F;&#x2F;迭代器let arr &#x3D; [1, 2, 3, 4]const fn &#x3D; arr[Symbol.iterator]();fn.next();fn.next()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>任何数据结构只要配置了 Iterator 接口，就可以完成遍历操作（即依次处理该数据结构的所有成员）</p><p>当我们使用for…of循环遍历数组数据结构时，该循环会自动去寻找 Iterator 接口并执行遍历操作。</p><p>在js里原生具备 Iterator 接口的数据结构如下：</p><p>Array<br>Map<br>Set<br>String<br>TypedArray<br>函数的 arguments 对象<br>NodeList 对象<br>因此，上面的任意一个数据类型都支持for…of遍历，也可以调用自身的symbol.iteration方法，举个🌰：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//调用原生Symbol.iterator方法，返回一个遍历器对象</span><span class="token keyword">let</span> iter <span class="token operator">=</span> arr<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用遍历器上面的next方法，返回一个代表当前成员的信息对象</span>iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &#123; value: 'a', done: false &#125;</span>iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &#123; value: 'b', done: false &#125;</span>iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &#123; value: 'c', done: false &#125;</span>iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &#123; value: undefined, done: true &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> 数组 </tag>
            
            <tag> 迭代器 </tag>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>keep-alive理解与总结</title>
      <link href="/2020/12/21/note/vue-mian-shi-tan-tan-keep-alive-de-li-jie/"/>
      <url>/2020/12/21/note/vue-mian-shi-tan-tan-keep-alive-de-li-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="谈谈keep-alive的理解"><a href="#谈谈keep-alive的理解" class="headerlink" title="谈谈keep-alive的理解"></a>谈谈keep-alive的理解</h1><h2 id="1-什么是keep-alive"><a href="#1-什么是keep-alive" class="headerlink" title="1.什么是keep-alive?"></a>1.什么是keep-alive?</h2><p>keep-alive就是Vue自带的一个组件，它可以用来缓存组件，提高页面性能。</p><p>注意这个 <keep-alive> 要求被切换到的组件都有自己的名字，不论是通过组件的 name 选项还是局部&#x2F;全局注册。</p><h2 id="2-使用场景有哪些？"><a href="#2-使用场景有哪些？" class="headerlink" title="2.使用场景有哪些？"></a>2.使用场景有哪些？</h2><p>例如一个商品的详情页组件，用户不小心返回了，再次进入就得重新网络请求。</p><p>那么我们就可以用keep-alive来进行缓存，在activated上进行id判断。如果id相同，那么直接使用缓存就行;如果id不同，那么才需要发送网络请求;</p><p>逻辑如下:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">content</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function">activated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">'http://xxx'</span><span class="token punctuation">,</span>            <span class="token literal-property property">params</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">id</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>id            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> res<span class="token punctuation">.</span>content<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-keep-alive的使用方法"><a href="#3-keep-alive的使用方法" class="headerlink" title="3. keep-alive的使用方法"></a>3. keep-alive的使用方法</h2><h2 id="3-1-组件属性缓存"><a href="#3-1-组件属性缓存" class="headerlink" title="3.1 组件属性缓存"></a>3.1 组件属性缓存</h2><p>include和exclude指定是否缓存某些组件</p><p>(1) include属性</p><p>include 包含的意思。值为字符串或正则表达式或数组。只有组件的名称与include的值相同的才会被缓存，即指定哪些被缓存，可以指定多个被缓存。这里以字符串为例，指定多个组件缓存，语法是用逗号隔开。如下：</p><p>&#x2F;&#x2F; 指定home组件和about组件被缓存</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">&lt;keep-alive include&#x3D;&quot;home,about&quot; &gt;    &lt;router-view&gt;&lt;&#x2F;router-view&gt;&lt;&#x2F;keep-alive&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>(2) exclude属性</p><p>exclude相当于include的反义词，就是除了的意思，指定哪些组件不被缓存，用法和include类似，如下：</p><p>&#x2F;&#x2F; 除了home组件和about组件别的都缓存，本例中就是只缓存detail组件</p><pre class="line-numbers language-Js" data-language="Js"><code class="language-Js">&lt;keep-alive exclude&#x3D;&quot;home,about&quot; &gt;    &lt;router-view&gt;&lt;&#x2F;router-view&gt;&lt;&#x2F;keep-alive&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注：<br>keep-alive除了include和exclude属性之外，还有一个属性就是max属性，这个max一般情况用的不是太多，主要目的就是控制一下被缓存的组件的个数，后缓存的就会把先缓存的给挤掉线了，也是相当于缓存优化的一中策略了。毕竟适当缓存提高用户体验，缓存过渡，电脑变卡。</p><h2 id="3-2-路由规则-meta"><a href="#3-2-路由规则-meta" class="headerlink" title="3.2 路由规则 meta"></a>3.2 路由规则 meta</h2><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">&#x2F;&#x2F; routes 配置export default [  &#123;    path: &#39;&#x2F;&#39;,    name: &#39;home&#39;,    component: Home,    meta: &#123;      keepAlive: true &#x2F;&#x2F; 需要被缓存    &#125;  &#125;, &#123;    path: &#39;&#x2F;profile&#39;,    name: &#39;profile&#39;,    component: Profile,    meta: &#123;      keepAlive: false &#x2F;&#x2F; 不需要被缓存    &#125;  &#125;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$route.meta.keepAlive<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 这里是会被缓存的视图组件，比如 Home！ --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>!$route.meta.keepAlive<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 这里是不会被缓存的视图组件，比如 Profile！ --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动画的使用</title>
      <link href="/2020/12/20/note/html-css-shi-li-dong-hua-de-shi-yong/"/>
      <url>/2020/12/20/note/html-css-shi-li-dong-hua-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token comment">/* // animation-name规定需要绑定到选择器的 keyframe 名称。。        // animation-duration规定完成动画所花费的时间，以秒或毫秒计。        // animation-timing-function规定动画的速度曲线。 steps        // animation-delay规定在动画开始之前的延迟。        // animation-iteration-count规定动画应该播放的次数。infinite        // animation-direction规定是否应该轮流反向播放动画。 */</span>        <span class="token selector">.ns-frame-4910729</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 2.6300rem<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 2.0000rem<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>./image/ns-frame-4910729.png<span class="token punctuation">)</span></span> no-repeat 0 0<span class="token punctuation">;</span>            <span class="token property">background-size</span><span class="token punctuation">:</span> 10.5200rem 2.0000rem<span class="token punctuation">;</span>            <span class="token property">animation</span><span class="token punctuation">:</span> key-ns-frame-4910729 1000.00ms infinite <span class="token function">steps</span><span class="token punctuation">(</span>4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token atrule"><span class="token rule">@keyframes</span> key-ns-frame-4910729</span> <span class="token punctuation">&#123;</span>            <span class="token selector">0%</span> <span class="token punctuation">&#123;</span>                <span class="token property">background-position</span><span class="token punctuation">:</span> 0 0<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token selector">100%</span> <span class="token punctuation">&#123;</span>                <span class="token property">background-position</span><span class="token punctuation">:</span> -10.5200rem 0<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ns-frame-4910729<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://qiniu.guet.link/img/c7477a56b9f0b5f294a77013734f1d0c.jpeg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> html&amp;css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> html </tag>
            
            <tag> animation </tag>
            
            <tag> \@keyframes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解释型语言和编译型语言是什么</title>
      <link href="/2020/12/20/note/bian-cheng-zhi-shi-jie-shi-xing-yu-yan-he-bian-yi-xing-yu-yan-shi-shi-me/"/>
      <url>/2020/12/20/note/bian-cheng-zhi-shi-jie-shi-xing-yu-yan-he-bian-yi-xing-yu-yan-shi-shi-me/</url>
      
        <content type="html"><![CDATA[<h2 id="1-语言类别"><a href="#1-语言类别" class="headerlink" title="1. 语言类别"></a>1. 语言类别</h2><p>解释型语言和编译型语言<br>编译型：c&#x2F;c++,java<br>解释型：JavaScript,PHP,java</p><p>普遍认为是解释型语言，但在《你不知道的JS》一书当中，作者说到：despite the fact that JavaScript falls under the general category of “dynamic” or “interpreted” languages, it is in fact a compiled language。<br>作者认为，JS是编译型语言。</p><h2 id="2-编译型语言"><a href="#2-编译型语言" class="headerlink" title="2. 编译型语言"></a>2. 编译型语言</h2><p>编译型语言需要编译器编译源码成机器码文件（二进制），编译文件可在某个系统下能被直接识别，但一般是不跨平台的。<br>如c++的编译文件是exe</p><h2 id="3-解释型语言"><a href="#3-解释型语言" class="headerlink" title="3. 解释型语言"></a>3. 解释型语言</h2><p>解释型语言是一种不需要编译，而是通过解释器解释的语言，本质是在运行时编译。</p><h3 id="3-1-脚本语言"><a href="#3-1-脚本语言" class="headerlink" title="3.1 脚本语言"></a>3.1 脚本语言</h3><p>解释型语言的划分在于执行方式，而脚本语言的划分在使用方式</p><p>如JavaScript和PHP（需要后缀名为php才能解释PHP），他们可以嵌套在网页中</p><p>当然也有另一种说解释型语言等同于脚本语言，如Python</p><h2 id="4-Java"><a href="#4-Java" class="headerlink" title="4. Java"></a>4. Java</h2><p>Java拥有编译器和解释器，编译器编译成class字节码，然后通过解释器解释class</p><p>所以它既是编译型语言也是解释型语言</p><h2 id="5-其它"><a href="#5-其它" class="headerlink" title="5. 其它"></a>5. 其它</h2><p>以上说的是编程语言，此外还有标记语言</p><p>如HTML、xml，通过标记来构建一个程序</p><p>编程语言是一个较为笼统的概念、一般把后端的、可写算法写程序的语言称为标记语言</p>]]></content>
      
      
      <categories>
          
          <category> 编程知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 解释型语言 </tag>
            
            <tag> 编译型语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单页应用与多页应用</title>
      <link href="/2020/12/19/note/vue-dan-ye-ying-yong-yu-duo-ye-ying-yong/"/>
      <url>/2020/12/19/note/vue-dan-ye-ying-yong-yu-duo-ye-ying-yong/</url>
      
        <content type="html"><![CDATA[<p>配置vue多页面，生成的vue项目默认是单页面</p><p>  单页面和多页面的优缺点：</p><p>  多页面应用： 一个网址对应一个页面资源<br>  1) 缺点：跳转一个页面都需要重新加载整个页面的资源，页面跳转会刷新！<br>  2) 优点：seo优化好</p><p>  单页面应用：整个网站都只有一个页面，里面通过相关手段展示不同的内容</p><p>  1) 优点：页面的跳转是使用js 实现判断路径的变化，去展示不同的组件内容。 页面自始至终都不会重新加载资源！<br>  2) 优点：维护容易； 复用性强；组件缓存； 体验感好；快发速度快；<br>  3) 缺点：首次访问网页加载慢(因为要加载整个应用资源，相对多页面而言，首次访问多页面应用的某个页面只会加载该页面的资源)，而且如果业务模块越来越多了，会导致首次访问单页面应用加载打包后的资源比之前变的越来越大，加载会变得越来越慢的问题<br>  4)缺点：不利于seo优化！</p><p>Vue多页面应用<br><a href="https://blog.csdn.net/asd577007722/article/details/121401188?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-121401188-blog-120552898.pc_relevant_aa_2&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-121401188-blog-120552898.pc_relevant_aa_2&amp;utm_relevant_index=2">https://blog.csdn.net/asd577007722/article/details/121401188?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-121401188-blog-120552898.pc_relevant_aa_2&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-121401188-blog-120552898.pc_relevant_aa_2&amp;utm_relevant_index=2</a></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> vue </tag>
            
            <tag> 单页应用 </tag>
            
            <tag> 多页应用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>延迟加载JS的方式有哪些</title>
      <link href="/2020/12/16/note/js-mian-shi-y-yan-chi-jia-zai-js-de-fang-shi-you-na-xie/"/>
      <url>/2020/12/16/note/js-mian-shi-y-yan-chi-jia-zai-js-de-fang-shi-you-na-xie/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test1.js<span class="token punctuation">"</span></span> <span class="token attr-name">defer</span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    如果没有defer或async属性，浏览器会立即加载并执行相应的脚本。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    阻塞了后续文档的加载。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    一、defer属性<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    defer的加载与html解析并行（异步），执行会被延迟到整个页面都解析完毕之后再执行。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test1.js<span class="token punctuation">"</span></span> <span class="token attr-name">async</span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    二、sync属性<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    sync的加载和执行与html解析并行（异步），也就是说js加载完了之后会立即执行，不会等待html解析完。（谁先加载谁执行）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    三、让JS最后加载和执行(这种方法只会和html内容一起加载)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    把js外部引入的文件放到页面底部，来让js最后引入，从而加快页面加载速度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    四、sync和defer相同点<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    加载时不会都阻塞html解析<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> html </tag>
            
            <tag> js </tag>
            
            <tag> 延迟加载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xss攻击和sql注入</title>
      <link href="/2020/12/14/note/qian-duan-an-quan-xss-gong-ji-he-sql-zhu-ru/"/>
      <url>/2020/12/14/note/qian-duan-an-quan-xss-gong-ji-he-sql-zhu-ru/</url>
      
        <content type="html"><![CDATA[<h2 id="1-XSS攻击"><a href="#1-XSS攻击" class="headerlink" title="1. XSS攻击"></a>1. XSS攻击</h2><p>XSS攻击又称CSS,全称Cross Site Script (跨站脚本攻击）</p><p>利用网页漏洞注入代码到网页，使用户加载并执行攻击者恶意制造的网页程序。这些恶意网页程序通常是JavaScript，但实际上也可以包括Java。</p><p>攻击成功后，攻击者可能得到包括但不限于更高的权限（如执行一些操作）、私密网页内容、会话和cookie等各种内容。</p><p>例如，在微博内容插入script src&#x3D;”xxx” &#x2F;script 用户在获取内容的时候就会下载脚本</p><h2 id="2-SQL注入"><a href="#2-SQL注入" class="headerlink" title="2. SQL注入"></a>2. SQL注入</h2><p>攻击者通过sql表达式欺骗数据库服务器，获得权限，进一步得到相应的数据信息。</p><p>例如，在登录框内输入 select * from user where username &#x3D; ‘ ‘ or 1&#x3D;1</p><h2 id="3-解决："><a href="#3-解决：" class="headerlink" title="3. 解决："></a>3. 解决：</h2><p>前端可以在利用正则表达式过滤非法字script标签，用户名禁止空格等；后端也要进行类似的操作，当然现在各种框架防护都做得很好。难道还有人手写sql在项目上？</p>]]></content>
      
      
      <categories>
          
          <category> 前端安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> 前端安全 </tag>
            
            <tag> xss攻击 </tag>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>overflow属性sticky不生效的原因</title>
      <link href="/2020/12/12/note/html-css-overflow-shu-xing-sticky-bu-sheng-xiao-de-yuan-yin/"/>
      <url>/2020/12/12/note/html-css-overflow-shu-xing-sticky-bu-sheng-xiao-de-yuan-yin/</url>
      
        <content type="html"><![CDATA[<h2 id="问题与分析"><a href="#问题与分析" class="headerlink" title="问题与分析"></a>问题与分析</h2><p>经过网上的一番搜索，找到了一下原因：</p><p>sticky不生效原因：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span><span class="token property">overflow-x</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token property">overflow-y</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token property">overflow</span><span class="token punctuation">:</span>auto<span class="token punctuation">;</span><span class="token property">overflow-x</span><span class="token punctuation">:</span>auto<span class="token punctuation">;</span><span class="token property">overflow-y</span><span class="token punctuation">:</span>auto<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是，看到这个答案，又自然而然有两个疑问</p><p>（1）为什么overflow：hidden&#x2F;auto 导致sticky不生效？</p><p>overflow：auto 会导致<strong>sticky期望父元素的滚动</strong>，而<strong>开发者期望基于主页面的滚动</strong>，并且这个问题是很难被发现的。</p><p>hidden直接让父元素无法滚动，auto在父元素高度足以容纳内容时也不会进行滚动，所以开发者（me）没有发现sticky的期望变了，还在傻傻的期望基于主页面的滚动。</p><p>明白这点后，我们就知道<strong>overflow：scroll</strong>也会产生同样的问题。可能一些不常用overflow属性也是这样，这里就不再钻牛角尖了，我们只需要明白<strong>sticky期望父元素的滚动</strong>，而<strong>开发者却期望基于主页面的滚动</strong>这点即可。</p><p>（2）overflow-y会影响sticky垂直滚动吗？</p><p>会，overflow-y:hidden改变overflow-x的值。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>sticky元素的父元素设置overflow：hidden&#x2F;auto&#x2F;scroll等属性 会导致<strong>sticky期望父元素的滚动</strong>，而<strong>开发者却期望基于主页面的滚动</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> html&amp;css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> 卷 </tag>
            
            <tag> overflow </tag>
            
            <tag> sticky </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>console是异步还是同步</title>
      <link href="/2020/12/12/note/js-gai-nian-console-shi-yi-bu-huan-shi-tong-bu/"/>
      <url>/2020/12/12/note/js-gai-nian-console-shi-yi-bu-huan-shi-tong-bu/</url>
      
        <content type="html"><![CDATA[<p>开发的时候经常会输出对象类型</p><p>但遇到这种情况，会让我们以为console是异步：</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">let obj &#x3D;&#123;        name:&quot;小明&quot;&#125;console.log(obj);&#x2F;&#x2F;输出&#123;name:小李&#125;，但是手动点击展开时发现是小明obj.name &#x3D; &quot;小李&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><p>其实这并不是异步，而是谷歌浏览器的一种优化，对于引用类型的数据读取是存在延迟的。<br>默认只输出一层。当你点击展开时，又会重新输出内存中的新值和下一层的数据。<br>所以我们会展开是看到的是{name:小明}，展开后又变成了{name:小李}<br>所以console是同步的，而Node环境上是严格同步的，不存在这种情况</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文档中的函数说明的可选参数</title>
      <link href="/2020/12/11/note/qian-duan-bian-cheng-wen-dang-zhong-de-han-shu-shuo-ming-de-ke-xuan-can-shu/"/>
      <url>/2020/12/11/note/qian-duan-bian-cheng-wen-dang-zhong-de-han-shu-shuo-ming-de-ke-xuan-can-shu/</url>
      
        <content type="html"><![CDATA[<p>文档中的方括号代表可选参数。</p><p>方括号为什么要一层层嵌套起来？</p><p>嵌套形式和非嵌套形式都可以，但是含义不同：</p><p>[, a[, b]]：嵌套形式表示 b 是独立于 a 的可选参数，即在传入 a 的情况下，b 可以自由地选择传入或省略。</p><p>[, a, b] ：扁平形式表示 a 与 b 合在一起是一组可选参数，即 a 和 b 必须同时传入或者同时省略，但不能只传入一个。</p><p>总之，你只能自由地拿掉或者保留一整个方括号中的内容，而不能将其拆开。</p>]]></content>
      
      
      <categories>
          
          <category> 前端编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> 概念 </tag>
            
            <tag> 函数说明 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>height属性100%不生效</title>
      <link href="/2020/12/05/note/html-css-bug-height-shu-xing-100-bu-sheng-xiao/"/>
      <url>/2020/12/05/note/html-css-bug-height-shu-xing-100-bu-sheng-xiao/</url>
      
        <content type="html"><![CDATA[<p>height:100%是生效的，没有达到预期可能是忘记给父盒子有效高度，100%占用的是父盒子的有效高度。</p><p>而width:100%也是这样，但是block元素默认width是占满一行，可能会忽略掉这个问题</p>]]></content>
      
      
      <categories>
          
          <category> html&amp;css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么data是一个函数</title>
      <link href="/2020/12/05/note/vue-mian-shi-wei-shi-me-data-shi-yi-ge-han-shu/"/>
      <url>/2020/12/05/note/vue-mian-shi-wei-shi-me-data-shi-yi-ge-han-shu/</url>
      
        <content type="html"><![CDATA[<p>Vue中的组件是实例，如果说它是对象的话，那么就会造成多个实例使用一个对象；如果使用使用函数，那么它每次都会返回一个新对象。</p><p>Q:组件复用不是产生多个实例吗，实例指向的是不同的地址，那么为什么会使用一个对象呢？（误区）<br>A:这里的理解错了，Vue实例是不同的地址没有错，但是里面的data属性可能会指向一个地址。</p><p>延伸：</p><p>Vue中data的使用是通过数据劫持来给this[key] get出来 和set到 this._data[key]中（Vue VM实例中，data存储在_data里）</p><p><a href="https://juejin.cn/post/7099387400207482917/#heading-3">https://juejin.cn/post/7099387400207482917/#heading-3</a></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据类型</title>
      <link href="/2020/11/25/note/js-gai-nian-s-shu-ju-lei-xing/"/>
      <url>/2020/11/25/note/js-gai-nian-s-shu-ju-lei-xing/</url>
      
        <content type="html"><![CDATA[<p>数据类型如下：</p><p>String Number null undefined Boolean Object Symbol Bigint</p><p>JS是基于对象的语言除了null和undefined都基于Object</p><h2 id="基本数据"><a href="#基本数据" class="headerlink" title="基本数据"></a>基本数据</h2><p>基本数据类型存于栈  以栈[变量,值]的形式 它们之间是相互独立的，修改一个变量不会影响其他的变量。需要注意的是 长字符串与双精度的数字是会被放到堆中的（可以f12控制台录制堆内存测试）</p><p>基本类型是不可变的(immutable),只有对象是可变的(mutable). 有时我们会尝试“改变”字符串的内容,但在JS中,任何看似对string值的”修改”操作,实际都是创建新的string值。任何方法都无法改变一个基本类型的值 </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token comment">// (1)创建一个值（基本类型值直接存储在栈内存中即可）；</span><span class="token comment">// (2)创建一个变量a ，把其储存到VO（GLOBAL）中；</span><span class="token comment">// (3)让创建的变量a 和创建的值12 关联在一起 => =赋值的操作</span><span class="token keyword">let</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token comment">// 创建一个变量b，让其和a的值12关联</span>b <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span><span class="token comment">// (1)创建一个值13,</span><span class="token comment">// (2)让创建的变量b 和创建的值13 关联在一起 => =赋值的操作</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://qiniu.guet.link/asset/202212211535928.png"></p><h2 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h2><p>引用数据类型内容存于堆 以栈[变量,堆地址] &#x3D;》堆[内容]的形式 如果两个变量堆地址相同 那么某个变量修改变量属性时，另一个变量也会被影响</p><p>对于引用数组类型重新赋值 相当于改变可堆地址 是不会影响到之前的堆内容的</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-data的使用及性能考量</title>
      <link href="/2020/11/23/note/vue-data-de-shi-yong-ji-xing-neng-kao-liang/"/>
      <url>/2020/11/23/note/vue-data-de-shi-yong-ji-xing-neng-kao-liang/</url>
      
        <content type="html"><![CDATA[<h2 id="1-data是做什么的"><a href="#1-data是做什么的" class="headerlink" title="1. data是做什么的"></a>1. data是做什么的</h2><p>vue中的data会被vue实例所监听，可以到底动态绑定到模板的效果</p><h2 id="2-存放变量的考量"><a href="#2-存放变量的考量" class="headerlink" title="2. 存放变量的考量"></a>2. 存放变量的考量</h2><p>你可以把你不需要监听的数据 Object.freeze 一下再放data字段里，vue 会跳过监听这些对象（vue文档有说明），可以节省很多性能。</p><p>对于常量可以不放在data里面。</p><p>地图实例这些的话最好不要放 data 里，如你所言会有不可避免的 getter&#x2F;setter，但 Object.freeze 也可能会导致对实例本身的一些操作失效。</p><p>数据放 script 标签还是 data 对象里，取决于你模板代码是否直接引用了这些数据，引用了就放 data 对象里。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://segmentfault.com/q/1010000022110706/a-1020000022111192?sort=created">https://segmentfault.com/q/1010000022110706/a-1020000022111192?sort=created</a></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>根据环境配置项目</title>
      <link href="/2020/11/15/note/qian-duan-xiang-mu-gen-ju-huan-jing-pei-zhi/"/>
      <url>/2020/11/15/note/qian-duan-xiang-mu-gen-ju-huan-jing-pei-zhi/</url>
      
        <content type="html"><![CDATA[<p>在项目开发的整个流程中，我们会在开发环境和线上环境</p><p>进行切换。那么做好环境配置，可以让我们对api进行自由切换。</p><p>例如，开发时一个地址，生产时一个地址。</p><p>小鹿线 》Vue项目打包上线  （19127865520已有账号）</p><p><a href="https://www.xuexiluxian.cn/player/play?courseId=8437882162114b308e49663b32146430&amp;chapterId=10ad9176f392445f9a9ba5be72ef23da">https://www.xuexiluxian.cn/player/play?courseId=8437882162114b308e49663b32146430&amp;chapterId=10ad9176f392445f9a9ba5be72ef23da</a></p><p>当然了，你已熟知js全局变量的写法，只需简单的注释就能<br>切换api</p>]]></content>
      
      
      <categories>
          
          <category> 前端项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> 项目部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数式编程</title>
      <link href="/2020/11/11/note/js-mian-shi-han-shu-shi-bian-cheng/"/>
      <url>/2020/11/11/note/js-mian-shi-han-shu-shi-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h2><p>函数式编程是一种强调以函数使用为主的软件开发风格。</p><p>函数式编程的目的是使用函数来<strong>抽象作用在数据之上的控制流和操作</strong>，从而在系统中<strong>消除副作用</strong>并<strong>减少对状态的改变</strong>。</p><h2 id="2-例子"><a href="#2-例子" class="headerlink" title="2. 例子"></a>2. 例子</h2><p>（1）我们要显示一个hello world的文本</p><p>初学者:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#msg'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'&lt;h1>Hello World&lt;/h1>'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>有经验者:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">printMessage</span><span class="token punctuation">(</span><span class="token parameter">elementId<span class="token punctuation">,</span> format<span class="token punctuation">,</span> message</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>elementId<span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>format<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>message<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>format<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span><span class="token function">printMessage</span><span class="token punctuation">(</span><span class="token string">'msg'</span><span class="token punctuation">,</span> <span class="token string">'h1'</span><span class="token punctuation">,</span> <span class="token string">'Hello World'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数式开发者：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> printMessage <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token function">addToDom</span><span class="token punctuation">(</span><span class="token string">'msg'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> h1<span class="token punctuation">,</span> echo<span class="token punctuation">)</span><span class="token function">printMessage</span><span class="token punctuation">(</span><span class="token string">'Hello World'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>compose 和 addToDom 、h1 、echo 都是函数其中compose代码如下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>fns</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> fns<span class="token punctuation">.</span>length    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>arg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res <span class="token operator">=</span> fns<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span> <span class="token comment">// 每次函数运行的结果</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            len <span class="token operator">--</span>            <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token comment">// 将结果递归传给下一个函数</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> res <span class="token comment">//返回结果</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数式开发者将一个任务拆分成多个最小颗粒的函数，然后通过组合的方式来完成我们的任务，这跟我们组件化的思想很类似，将整个页面拆分成若干个组件，然后拼装起来完成我们的整个页面。<strong>在函数式编程里面，组合是一个非常非常非常重要的思想。</strong></p><p>（2）函数式更改需求</p><p>我们现在再改变一下需求，现在我们需要将文本重复三遍，打印到控制台。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> printMessaage <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">,</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> echo<span class="token punctuation">)</span><span class="token function">printMessage</span><span class="token punctuation">(</span>‘Hello World’<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如此，更改了需求却没有修改内部逻辑，只是重组函数。</p><h2 id="3-相关概念"><a href="#3-相关概念" class="headerlink" title="3. 相关概念"></a>3. 相关概念</h2><p>到函数式编程在开发中具有声明模式。为了充分理解函数式编程，我们先来看下几个基本概念。</p><ul><li>声明式编程</li><li>纯函数</li><li>引用透明</li><li>不可变性</li></ul><h3 id="3-1-声明式编程"><a href="#3-1-声明式编程" class="headerlink" title="3.1 声明式编程"></a>3.1 声明式编程</h3><p>函数式编程属于声明是编程范式：这种范式会描述一系列的操作，但并不会暴露它们是如何实现的或是数据流如何传过它们。</p><p>我们所熟知的 SQL 语句就是一种很典型的声明式编程，它由一个个描述查询结果应该是什么样的断言组成，对数据检索的内部机制进行了抽象。</p><p>我们再来看一组代码再来对比一下命令式编程和声明式编程。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 命令式方式</span><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>array<span class="token punctuation">;</span> <span class="token comment">// [0, 1, 4, 9]</span><span class="token comment">// 声明式方式</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为什么我们要去掉代码循环呢？循环是一种重要的命令控制结构，但很难重用，并且很难插入其他操作中。而函数式编程旨在尽可能的提高代码的无状态性和不变性。要做到这一点，就要学会使用<strong>无副作用</strong>的函数–也称纯函数</p><h3 id="3-2-纯函数"><a href="#3-2-纯函数" class="headerlink" title="3.2 纯函数"></a>3.2 纯函数</h3><p>纯函数指<strong>没有副作用</strong>的函数。相同的输入有相同的输出，就跟我们上学的函数一样。</p><p>常常这些情况会产生副作用。</p><ul><li>改变一个全局的变量、属性或数据结构</li><li>改变一个函数参数的原始值</li><li>处理用户输入</li><li>抛出一个异常</li><li>屏幕打印或记录日志</li><li>查询 HTML 文档，浏览器的 Cookie 或访问数据库</li></ul><p>举一个简单的例子</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token operator">++</span>counter<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这个函数就是不纯的，它读取了外部的变量，可能会觉得这段代码没有什么问题，但是我们要知道这种依赖外部变量来进行的计算，计算结果很难预测，你也有可能在其他地方修改了 counter 的值，导致你 increment 出来的值不是你预期的。</p><p>对于纯函数有以下性质：</p><ul><li>仅取决于提供的输入，而不依赖于任何在函数求值或调用间隔时可能变化的隐藏状态和外部状态。</li><li>不会造成超出作用域的变化，例如修改全局变量或引用传递的参数。</li></ul><p>但是在我们平时的开发中，有一些副作用是难以避免的，与外部的存储系统或 DOM 交互等，但是我们可以通过将其从主逻辑中分离出来，使他们易于管理。</p><p>现在我们有一个小需求：通过 id 找到学生的记录并渲染在浏览器(在写程序的时候要想到可能也会写到控制台，数据库或者文件，所以要想如何让自己的代码能重用)中。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 命令式代码</span><span class="token keyword">function</span> <span class="token function">showStudent</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 这里假如是同步查询</span>    <span class="token keyword">var</span> student <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>student <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 读取外部的 elementId</span>          document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>elementId<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>student<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>student<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>student<span class="token punctuation">.</span>lastname<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'not found'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">showStudent</span><span class="token punctuation">(</span><span class="token string">'666'</span><span class="token punctuation">)</span><span class="token comment">// 函数式代码</span><span class="token comment">//curry函数</span><span class="token keyword">function</span> <span class="token function">curry</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//固定参数</span>    <span class="token keyword">let</span> fixed_args <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> args <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        args <span class="token operator">=</span> fixed_args<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 通过 find 函数找到学生</span><span class="token keyword">var</span> find <span class="token operator">=</span> <span class="token function">curry</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">db<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> obj <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'not fount'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> obj<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 将学生对象 format</span><span class="token keyword">var</span> <span class="token function-variable function">csv</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">student</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>student<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>student<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>student<span class="token punctuation">.</span>lastname<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token comment">// 在屏幕上显示</span><span class="token keyword">var</span> append <span class="token operator">=</span> <span class="token function">curry</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">elementId<span class="token punctuation">,</span> info</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>elementId<span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> info<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">var</span> showStudent <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'#student-info'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> csv<span class="token punctuation">,</span> <span class="token function">find</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">showStudent</span><span class="token punctuation">(</span><span class="token string">'666'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>curry (柯里化)是一个对于新手来说比较难理解的一个概念，在函数式编程里面起着至关重要的作用。</p><p>可以看到函数式代码通过较少这些函数的长度，将 showStudent 编写为小函数的组合。这个程序还不够完美，但是已经可以展现出相比于命令式的很多优势了。</p><ul><li>灵活。有三个可重用的组件</li><li>声明式的风格，给高阶步骤提供了一个清晰视图，增强了代码的可读性</li><li>另外是将纯函数与不纯的行为分离出来。</li></ul><p>我们看到纯函数的输出结果是一致的，可预测的，相同的输入会有相同的返回值，这个其实也被称为<strong>引用透明</strong>。</p><h3 id="3-3-引用透明"><a href="#3-3-引用透明" class="headerlink" title="3.3 引用透明"></a>3.3 引用透明</h3><p>引用透明是定义一个纯函数较为正确的方法。纯度在这个意义上表示一个函数的参数和返回值之间映射的纯的关系。如果一个函数对于相同的输入始终产生相同的结果，那么我们就说它是引用透明。</p><p>这个概念很容易理解，简单的举两个例子就行了。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 非引用透明</span><span class="token keyword">var</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token operator">++</span>counter<span class="token punctuation">&#125;</span><span class="token comment">// 引用透明</span><span class="token keyword">var</span> <span class="token function-variable function">increment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">counter</span><span class="token punctuation">)</span> <span class="token operator">=></span> counter <span class="token operator">+</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>其实对于箭头函数在函数式编程里面有一个高大上的名字，叫 lambda 表达式，对于这种匿名函数在学术上就是叫 lambda 表达式，现在在 Java 里面也是支持的。</p></blockquote><h3 id="3-4-不可变数据"><a href="#3-4-不可变数据" class="headerlink" title="3.4 不可变数据"></a>3.4 不可变数据</h3><p>不可变数据是指那些创建后不能更改的数据。与许多其他语言一样，JavaScript 里有一些基本类型(String,Number 等)从本质上是不可变的，但是对象就是在任意的地方可变。</p><p>考虑一个简单的数组排序代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">sortDesc</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> a <span class="token operator">-</span> b    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token function">sortDesc</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3]</span>arr <span class="token comment">// [1, 2, 3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码看似没什么问题，但是会导致在排序的过程中会产生副作用，修改了原始引用，可以看到原始的 arr 变成了 [1, 2, 3]。这是一个语言缺陷，后面会介绍如何克服。</p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><ul><li>使用纯函数的代码绝不会更改或破坏全局状态，有助于提高代码的可测试性和可维护性</li><li>函数式编程采用声明式的风格，易于推理，提高代码的可读性。</li><li>函数式编程将函数视为积木，通过一等高阶函数来提高代码的模块化和可重用性。</li><li>可以利用响应式编程组合各个函数来降低事件驱动程序的复杂性(这点后面可能会单独拿一篇来进行讲解)。</li></ul><p>参考：<a href="https://juejin.cn/post/6844903743117361165">https://juejin.cn/post/6844903743117361165</a></p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css单行多行省略</title>
      <link href="/2020/11/08/note/html-css-dan-xing-duo-xing-sheng-lue-ellipsis/"/>
      <url>/2020/11/08/note/html-css-dan-xing-duo-xing-sheng-lue-ellipsis/</url>
      
        <content type="html"><![CDATA[<p>单行省略：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span><span class="token comment">/*初始化display*/</span><span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token comment">/*inline-block需要指定宽度值100%,block，-webkit-box不需要*/</span><span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token comment">/*超出的总体：隐藏*/</span><span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span> <span class="token comment">/*超出文字：省略号*/</span><span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span><span class="token comment">/*单行省略，不换行*/</span><span class="token property">line-height</span><span class="token punctuation">:</span>xx px<span class="token punctuation">;</span><span class="token comment">/*文字的上下两部分可能会被hidden，可以调整行高*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多行省略：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span><span class="token comment">/*设置为box容器*/</span><span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span> vertical<span class="token punctuation">;</span><span class="token comment">/*规定框中的子元素应该被水平或垂直排列。*/</span><span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span><span class="token comment">/*最多显示2行*/</span><span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token comment">/*超出的总体：隐藏*/</span><span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span> <span class="token comment">/*超出文字：省略号*/</span><span class="token property">word-break</span><span class="token punctuation">:</span> break-all<span class="token punctuation">;</span><span class="token comment">/*英文单词换行,强制截断字符,任何元素都生效,可搭配word-wrap兼容*/</span><span class="token property">word-wrap</span><span class="token punctuation">:</span> break-word<span class="token punctuation">;</span><span class="token comment">/*英文单词换行,当第二行可以放下这个字符时，不截断字符,行内元素不生效,可搭配兼容word-break*/</span><span class="token property">white-space</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span><span class="token comment">/*默认值,换行符会当成空白符，合并所有空白符 &lt;br>才换行*/</span><span class="token property">line-height</span><span class="token punctuation">:</span>xx px<span class="token punctuation">;</span><span class="token comment">/*文字的上下两部分可能会被hidden，可以调整行高*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><a href="https://www.jianshu.com/p/2b197bba915f">display:webkit-box</a></li></ol><p>display:box 是废弃的弹性盒子标准，已被flex代替，所以需要webkit前缀让浏览器识别，使用它的line-clamp属性，这是flex没有的。</p><ol start="2"><li><a href="https://www.w3school.com.cn/cssref/pr_box-orient.asp">webkit-box-orient</a></li></ol><p>目前没有浏览器支持 box-orient 属性，规定框中的子元素应该被水平或垂直排列。</p><p>Firefox 支持替代的 -moz-box-orient 属性。</p><p>Safari、Opera 以及 Chrome 支持替代的 -webkit-box-orient 属性。</p><ol start="3"><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/-webkit-line-clamp">-webkit-line-clamp</a></li></ol><p>-webkit-line-clamp CSS 属性 可以把 块容器 中的内容限制为指定的行数。</p><p>它只有在 display 属性设置成 -webkit-box 或者 -webkit-inline-box 并且 -webkit-box-orient (en-US) 属性设置成 vertical时才有效果</p>]]></content>
      
      
      <categories>
          
          <category> html&amp;css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> css文本省略 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>性能优化总结</title>
      <link href="/2020/11/06/note/qian-duan-xing-neng-you-hua-zong-jie/"/>
      <url>/2020/11/06/note/qian-duan-xing-neng-you-hua-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>循循善诱</p><p>长列表是什么样子</p><p>什么是重绘什么是回流</p><p>想图片懒加载</p><p>使用addlisener scroll方法监听，图片加载完后，就不在需要监听了</p>]]></content>
      
      
      <categories>
          
          <category> 前端性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
            <tag> 卷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渲染优化</title>
      <link href="/2020/11/06/note/qian-duan-xing-neng-you-hua-xuan-ran-you-hua/"/>
      <url>/2020/11/06/note/qian-duan-xing-neng-you-hua-xuan-ran-you-hua/</url>
      
        <content type="html"><![CDATA[<p>减少重绘回流:</p><ol><li><p>使用变量缓存dom节点，不要频繁读取。</p></li><li><p>通过DocumentFragment或innerHTML批量操作dom</p></li><li><p>dom隐藏，或复制到内存中，类似vitual dom，进行修改，完成后再替换回去</p></li><li><ul><li>动画元素一定要absolute,脱离文档流，不影响其他元素，动画不要用left，top等操作，要使用transform和opacity，同时开启渲染层（will-change或translate3d(0,0,0)）</li></ul></li><li><ul><li>动画尽量用requestAnimationFrame（直接用，和定时器差不多但是比较丝滑），不要用定时器</li></ul></li></ol><p>requestAnimationFrame 比起 setTimeout、setInterval的优势主要有两点：<br>1、requestAnimationFrame 会把每一帧中的所有DOM操作集中起来，在一次重绘或回流中就完成，并且重绘或回流的时间间隔紧紧跟随浏览器的刷新频率，一般来说，这个频率为每秒60帧。<br>2、在隐藏或不可见的元素中，requestAnimationFrame将不会进行重绘或回流，这当然就意味着更少的的cpu，gpu和内存使用量。</p><ol start="6"><li><p>移动端硬件加速，触发GPU渲染，还是translate3d（0,0,0）</p></li><li><p><a href="https://zhuanlan.zhihu.com/p/371058769">使用-will-change</a></p><p><a href="https://uniapp.dcloud.net.cn/component/image.html">uniapp页面结构复杂，css样式太多的情况，使用 image 可能导致样式生效较慢，出现 “闪一下” 的情况，此时设置 image{will-change: transform} ,可优化此问题。</a><br>其实并不是这样，image的宽度有一个默认宽度，等到样式</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
            <tag> 卷 </tag>
            
            <tag> 渲染优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图片优化</title>
      <link href="/2020/11/06/note/qian-duan-xing-neng-you-hua-tu-pian-you-hua/"/>
      <url>/2020/11/06/note/qian-duan-xing-neng-you-hua-tu-pian-you-hua/</url>
      
        <content type="html"><![CDATA[<p>1.响应式图片</p><p>大分辨率用大图，小分辨率用小图</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.banner</span><span class="token punctuation">&#123;</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'/static/large.jpg'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 767px<span class="token punctuation">)</span></span><span class="token punctuation">&#123;</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'/static/small.jpg'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.图片懒加载</p><p>3.使用webp代替其它格式,是因为webp更小，更清晰</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>picture</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 判断是否兼容--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MIME-TYPE<span class="token punctuation">"</span></span> <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./image.webp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./image.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>picture</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.小图标改用字体图标，字体不是图片，加载比图片快</p><p>如iconfont</p><p>5.图片压缩，可参考以下网站</p><p><a href="https://www.webutils.app/image-compress">https://www.webutils.app/image-compress</a></p><p><a href="https://compressor.io/">https://compressor.io/</a></p><p>6.使用base64编码图片 可以节省HTTP请求</p>]]></content>
      
      
      <categories>
          
          <category> 前端性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
            <tag> 卷 </tag>
            
            <tag> 图片优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>首屏优化</title>
      <link href="/2020/11/06/note/qian-duan-xing-neng-you-hua-shou-ping-you-hua/"/>
      <url>/2020/11/06/note/qian-duan-xing-neng-you-hua-shou-ping-you-hua/</url>
      
        <content type="html"><![CDATA[<p>1.长列表</p><p>后端返回一万条数据，使用长列表技术</p><p>2.webpack打包，项目的html、css、js、图片压缩打包，排除掉项目不需要加载的空格、回车、注释</p><p>3.服务端渲染，加载完html直接渲染，减少白屏时间（看项目情况）</p>]]></content>
      
      
      <categories>
          
          <category> 前端性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
            <tag> 卷 </tag>
            
            <tag> 首屏优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue优化</title>
      <link href="/2020/11/06/note/qian-duan-xing-neng-you-hua-vue-you-hua/"/>
      <url>/2020/11/06/note/qian-duan-xing-neng-you-hua-vue-you-hua/</url>
      
        <content type="html"><![CDATA[<p>1.keep-alive缓存组件</p><p>2.路由懒加载</p><p>3.合理使用 v-if v-show computed watch methods</p><p>4.Object.freeze：冻结对象 纯展示类的接口数据，冻结就可以了 </p><p>在 Vue 的文档中介绍数据绑定和响应时，特意标注了对于经过 Object.freeze() 方法的对象无法进行更新响应。</p><p>Object.freeze() 方法用于冻结对象，禁止对于该对象的属性进行修改</p><p>5.使用UI组件按需引入</p>]]></content>
      
      
      <categories>
          
          <category> 前端性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
            <tag> 卷 </tag>
            
            <tag> Vue优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue2中swiper的使用</title>
      <link href="/2020/11/06/note/qian-duan-zu-jian-swiper-de-shi-yong/"/>
      <url>/2020/11/06/note/qian-duan-zu-jian-swiper-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>注意，官方并没有vue2的使用文档，以下展示的是swiper直接使用，</p><p>下载5版本，Vue2对这个版本支持好</p><pre class="line-numbers language-npm" data-language="npm"><code class="language-npm">cnpm i swiper@5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><template>  <div class="home">    <div v-if="swiperShow" class="swiper-container">      <div class="swiper-wrapper">        <div class="swiper-slide">          <img src="@/assets/imgs/swiper1.jpg" />        </div>        <div class="swiper-slide">          <img src="@/assets/imgs/swiper2.jpg" />        </div>        <div class="swiper-slide">          <img src="@/assets/imgs/swiper3.jpg" />        </div>        <div class="swiper-slide">          <img src="@/assets/imgs/swiper4.jpg" />        </div>      </div>      <!-- 如果需要分页器 -->      <div class="swiper-pagination"></div><pre><code>  &lt;!-- 如果需要导航按钮 --&gt;  &lt;div class=&quot;swiper-button-prev&quot;&gt;&lt;/div&gt;  &lt;div class=&quot;swiper-button-next&quot;&gt;&lt;/div&gt;  &lt;!-- 如果需要滚动条 --&gt;  &lt;div class=&quot;swiper-scrollbar&quot;&gt;&lt;/div&gt;&lt;/div&gt;</code></pre>  </div></template><pre class="line-numbers language-none"><code class="language-none">&#96;&#96;&#96;JS&lt;script&gt;import Swiper from &quot;swiper&quot;;import &quot;swiper&#x2F;css&#x2F;swiper.min.css&quot;;export default &#123;  name: &quot;HomeView&quot;,  data() &#123;    return &#123;      swiperShow: false,    &#125;;  &#125;,  mounted() &#123;    this.swiperShow &#x3D; true;    console.log(this.$data);  &#125;,  updated() &#123;    new Swiper(&quot;.swiper-container&quot;, &#123;      direction: &quot;horizontal&quot;, &#x2F;&#x2F; 垂直切换选项      grabCursor: true, &#x2F;&#x2F;手掌      loop: true, &#x2F;&#x2F; 循环模式选项      &#x2F;&#x2F; 如果需要分页器      pagination: &#123;        el: &quot;.swiper-pagination&quot;,      &#125;,      &#x2F;&#x2F; 如果需要前进后退按钮      navigation: &#123;        nextEl: &quot;.swiper-button-next&quot;,        prevEl: &quot;.swiper-button-prev&quot;,      &#125;,      &#x2F;&#x2F; 如果需要滚动条      scrollbar: &#123;        el: &quot;.swiper-scrollbar&quot;,      &#125;,      autoplay: true,    &#125;);  &#125;,&#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">&lt;style scoped&gt;.swiper-container &#123;  width: 976px;  height: 550px;&#125;.swiper-pagination &#x2F;deep&#x2F; .swiper-pagination-bullet &#123;  width: 10px;  height: 10px;&#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端组件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> vue </tag>
            
            <tag> swiper </tag>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>加载优化</title>
      <link href="/2020/11/06/note/qian-duan-xing-neng-you-hua-jia-zai-you-hua/"/>
      <url>/2020/11/06/note/qian-duan-xing-neng-you-hua-jia-zai-you-hua/</url>
      
        <content type="html"><![CDATA[<p>1.减少（合并）http请求：在服务器端，每个http都需要启动独立的线程去处理。我们可以合并接口请求，合并CSS，合并精灵图。</p><p>2.script标签，放在后面，这样避免阻塞html的渲染</p><p>3.link标签，css引入放在前面，避免闪屏</p>]]></content>
      
      
      <categories>
          
          <category> 前端性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
            <tag> 卷 </tag>
            
            <tag> 加载优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bug排除</title>
      <link href="/2020/11/04/note/qian-duan-bian-cheng-bug-pai-chu/"/>
      <url>/2020/11/04/note/qian-duan-bian-cheng-bug-pai-chu/</url>
      
        <content type="html"><![CDATA[<p>pagejson排除法<br>发生背景：在uniapp使用浏览器编译的没有报错，使用微信编译后报错。split数组错误，信息完全无法定位问题。<br>解决过程：使用pagejson一步步排除页面，定位问题。<br>总结：此方法适用于错误提示无法定位代码的时候</p>]]></content>
      
      
      <categories>
          
          <category> 前端编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> uniapp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深拷贝与浅拷贝</title>
      <link href="/2020/11/02/note/js-mian-shi-s-shen-kao-bei-yu-qian-kao-bei/"/>
      <url>/2020/11/02/note/js-mian-shi-s-shen-kao-bei-yu-qian-kao-bei/</url>
      
        <content type="html"><![CDATA[<p>深浅拷贝指的是拷贝内容。深拷贝就是在堆内存中完全开辟一份新的空间存储被拷贝的内容；浅拷贝只拷贝了一层，对象数组的拷贝方法就属于浅拷贝。</p><h2 id="1-常见的浅拷贝"><a href="#1-常见的浅拷贝" class="headerlink" title="1. 常见的浅拷贝"></a>1. 常见的浅拷贝</h2><p>(1) 数组api：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(2) 对象api：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>(3) rest运算符：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token operator">...</span>list<span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span>list<span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-深拷贝"><a href="#2-深拷贝" class="headerlink" title="2. 深拷贝"></a>2. 深拷贝</h2><p>(1) JSON.parse(JSON.Stringfy())</p><p>如果obj里有函数，undefined，则序列化的结果会把函数或 undefined丢失。如果操作对象有循环属性会报错。<br><img src="https://qiniu.guet.link/asset/202211162028246.png"><br>基于各种各样的问题，往往需要手写一个递归函数处理，判断各种情况。</p><p>(2) 递归函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">  <span class="token comment">// 1. 封装一个函数，实现传入一个对象返回一个拷贝后的新对象</span><span class="token keyword">function</span> <span class="token function">cloneObj</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 根据不同类型设置不同的初始化</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> clone <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> clone <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//使用for...in</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果为对象则递归更进一层去拷贝</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"object"</span> <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      clone<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cloneObj</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 否则存进变量</span>      clone<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//循环结束后输出</span>  <span class="token keyword">return</span> clone<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> 数组 </tag>
            
            <tag> 深拷贝 </tag>
            
            <tag> 浅拷贝 </tag>
            
            <tag> 对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git无法推送至github，报错误403</title>
      <link href="/2020/10/29/note/qian-duan-bian-cheng-git-wu-fa-tui-song-zhi-github-bao-cuo-wu-403/"/>
      <url>/2020/10/29/note/qian-duan-bian-cheng-git-wu-fa-tui-song-zhi-github-bao-cuo-wu-403/</url>
      
        <content type="html"><![CDATA[<p>在使用git的时候经常会发送一些奇怪的网络错误，比如403。翻遍了国内论坛也没有一个具体有效的办法，改host也好，改git的配置也好，都不行。</p><p>明明可以访问github网站，却无法与github进行git命令的操作，即使使用魔法也不行，而过一会它又自己好了(这导致我一度以为是国内环境问题)。</p><p>我本以为是国内特殊的网络环境产生的结果，已经打算躺平使用github仓库了，但在逛国外知名网站的时候，发现国外网友也有这种问题，那么必不可能是网络问题了。</p><p>下面我来总结一下：</p><ol><li>github对https协议推送的支持并不友好，可以使用SSH协议来解决这个问题。</li><li>对于https协议有必要需求的小伙伴可以尝试这个办法<pre class="line-numbers language-git" data-language="git"><code class="language-git">https://USERNAME@github.com/rootux/my-repo.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>修改https协议的链接，USERNAME是你github登录的用户名</li></ol><p>以下是结论来源：</p><p><a href="https://stackoverflow.com/questions/7438313/pushing-to-git-returning-error-code-403-fatal-http-request-failed">https://stackoverflow.com/questions/7438313/pushing-to-git-returning-error-code-403-fatal-http-request-failed</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
            <tag> 错误 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模板字符串</title>
      <link href="/2020/10/27/note/js-gai-nian-m-mo-ban-zi-fu-chuan/"/>
      <url>/2020/10/27/note/js-gai-nian-m-mo-ban-zi-fu-chuan/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> name<span class="token operator">=</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">小周</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">我的名字是&lt;font color="red"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/font>&lt;br></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> 模板字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>websocket和socket的关系</title>
      <link href="/2020/10/22/note/qian-duan-wang-luo-websocket-he-socket-de-guan-xi/"/>
      <url>/2020/10/22/note/qian-duan-wang-luo-websocket-he-socket-de-guan-xi/</url>
      
        <content type="html"><![CDATA[<p>socket算是websocket的前辈<br>websocket是作为HTML5标准一起出的<br>它们名字相似功能也相似<br>都可以进行双向通信</p>]]></content>
      
      
      <categories>
          
          <category> 前端网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> websocket </tag>
            
            <tag> socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js继承的方式有哪些</title>
      <link href="/2020/10/22/note/js-mian-shi-j-ji-cheng-de-fang-shi-you-na-xie/"/>
      <url>/2020/10/22/note/js-mian-shi-j-ji-cheng-de-fang-shi-you-na-xie/</url>
      
        <content type="html"><![CDATA[<h2 id="1-class继承"><a href="#1-class继承" class="headerlink" title="1. class继承"></a>1. class继承</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'张三'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>son<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-原型链继承"><a href="#2-原型链继承" class="headerlink" title="2. 原型链继承"></a>2. 原型链继承</h2><p>new A 放到 B 原型链上 ，new b 给新对象 ， 那么新对象就能通过B原型链访问A的属性</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token string">'18'</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'张三'</span><span class="token punctuation">&#125;</span><span class="token class-name">Child</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>son<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-构造函数显示绑定（call）改变this"><a href="#3-构造函数显示绑定（call）改变this" class="headerlink" title="3. 构造函数显示绑定（call）改变this"></a>3. 构造函数显示绑定（call）改变this</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token string">'18'</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">Parent</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'张三'</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>son<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> 继承 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是vue响应式</title>
      <link href="/2020/10/21/note/vue-gai-nian-xiang-ying-shi/"/>
      <url>/2020/10/21/note/vue-gai-nian-xiang-ying-shi/</url>
      
        <content type="html"><![CDATA[<p>vue响应式也就是数据驱动，data数据改变UI做出响应，跟着改变<br><a href="https://zhuanlan.zhihu.com/p/344638067">https://zhuanlan.zhihu.com/p/344638067</a></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双飞翼布局学习</title>
      <link href="/2020/10/21/note/html-css-mian-shi-shuang-fei-yi-bu-ju/"/>
      <url>/2020/10/21/note/html-css-mian-shi-shuang-fei-yi-bu-ju/</url>
      
        <content type="html"><![CDATA[<p>要求：三个盒子，左右两盒子200px，中间自适应，并且先加载中间块</p><p>过程：</p><p>设置三个盒子，依次是中间、左、右。</p><p>为三个盒子设置float：left。</p><p>设置中间大盒子with100%，内容盒子padding：0 200px，左右两边width200px。</p><p>设置左右两边盒子 一个margin-left：-100%；一个margin-left：200px（基于有盒子宽度）,使得与中间盒子处于同一水平上的左右。布局完成。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">*</span> <span class="token punctuation">&#123;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">body</span> <span class="token punctuation">&#123;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">header</span> <span class="token punctuation">&#123;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">main</span> <span class="token punctuation">&#123;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.clearfix::after</span> <span class="token punctuation">&#123;</span>            <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>            <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.center,        .left,        .right</span> <span class="token punctuation">&#123;</span>            <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.center</span> <span class="token punctuation">&#123;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> violet<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.content</span> <span class="token punctuation">&#123;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 0 200px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.left,        .right</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.left</span> <span class="token punctuation">&#123;</span>            <span class="token property">margin-left</span><span class="token punctuation">:</span> -100%<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.right</span> <span class="token punctuation">&#123;</span>            <span class="token property">margin-left</span><span class="token punctuation">:</span> -200px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clearfix<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                坑一、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>                不要再center处使用padding:0 200px; 因为已经设置了width:100%,会超出页面的宽度                应该在center下套用另一个盒子，为这个盒子使用padding，这样无论它怎么弄都不回超出页面宽度                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>                当然如果使用的是ie盒模型就没这个问题            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> html&amp;css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 卷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ASCII、Unicode、utf-8、base64有什么关联</title>
      <link href="/2020/10/19/note/qian-duan-bian-cheng-bian-ma-ascii-unicode-utf-8-base64-you-shi-me-guan-lian/"/>
      <url>/2020/10/19/note/qian-duan-bian-cheng-bian-ma-ascii-unicode-utf-8-base64-you-shi-me-guan-lian/</url>
      
        <content type="html"><![CDATA[<p>计算机只能计算和识别二进制,必须让计算机识别文字,才能和计算机进行交互,彼此也才能通过计算机通信。 由此,有了ASCII编码的诞生,它起始于50年代后期,在1967年定案,是最初美国国家标准,供不同计算机在相互通信时用作共同遵守的西文字符编码标准。</p><p>比如 char b&#x3D;’a’;int c&#x3D;97; b和c存储时都是1100001 只不过输出类型不一样（类型存储单独占据空间）</p><p>需要注意的时候，以上是程序层面上的表示，在文件存储中 “int c &#x3D; 97” 的 97 是两个字符。我们写的代码文件，IDE右下角有utf-8，这是文件存储层面上的事，如果存储与打开的编码不对就会乱码。</p><h2 id="1-文字编码（ascii、unicode）"><a href="#1-文字编码（ascii、unicode）" class="headerlink" title="1. 文字编码（ascii、unicode）"></a>1. 文字编码（ascii、unicode）</h2><p>为了让计算机能表示文字，计算机有各种编码，有大概发展历程：</p><p>ascii &#x3D;&gt; 其它编码（中文（gb2312、GBK）、俄文）&#x3D;&gt; Unicode（万国码，字符集或编码方案，给每个字符身份）&#x3D;&gt; utf-8（Unicode的众多<strong>具体实现</strong>编码方案中的其中一个）</p><h2 id="2-传输编码（base64和uri）"><a href="#2-传输编码（base64和uri）" class="headerlink" title="2. 传输编码（base64和uri）"></a>2. 传输编码（base64和uri）</h2><h3 id="2-1-Base64"><a href="#2-1-Base64" class="headerlink" title="2.1 Base64"></a>2.1 Base64</h3><p>因为有些网络传送渠道并不支持所有的字节，例如传统的邮件只支持可见字符的传送，像图片二进制流的每个字节不可能全部是可见字符，所以就传送不了。最好的方法就是在不改变传统协议的情况下，做一种扩展方案来支持二进制文件的传送。把不可打印的字符也能用可打印字符来表示，问题就解决了。</p><h3 id="2-2-base64编码原理："><a href="#2-2-base64编码原理：" class="headerlink" title="2.2 base64编码原理："></a>2.2 base64编码原理：</h3><p><strong>转前：s 1 3</strong></p><p>（1）转成ascii码点：对应 115 49 51</p><p>（2）拆成2进制： 01110011 00110001 00110011</p><p>（3）分组：6个一组（4组） 011100110011000100110011</p><p>然后才有后面的 011100 110011 000100 110011</p><p>（4）对码点：然后计算机一个字节占8位，不够就自动补两个高位0了<br>所以有了高位补0</p><p>科学计算器输入 00011100 00110011 00000100 00110011</p><p>得到 28 51 4 51</p><p><strong>转后：c z E z</strong></p><h3 id="2-3-uri编码"><a href="#2-3-uri编码" class="headerlink" title="2.3 uri编码"></a>2.3 uri编码</h3><p>标准的Base64并不适合直接放在URL里传输，因为URL有一些保留字，后端不便拿取，这时候就需要用到对base64进行处理，已知有两种：</p><p>（1）经过安全的base64（请看这篇[前端网络-经过url安全的base64]）</p><p>（2）uri编码,js可以使用 encodeURIComponent 对参数进行uri编码</p><h3 id="2-4-js转bsse64"><a href="#2-4-js转bsse64" class="headerlink" title="2.4 js转bsse64"></a>2.4 js转bsse64</h3><p>js的btoa只支持ascii序列字符，对于unicode转base64需要重写或使用插件，请看下方第2链接。</p><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><p>他们是编码方案和具体实现</p><h2 id="3-参考"><a href="#3-参考" class="headerlink" title="3. 参考"></a>3. 参考</h2><p><a href="https://juejin.cn/post/6844903698045370376">https://juejin.cn/post/6844903698045370376</a></p><p><a href="https://juejin.cn/post/6989391487200919566#comment">https://juejin.cn/post/6989391487200919566#comment</a></p><p><a href="https://www.bilibili.com/video/BV1xD4y1y7yc/">这个讲的不错</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ascii </tag>
            
            <tag> unicode </tag>
            
            <tag> utf-8 </tag>
            
            <tag> base64 </tag>
            
            <tag> 编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原型与原型链</title>
      <link href="/2020/10/13/note/js-gai-nian-y-yuan-xing-yu-yuan-xing-lian/"/>
      <url>/2020/10/13/note/js-gai-nian-y-yuan-xing-yu-yuan-xing-lian/</url>
      
        <content type="html"><![CDATA[<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>(1) 原型有显式原型和隐式原型，函数有显式原型prototype，对象有隐式原型[[prototype]]和__proto__。</p><p>(2) 对象的隐式原型指向函数的显示原型，这种链式结构成为原型链。</p><p>(3) 原型链的最后一层是Object的原型，再后面就是null了。</p><p>(4) 原型链的主要作用是用来实现继承，因为对象可以通过隐式原型[[prototype]]访问原型链上的属性。</p><p>(5) __proto__是浏览器在ES5时实现的属性，ES标准是[[prototype]]，所以他们两个是相等的。</p><p>(6) 但是[[prototype]]无法直接访问，MDN推荐使用Object.getPrototypeOf(obj)访问，这种访问 &#x3D;&#x3D;&#x3D; 我们常用的 obj.__proto__</p><p><strong>注意：通过浏览器尝试查看原型链时，会点开很多层__proto__和[[prototype]]，记住这两个是相等的，不要将它们分开计算原型链的链层。</strong></p><blockquote><p>遵循 ECMAScript 标准，someObject.[[Prototype]] 符号是用于指向 someObject 的原型。从 ECMAScript 6 开始，[[Prototype]] 可以通过 Object.getPrototypeOf() 和 Object.setPrototypeOf() 访问器来访问。这个等同于 JavaScript 的非标准但许多浏览器实现的属性 __proto__。但它不应该与构造函数 func 的 prototype 属性相混淆。被构造函数创建的实例对象的[[Prototype]] 指向 func 的 prototype 属性。** Object.prototype ** 属性表示 Object 的原型对象。——MDN</p></blockquote><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">function Person() &#123;    &#x2F;&#x2F;修改全局函数 1    getName &#x3D; function () &#123;        console.log(1);    &#125;    return this;&#125;Person.getName &#x3D; function () &#123;    console.log(2);&#125;Person.prototype.getName &#x3D; function () &#123;    console.log(3);&#125;function getName() &#123;    console.log(5)&#125;Person.getName();&#x2F;&#x2F;2&#x2F;&#x2F;Person.getName &#x3D;&#x3D; Person.prototype.constructor.getName;&#x2F;&#x2F;由于是放在构造函数中，只能这样访问getName();&#x2F;&#x2F;5&#x2F;&#x2F;调用全局函数Person().getName();&#x2F;&#x2F;1&#x2F;&#x2F;返回this this为window 并根据window调用getName();getName();&#x2F;&#x2F;1&#x2F;&#x2F;被Person函数体修改new Person().getName();&#x2F;&#x2F;3&#x2F;&#x2F;该对象从函数原型上找到getName<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>display有哪些属性，作用</title>
      <link href="/2020/10/05/note/html-css-mian-shi-display-you-na-xie-shu-xing-zuo-yong/"/>
      <url>/2020/10/05/note/html-css-mian-shi-display-you-na-xie-shu-xing-zuo-yong/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">.d</span> <span class="token punctuation">&#123;</span>            <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token comment">/*不显示元素*/</span>            <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>            <span class="token comment">/*转为块元素....*/</span>            <span class="token property">display</span><span class="token punctuation">:</span> inline<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> html&amp;css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> display </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>去除IOS被触摸时产生半透明的灰色背景</title>
      <link href="/2020/10/02/note/html-css-mian-shi-jian-rong-qu-chu-ios-bei-hong-mo-shi-chan-sheng-ban-tou-ming-de-hui-se-bei-jing/"/>
      <url>/2020/10/02/note/html-css-mian-shi-jian-rong-qu-chu-ios-bei-hong-mo-shi-chan-sheng-ban-tou-ming-de-hui-se-bei-jing/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta http-equiv="X-UA-Compatible" content="IE=edge">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>Document</title>    <style>        a,        button,        input,        textarea {            -webkit-tap-highlight-color: rgba(0, 0, 0, 0);        }         /* 直接用ui组件了 */    </style></head><body></body></html>]]></content>
      
      
      <categories>
          
          <category> html&amp;css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 卷 </tag>
            
            <tag> html </tag>
            
            <tag> 兼容 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>取消IOS键盘首字母大写</title>
      <link href="/2020/10/02/note/html-css-mian-shi-jian-rong-qu-xiao-ios-jian-pan-shou-zi-mu-da-xie/"/>
      <url>/2020/10/02/note/html-css-mian-shi-jian-rong-qu-xiao-ios-jian-pan-shou-zi-mu-da-xie/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta http-equiv="X-UA-Compatible" content="IE=edge">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>Document</title></head><body>    <input type="text" name="" autocapitalize="off" id="">    <!-- autocapitalize="off" -->     /* 直接用ui组件了 */</body></html>]]></content>
      
      
      <categories>
          
          <category> html&amp;css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 卷 </tag>
            
            <tag> html </tag>
            
            <tag> 兼容 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基线对齐</title>
      <link href="/2020/10/02/note/html-css-gai-nian-ji-xian-dui-qi/"/>
      <url>/2020/10/02/note/html-css-gai-nian-ji-xian-dui-qi/</url>
      
        <content type="html"><![CDATA[<h2 id="1-什么是基线"><a href="#1-什么是基线" class="headerlink" title="1. 什么是基线?"></a>1. 什么是基线?</h2><p><img src="https://qiniu.guet.link/asset/202208261735371.png" alt="基线"></p><h2 id="2-利用其它对齐，垂直居中-有偏移"><a href="#2-利用其它对齐，垂直居中-有偏移" class="headerlink" title="2. 利用其它对齐，垂直居中(有偏移)"></a>2. 利用其它对齐，垂直居中(有偏移)</h2><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token selector">.father</span><span class="token punctuation">&#123;</span>    <span class="token comment">/*设置表格*/</span>    <span class="token property">display</span><span class="token punctuation">:</span>table<span class="token punctuation">;</span>    <span class="token selector">.son</span><span class="token punctuation">&#123;</span>        <span class="token comment">/*设置表格项*/</span>        <span class="token property">display</span><span class="token punctuation">:</span>table-cell<span class="token punctuation">;</span>        <span class="token comment">/*根据表格的中线对齐*/</span>        <span class="token property">vertical-align</span><span class="token punctuation">:</span>middle<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-基线对齐的影响"><a href="#3-基线对齐的影响" class="headerlink" title="3. 基线对齐的影响"></a>3. 基线对齐的影响</h2><p>基线对齐是默认对齐，作用是给留给g这样的字母一定空间，但是这可能会导致图片和下边的块元素存在空格，那么我们可以设置成top和bottom对齐。</p>]]></content>
      
      
      <categories>
          
          <category> html&amp;css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>禁止iOS&amp;Android用户选中文字</title>
      <link href="/2020/10/02/note/html-css-mian-shi-jian-rong-jin-zhi-ios-android-yong-hu-xuan-zhong-wen-zi/"/>
      <url>/2020/10/02/note/html-css-mian-shi-jian-rong-jin-zhi-ios-android-yong-hu-xuan-zhong-wen-zi/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">html,        body</span> <span class="token punctuation">&#123;</span>            <span class="token property">user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">-webkit-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/* 直接用ui组件了 */</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> html&amp;css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 卷 </tag>
            
            <tag> html </tag>
            
            <tag> 兼容 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用hexo和github生成博客，以及基本使用</title>
      <link href="/2020/10/02/note/qian-duan-sheng-huo-hexo-github-sheng-cheng-bo-ke/"/>
      <url>/2020/10/02/note/qian-duan-sheng-huo-hexo-github-sheng-cheng-bo-ke/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/iamfugui/hexo-theme-matery/blob/develop/README_CN.md#%E6%96%87%E7%AB%A0-front-matter-%E4%BB%8B%E7%BB%8D">文章头介绍</a></p><pre class="line-numbers language-markdown" data-language="markdown"><div class="caption"><span>文档标题示例</span></div><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span><span class="token front-matter yaml language-yaml">title: 使用hexo和guthub生成博客与总结date: 2018-09-07 09:25:00author: Qi Zhaoimg: /source/images/xxx.jpgtop: falsehide: falsecover: falsecoverImg: /images/1.jpgpassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92 (SHA256)toc: falsemathjax: falsesummary: This is the content of your custom post summary.  //摘要tags:  - hexo  - Markdown</span> <span class="token punctuation">---</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-github"><a href="#1-github" class="headerlink" title="1. github"></a>1. github</h2><h3 id="1-1-在github创建仓库，仓库名为-账号名-github-io"><a href="#1-1-在github创建仓库，仓库名为-账号名-github-io" class="headerlink" title="1.1 在github创建仓库，仓库名为 账号名.github.io"></a>1.1 在github创建仓库，仓库名为 账号名.github.io</h3><h2 id="2-hexo"><a href="#2-hexo" class="headerlink" title="2. hexo"></a>2. hexo</h2><h3 id="2-1-安装hexo"><a href="#2-1-安装hexo" class="headerlink" title="2.1 安装hexo"></a>2.1 安装hexo</h3><pre class="line-numbers language-none"><code class="language-none">cnpm i hexo-cli -g &#x2F;&#x2F;安装hexo -v &#x2F;&#x2F;验证<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-2-初始化hexo与配置"><a href="#2-2-初始化hexo与配置" class="headerlink" title="2.2 初始化hexo与配置"></a>2.2 初始化hexo与配置</h3><pre class="line-numbers language-none"><code class="language-none">hexo init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开_config.yml文件夹</p><h3 id="2-3-新建文章"><a href="#2-3-新建文章" class="headerlink" title="2.3 新建文章"></a>2.3 新建文章</h3><pre class="line-numbers language-none"><code class="language-none">hexo n<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>new 新建</p><h3 id="2-4-文章编写"><a href="#2-4-文章编写" class="headerlink" title="2.4 文章编写"></a>2.4 文章编写</h3><pre class="line-numbers language-none"><code class="language-none">cd 到 source&#x2F;_posts&#x2F;xxx.md vim或vscode工具编写<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>source&#x2F;_posts 是文章存放目录</p><h3 id="2-5-生成"><a href="#2-5-生成" class="headerlink" title="2.5 生成"></a>2.5 生成</h3><pre class="line-numbers language-none"><code class="language-none">hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>generate 生成</p><h3 id="2-6-启动"><a href="#2-6-启动" class="headerlink" title="2.6 启动"></a>2.6 启动</h3><pre class="line-numbers language-none"><code class="language-none">hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>start 启动<br><br>会在本地启动服务</p><h2 id="3-配置联调"><a href="#3-配置联调" class="headerlink" title="3. 配置联调"></a>3. 配置联调</h2><h3 id="3-1-安装自动部署包"><a href="#3-1-安装自动部署包" class="headerlink" title="3.1 安装自动部署包"></a>3.1 安装自动部署包</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cnpm i hexo-deployer-git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-配置主题"><a href="#3-2-配置主题" class="headerlink" title="3.2 配置主题"></a>3.2 配置主题</h3><p>cd 到 themes文件夹下clone主题<br><br>详细配置如下：<br><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md</a></p><h3 id="3-3-生成页面"><a href="#3-3-生成页面" class="headerlink" title="3.3 生成页面"></a>3.3 生成页面</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>generate 生成</p><h3 id="3-4-上传"><a href="#3-4-上传" class="headerlink" title="3.4 上传"></a>3.4 上传</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>deployer 部署</p><h3 id="3-5-清除"><a href="#3-5-清除" class="headerlink" title="3.5 清除"></a>3.5 清除</h3><p>上传失败，尝试清除</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-你可能还需要记住的网站"><a href="#4-你可能还需要记住的网站" class="headerlink" title="4. 你可能还需要记住的网站"></a>4. 你可能还需要记住的网站</h2><p>博客的第三方评论站点：</p><p><a href="https://console.leancloud.cn/">https://console.leancloud.cn/</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机中的七层模型</title>
      <link href="/2020/10/02/note/qian-duan-wang-luo-wang-luo-qi-ceng-mo-xing/"/>
      <url>/2020/10/02/note/qian-duan-wang-luo-wang-luo-qi-ceng-mo-xing/</url>
      
        <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/1996162-e08035cb353a597b.png" alt="七层模型"></p>]]></content>
      
      
      <categories>
          
          <category> 前端网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> 七层模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>禁止iOS&amp;Android长按时触发系统菜单下载</title>
      <link href="/2020/10/02/note/html-css-mian-shi-jian-rong-jin-zhi-ios-android-chang-an-shi-hong-fa-xi-tong-cai-dan-xia-zai/"/>
      <url>/2020/10/02/note/html-css-mian-shi-jian-rong-jin-zhi-ios-android-chang-an-shi-hong-fa-xi-tong-cai-dan-xia-zai/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta http-equiv="X-UA-Compatible" content="IE=edge">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>Document</title>    <style>        html,        body {            /* touch-callout: none; */            -webkit-touch-callout: none;            /* 禁止菜单 */<pre><code>        user-select: none;        -webkit-user-select: none;        /* 禁止选中 */    &#125;     /* 直接用ui组件了 */&lt;/style&gt;</code></pre></head><body></body></html>]]></content>
      
      
      <categories>
          
          <category> html&amp;css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 卷 </tag>
            
            <tag> html </tag>
            
            <tag> 兼容 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flex的使用</title>
      <link href="/2020/09/23/note/html-css-gai-nian-flex-de-shi-yong/"/>
      <url>/2020/09/23/note/html-css-gai-nian-flex-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span>        <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1, maximum-scale=1,minimum-scale=1, user-scalable=no<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>头部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">html</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token selector">*</span> <span class="token punctuation">&#123;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">img</span> <span class="token punctuation">&#123;</span>            <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.header</span> <span class="token punctuation">&#123;</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.header .right,        .attached</span> <span class="token punctuation">&#123;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.header .left</span> <span class="token punctuation">&#123;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- flex布局是一种布局模型，经常被称之为flexbox，使用flex布局之后，他会给子元素提供强大空间分配和对齐能力。            在没有使用flex布局之前，常用布局有：流式布局（默认），浮动布局，定位布局等等。缺陷是子元素需要自己控制自己在父元素中的位置，还要注意父元素高度坍塌。            flex的优点就是避免不灵活的布局形式，创建更多种布局模式供你选择，解决了子元素的对齐和分布与 响应式等问题。缺点是只能依靠自身的布局模式，稍有变化则无法改变。 flex布局可能会造成画面抖动，不同环境下，造成的原因也不一样，可以试试设置最小高度，和尝试其它布局 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.runoob.com/w3cnote/flex-grammar.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>菜鸟<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            flex属性分为容器的属性和项目的属性，其中容器的属性align-content对多行起作用，align-item对单行起作用，两个属性的属性值一样，默认都是stretch填充完整个容器        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>attached<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            order flex-grow flex-shrink flex-basis flex align-self 设置在项目下<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            flex是flex-grow flex-shrink flex-basis的简写<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            order:1 值为证书 越大越靠后<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> html&amp;css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flex </tag>
            
            <tag> css </tag>
            
            <tag> 卷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>debug的四种操作</title>
      <link href="/2020/09/07/note/qian-duan-bian-cheng-debug-de-si-chong-cao-zuo/"/>
      <url>/2020/09/07/note/qian-duan-bian-cheng-debug-de-si-chong-cao-zuo/</url>
      
        <content type="html"><![CDATA[<p>在使用vscode过程中可以使用断点调试</p><p>在代码页左侧标出红点或使用 debugger 语句</p><p>其调试有四种，分别是continue（继续）、step over（单步跳过）、step in（单步调试）、step out（单步跳出）</p><h2 id="1-continue（继续）"><a href="#1-continue（继续）" class="headerlink" title="1.continue（继续）"></a>1.continue（继续）</h2><p>执行至下一个断点</p><h2 id="2-step-over（单步跳过）"><a href="#2-step-over（单步跳过）" class="headerlink" title="2.step over（单步跳过）"></a>2.step over（单步跳过）</h2><p>从断点处开始，执行单步语句，如执行</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">debugger</span><span class="token punctuation">;</span><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//单步跳过,不进入sum函数内部</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span>num2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">debugger</span><span class="token punctuation">;</span><span class="token comment">//但是如果函数内打了断点，则会跳到函数内部断点处，继续单步执行</span><span class="token keyword">return</span> num1<span class="token operator">+</span>num2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-step-in（单步调试）"><a href="#3-step-in（单步调试）" class="headerlink" title="3.step in（单步调试）"></a>3.step in（单步调试）</h2><p>单步调试会进入到函数内部</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">debugger</span><span class="token punctuation">;</span><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//单步调试,进入sum函数内部</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="4-step-out（单步跳出）"><a href="#4-step-out（单步跳出）" class="headerlink" title="4.step out（单步跳出）"></a>4.step out（单步跳出）</h2><p>与step in（单步调试）相反，跳出函数内部</p>]]></content>
      
      
      <categories>
          
          <category> 前端编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> debug </tag>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三次握手和四次挥手</title>
      <link href="/2020/09/07/note/ji-suan-ji-wang-luo-san-ci-wo-shou-he-si-ci-hui-shou/"/>
      <url>/2020/09/07/note/ji-suan-ji-wang-luo-san-ci-wo-shou-he-si-ci-hui-shou/</url>
      
        <content type="html"><![CDATA[<p>当客户端尝试访问服务端时会产生tcp连接，而tcp连接伴随着三次握手。</p><h1 id="1-基本流程"><a href="#1-基本流程" class="headerlink" title="1. 基本流程"></a>1. 基本流程</h1><p>几个标记位（SYN&#x2F;FIN&#x2F;ACK&#x2F;RST）</p><pre class="line-numbers language-none"><code class="language-none">三次握手client  SYN      serverserver  SYN ACK  clientclient  ACK      server四次挥手client  FIN      serverserver  ACK      clientserver  FIN      clientclient  ACK      server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-思考"><a href="#2-思考" class="headerlink" title="2. 思考"></a>2. 思考</h1><h1 id="2-1-为什么是三次握手？"><a href="#2-1-为什么是三次握手？" class="headerlink" title="2.1 为什么是三次握手？"></a>2.1 为什么是三次握手？</h1><p>两次握手只能保证客户端的序列号成功被服务端接收，而服务端是无法确认自己的序列号是否被客户端成功接收。所以是不行的</p><h1 id="2-2-为什么是四次挥手？"><a href="#2-2-为什么是四次挥手？" class="headerlink" title="2.2 为什么是四次挥手？"></a>2.2 为什么是四次挥手？</h1><p>四次挥手是因为服务端需要保证自己已经传输完数据，先ACK客户端，待传输完成后再FIN客户端</p><h1 id="2-3-是否每次网络请求都需要经过三次握手和四次挥手？"><a href="#2-3-是否每次网络请求都需要经过三次握手和四次挥手？" class="headerlink" title="2.3 是否每次网络请求都需要经过三次握手和四次挥手？"></a>2.3 是否每次网络请求都需要经过三次握手和四次挥手？</h1><p>最早是，但在HTTP&#x2F;1.1中改用了持久连接，就是在一次连接建立之后，只要客户端或者服务端没有明确提出断开连接，那么这个tcp连接会一直保持连接状态 </p><p>持久连接的一个最大的好处是：大大减少了连接的建立以及关闭时延。（现在我们我们常用的浏览器基本用的都是HTTP1.1,HTTP1.2还未全面普及）</p><p>HTTP1.1中有一个Transport段。会携带一个 Connection:Keep-Alive，表示希望将此条连接作为持久连接。 </p><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="https://juejin.cn/post/7045059219216662564">https://juejin.cn/post/7045059219216662564</a></p><p><a href="https://blog.csdn.net/u012174809/article/details/123281714">https://blog.csdn.net/u012174809/article/details/123281714</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷 </tag>
            
            <tag> 计算机网络 </tag>
            
            <tag> tcp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你的第一个程序是&quot;Hello World&quot;？</title>
      <link href="/2020/09/02/note/bian-cheng-zhi-shi-hello-world/"/>
      <url>/2020/09/02/note/bian-cheng-zhi-shi-hello-world/</url>
      
        <content type="html"><![CDATA[<p>我的第一门编程课是Java，而输出的第一个程序就是”Hello World”。</p><pre class="line-numbers language-none"><code class="language-none">System.out.println(&quot;Hello World&quot;);console.log(&quot;Hello World&quot;);echo &quot;Hello World&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>A：喂，第一个程序为什么都是”Hello World”啊？</p><p>B：老师教的。</p><p>A：为什么不教其它？</p><p>B：书上写着咯。</p><p>A：java C# js是同一本书？</p><p>B：诶，你很无聊诶…</p><p>&#x2F;<br>根据维基百科记载，”Hello World”最早出现在Kernighan的B语言手册上。程序员出于某种仪式感或是洁癖，”Hello World”代代相传至今。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 编程知识 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
